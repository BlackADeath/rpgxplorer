'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2407
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class CharacterXMLDataset
    Inherits DataSet
    
    Private tableCharacter As CharacterDataTable
    
    Private tableSubtypes As SubtypesDataTable
    
    Private tableSubtype As SubtypeDataTable
    
    Private tableClasses As ClassesDataTable
    
    Private table_Class As _ClassDataTable
    
    Private tableResistances As ResistancesDataTable
    
    Private tableResistance As ResistanceDataTable
    
    Private tableAttacks As AttacksDataTable
    
    Private tableAttack As AttackDataTable
    
    Private tablePrimary As PrimaryDataTable
    
    Private tablePrimaryExtraDamage As PrimaryExtraDamageDataTable
    
    Private tablePrimaryAbility As PrimaryAbilityDataTable
    
    Private tablePrimaryModifier As PrimaryModifierDataTable
    
    Private tablePrimaryDamageResistance As PrimaryDamageResistanceDataTable
    
    Private tablePrimaryCondition As PrimaryConditionDataTable
    
    Private tablePrimaryConditionalModifier As PrimaryConditionalModifierDataTable
    
    Private tablePrimaryConditionalExtraDamage As PrimaryConditionalExtraDamageDataTable
    
    Private tablePrimaryConditionalAbility As PrimaryConditionalAbilityDataTable
    
    Private tablePrimaryConditionalDamageResistance As PrimaryConditionalDamageResistanceDataTable
    
    Private tableSecondary As SecondaryDataTable
    
    Private tableSecondaryExtraDamage As SecondaryExtraDamageDataTable
    
    Private tableSecondaryAbility As SecondaryAbilityDataTable
    
    Private tableSecondaryModifier As SecondaryModifierDataTable
    
    Private tableSecondaryDamageResistance As SecondaryDamageResistanceDataTable
    
    Private tableSecondaryCondition As SecondaryConditionDataTable
    
    Private tableSecondaryConditionalModifier As SecondaryConditionalModifierDataTable
    
    Private tableSecondaryConditionalExtraDamage As SecondaryConditionalExtraDamageDataTable
    
    Private tableSecondaryConditionalAbility As SecondaryConditionalAbilityDataTable
    
    Private tableSecondaryConditionalDamageResistance As SecondaryConditionalDamageResistanceDataTable
    
    Private tableBuckler As BucklerDataTable
    
    Private tableBucklerDamageResistance As BucklerDamageResistanceDataTable
    
    Private tableBucklerModifier As BucklerModifierDataTable
    
    Private tableBucklerAbility As BucklerAbilityDataTable
    
    Private tableSkills As SkillsDataTable
    
    Private tableSkill As SkillDataTable
    
    Private tableLanguages As LanguagesDataTable
    
    Private tableLanguage As LanguageDataTable
    
    Private tableCoreModifiers As CoreModifiersDataTable
    
    Private tableCoreModifier As CoreModifierDataTable
    
    Private tableAttackModifiers As AttackModifiersDataTable
    
    Private tableAttackModifier As AttackModifierDataTable
    
    Private tableDefenseModifiers As DefenseModifiersDataTable
    
    Private tableDefenseModifier As DefenseModifierDataTable
    
    Private tableSkillModifiers As SkillModifiersDataTable
    
    Private tableSkillModifier As SkillModifierDataTable
    
    Private tableMagicModifiers As MagicModifiersDataTable
    
    Private tableMagicModifier As MagicModifierDataTable
    
    Private tableFeats As FeatsDataTable
    
    Private tableFeat As FeatDataTable
    
    Private tableFeatures As FeaturesDataTable
    
    Private tableFeature As FeatureDataTable
    
    Private tableInventory As InventoryDataTable
    
    Private tableInventoryItem As InventoryItemDataTable
    
    Private tableAssets As AssetsDataTable
    
    Private tableAssetItem As AssetItemDataTable
    
    Private tableSpellCasterInfo As SpellCasterInfoDataTable
    
    Private tableCasterClass As CasterClassDataTable
    
    Private tableSpellsPerDay As SpellsPerDayDataTable
    
    Private tableClassSPD As ClassSPDDataTable
    
    Private tableSpecialistSPD As SpecialistSPDDataTable
    
    Private tableDomainSPD As DomainSPDDataTable
    
    Private tableSpellSaves As SpellSavesDataTable
    
    Private tableSpellsKnown As SpellsKnownDataTable
    
    Private tableMemorizedSpells As MemorizedSpellsDataTable
    
    Private tableMemorizedSpell As MemorizedSpellDataTable
    
    Private tableDomains As DomainsDataTable
    
    Private tableDomain As DomainDataTable
    
    Private tableSpecialistSchools As SpecialistSchoolsDataTable
    
    Private tableSpecialistSchool As SpecialistSchoolDataTable
    
    Private tableProhibitedSchools As ProhibitedSchoolsDataTable
    
    Private tableProhibitedSchool As ProhibitedSchoolDataTable
    
    Private tableSpells As SpellsDataTable
    
    Private tableClassSpells As ClassSpellsDataTable
    
    Private tableSpell As SpellDataTable
    
    Private tableManifesterInfo As ManifesterInfoDataTable
    
    Private tableManifesterClass As ManifesterClassDataTable
    
    Private tablePowerSaves As PowerSavesDataTable
    
    Private tablePowers As PowersDataTable
    
    Private tableClassPowers As ClassPowersDataTable
    
    Private tablePower As PowerDataTable
    
    Private tablePsionicSpecializations As PsionicSpecializationsDataTable
    
    Private tablePsionicSpecialization As PsionicSpecializationDataTable
    
    Private tablePsionicModifiers As PsionicModifiersDataTable
    
    Private tablePsionicModifier As PsionicModifierDataTable
    
    Private tableArmorClass As ArmorClassDataTable
    
    Private tableSavingThrows As SavingThrowsDataTable
    
    Private tableSavingThrow As SavingThrowDataTable
    
    Private tableAbilityScores As AbilityScoresDataTable
    
    Private tableAbilityScore As AbilityScoreDataTable
    
    Private tablePsiLikeAbilities As PsiLikeAbilitiesDataTable
    
    Private tablePsiLikeAbility As PsiLikeAbilityDataTable
    
    Private tableAbilityPower As AbilityPowerDataTable
    
    Private tableSpellLikeAbilities As SpellLikeAbilitiesDataTable
    
    Private tableSpellLikeAbility As SpellLikeAbilityDataTable
    
    Private tableAbilitySpell As AbilitySpellDataTable
    
    Private relationSubtypes_Subtype As DataRelation
    
    Private relationClasses_Class As DataRelation
    
    Private relationResistances_Resistance As DataRelation
    
    Private relationPrimaryCondition_PrimaryConditionalModifier As DataRelation
    
    Private relationPrimaryCondition_PrimaryConditionalExtraDamage As DataRelation
    
    Private relationPrimaryCondition_PrimaryConditionalAbility As DataRelation
    
    Private relationPrimaryCondition_PrimaryConditionalDamageResistance As DataRelation
    
    Private relationPrimary_PrimaryExtraDamage As DataRelation
    
    Private relationPrimary_PrimaryAbility As DataRelation
    
    Private relationPrimary_PrimaryModifier As DataRelation
    
    Private relationPrimary_PrimaryDamageResistance As DataRelation
    
    Private relationPrimary_PrimaryCondition As DataRelation
    
    Private relationSecondaryCondition_SecondaryConditionalModifier As DataRelation
    
    Private relationSecondaryCondition_SecondaryConditionalExtraDamage As DataRelation
    
    Private relationSecondaryCondition_SecondaryConditionalAbility As DataRelation
    
    Private relationSecondaryCondition_SecondaryConditionalDamageResistance As DataRelation
    
    Private relationSecondary_SecondaryExtraDamage As DataRelation
    
    Private relationSecondary_SecondaryAbility As DataRelation
    
    Private relationSecondary_SecondaryModifier As DataRelation
    
    Private relationSecondary_SecondaryDamageResistance As DataRelation
    
    Private relationSecondary_SecondaryCondition As DataRelation
    
    Private relationBuckler_BucklerDamageResistance As DataRelation
    
    Private relationBuckler_BucklerModifier As DataRelation
    
    Private relationBuckler_BucklerAbility As DataRelation
    
    Private relationAttack_Primary As DataRelation
    
    Private relationAttack_Secondary As DataRelation
    
    Private relationAttack_Buckler As DataRelation
    
    Private relationAttacks_Attack As DataRelation
    
    Private relationSkills_Skill As DataRelation
    
    Private relationLanguages_Language As DataRelation
    
    Private relationCoreModifiers_CoreModifier As DataRelation
    
    Private relationAttackModifiers_AttackModifier As DataRelation
    
    Private relationDefenseModifiers_DefenseModifier As DataRelation
    
    Private relationSkillModifiers_SkillModifier As DataRelation
    
    Private relationMagicModifiers_MagicModifier As DataRelation
    
    Private relationFeats_Feat As DataRelation
    
    Private relationFeatures_Feature As DataRelation
    
    Private relationInventory_InventoryItem As DataRelation
    
    Private relationAssets_AssetItem As DataRelation
    
    Private relationSpellsPerDay_ClassSPD As DataRelation
    
    Private relationSpellsPerDay_SpecialistSPD As DataRelation
    
    Private relationSpellsPerDay_DomainSPD As DataRelation
    
    Private relationMemorizedSpells_MemorizedSpell As DataRelation
    
    Private relationCasterClass_SpellsPerDay As DataRelation
    
    Private relationCasterClass_SpellSaves As DataRelation
    
    Private relationCasterClass_SpellsKnown As DataRelation
    
    Private relationCasterClass_MemorizedSpells As DataRelation
    
    Private relationSpellCasterInfo_CasterClass As DataRelation
    
    Private relationDomains_Domain As DataRelation
    
    Private relationSpecialistSchools_SpecialistSchool As DataRelation
    
    Private relationProhibitedSchools_ProhibitedSchool As DataRelation
    
    Private relationClassSpells_Spell As DataRelation
    
    Private relationSpells_ClassSpells As DataRelation
    
    Private relationManifesterClass_PowerSaves As DataRelation
    
    Private relationManifesterInfo_ManifesterClass As DataRelation
    
    Private relationClassPowers_Power As DataRelation
    
    Private relationPowers_ClassPowers As DataRelation
    
    Private relationPsionicSpecializations_PsionicSpecialization As DataRelation
    
    Private relationPsionicModifiers_PsionicModifier As DataRelation
    
    Private relationSavingThrows_SavingThrow As DataRelation
    
    Private relationAbilityScores_AbilityScore As DataRelation
    
    Private relationPsiLikeAbility_AbilityPower As DataRelation
    
    Private relationPsiLikeAbilities_PsiLikeAbility As DataRelation
    
    Private relationSpellLikeAbility_AbilitySpell As DataRelation
    
    Private relationSpellLikeAbilities_SpellLikeAbility As DataRelation
    
    Private relationCharacter_Subtypes As DataRelation
    
    Private relationCharacter_Classes As DataRelation
    
    Private relationCharacter_Resistances As DataRelation
    
    Private relationCharacter_Attacks As DataRelation
    
    Private relationCharacter_Skills As DataRelation
    
    Private relationCharacter_Languages As DataRelation
    
    Private relationCharacter_CoreModifiers As DataRelation
    
    Private relationCharacter_AttackModifiers As DataRelation
    
    Private relationCharacter_DefenseModifiers As DataRelation
    
    Private relationCharacter_SkillModifiers As DataRelation
    
    Private relationCharacter_MagicModifiers As DataRelation
    
    Private relationCharacter_Feats As DataRelation
    
    Private relationCharacter_Features As DataRelation
    
    Private relationCharacter_Inventory As DataRelation
    
    Private relationCharacter_Assets As DataRelation
    
    Private relationCharacter_SpellCasterInfo As DataRelation
    
    Private relationCharacter_Domains As DataRelation
    
    Private relationCharacter_SpecialistSchools As DataRelation
    
    Private relationCharacter_ProhibitedSchools As DataRelation
    
    Private relationCharacter_Spells As DataRelation
    
    Private relationCharacter_ManifesterInfo As DataRelation
    
    Private relationCharacter_Powers As DataRelation
    
    Private relationCharacter_PsionicSpecializations As DataRelation
    
    Private relationCharacter_PsionicModifiers As DataRelation
    
    Private relationCharacter_ArmorClass As DataRelation
    
    Private relationCharacter_SavingThrows As DataRelation
    
    Private relationCharacter_AbilityScores As DataRelation
    
    Private relationCharacter_PsiLikeAbilities As DataRelation
    
    Private relationCharacter_SpellLikeAbilities As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Character")) Is Nothing) Then
                Me.Tables.Add(New CharacterDataTable(ds.Tables("Character")))
            End If
            If (Not (ds.Tables("Subtypes")) Is Nothing) Then
                Me.Tables.Add(New SubtypesDataTable(ds.Tables("Subtypes")))
            End If
            If (Not (ds.Tables("Subtype")) Is Nothing) Then
                Me.Tables.Add(New SubtypeDataTable(ds.Tables("Subtype")))
            End If
            If (Not (ds.Tables("Classes")) Is Nothing) Then
                Me.Tables.Add(New ClassesDataTable(ds.Tables("Classes")))
            End If
            If (Not (ds.Tables("Class")) Is Nothing) Then
                Me.Tables.Add(New _ClassDataTable(ds.Tables("Class")))
            End If
            If (Not (ds.Tables("Resistances")) Is Nothing) Then
                Me.Tables.Add(New ResistancesDataTable(ds.Tables("Resistances")))
            End If
            If (Not (ds.Tables("Resistance")) Is Nothing) Then
                Me.Tables.Add(New ResistanceDataTable(ds.Tables("Resistance")))
            End If
            If (Not (ds.Tables("Attacks")) Is Nothing) Then
                Me.Tables.Add(New AttacksDataTable(ds.Tables("Attacks")))
            End If
            If (Not (ds.Tables("Attack")) Is Nothing) Then
                Me.Tables.Add(New AttackDataTable(ds.Tables("Attack")))
            End If
            If (Not (ds.Tables("Primary")) Is Nothing) Then
                Me.Tables.Add(New PrimaryDataTable(ds.Tables("Primary")))
            End If
            If (Not (ds.Tables("PrimaryExtraDamage")) Is Nothing) Then
                Me.Tables.Add(New PrimaryExtraDamageDataTable(ds.Tables("PrimaryExtraDamage")))
            End If
            If (Not (ds.Tables("PrimaryAbility")) Is Nothing) Then
                Me.Tables.Add(New PrimaryAbilityDataTable(ds.Tables("PrimaryAbility")))
            End If
            If (Not (ds.Tables("PrimaryModifier")) Is Nothing) Then
                Me.Tables.Add(New PrimaryModifierDataTable(ds.Tables("PrimaryModifier")))
            End If
            If (Not (ds.Tables("PrimaryDamageResistance")) Is Nothing) Then
                Me.Tables.Add(New PrimaryDamageResistanceDataTable(ds.Tables("PrimaryDamageResistance")))
            End If
            If (Not (ds.Tables("PrimaryCondition")) Is Nothing) Then
                Me.Tables.Add(New PrimaryConditionDataTable(ds.Tables("PrimaryCondition")))
            End If
            If (Not (ds.Tables("PrimaryConditionalModifier")) Is Nothing) Then
                Me.Tables.Add(New PrimaryConditionalModifierDataTable(ds.Tables("PrimaryConditionalModifier")))
            End If
            If (Not (ds.Tables("PrimaryConditionalExtraDamage")) Is Nothing) Then
                Me.Tables.Add(New PrimaryConditionalExtraDamageDataTable(ds.Tables("PrimaryConditionalExtraDamage")))
            End If
            If (Not (ds.Tables("PrimaryConditionalAbility")) Is Nothing) Then
                Me.Tables.Add(New PrimaryConditionalAbilityDataTable(ds.Tables("PrimaryConditionalAbility")))
            End If
            If (Not (ds.Tables("PrimaryConditionalDamageResistance")) Is Nothing) Then
                Me.Tables.Add(New PrimaryConditionalDamageResistanceDataTable(ds.Tables("PrimaryConditionalDamageResistance")))
            End If
            If (Not (ds.Tables("Secondary")) Is Nothing) Then
                Me.Tables.Add(New SecondaryDataTable(ds.Tables("Secondary")))
            End If
            If (Not (ds.Tables("SecondaryExtraDamage")) Is Nothing) Then
                Me.Tables.Add(New SecondaryExtraDamageDataTable(ds.Tables("SecondaryExtraDamage")))
            End If
            If (Not (ds.Tables("SecondaryAbility")) Is Nothing) Then
                Me.Tables.Add(New SecondaryAbilityDataTable(ds.Tables("SecondaryAbility")))
            End If
            If (Not (ds.Tables("SecondaryModifier")) Is Nothing) Then
                Me.Tables.Add(New SecondaryModifierDataTable(ds.Tables("SecondaryModifier")))
            End If
            If (Not (ds.Tables("SecondaryDamageResistance")) Is Nothing) Then
                Me.Tables.Add(New SecondaryDamageResistanceDataTable(ds.Tables("SecondaryDamageResistance")))
            End If
            If (Not (ds.Tables("SecondaryCondition")) Is Nothing) Then
                Me.Tables.Add(New SecondaryConditionDataTable(ds.Tables("SecondaryCondition")))
            End If
            If (Not (ds.Tables("SecondaryConditionalModifier")) Is Nothing) Then
                Me.Tables.Add(New SecondaryConditionalModifierDataTable(ds.Tables("SecondaryConditionalModifier")))
            End If
            If (Not (ds.Tables("SecondaryConditionalExtraDamage")) Is Nothing) Then
                Me.Tables.Add(New SecondaryConditionalExtraDamageDataTable(ds.Tables("SecondaryConditionalExtraDamage")))
            End If
            If (Not (ds.Tables("SecondaryConditionalAbility")) Is Nothing) Then
                Me.Tables.Add(New SecondaryConditionalAbilityDataTable(ds.Tables("SecondaryConditionalAbility")))
            End If
            If (Not (ds.Tables("SecondaryConditionalDamageResistance")) Is Nothing) Then
                Me.Tables.Add(New SecondaryConditionalDamageResistanceDataTable(ds.Tables("SecondaryConditionalDamageResistance")))
            End If
            If (Not (ds.Tables("Buckler")) Is Nothing) Then
                Me.Tables.Add(New BucklerDataTable(ds.Tables("Buckler")))
            End If
            If (Not (ds.Tables("BucklerDamageResistance")) Is Nothing) Then
                Me.Tables.Add(New BucklerDamageResistanceDataTable(ds.Tables("BucklerDamageResistance")))
            End If
            If (Not (ds.Tables("BucklerModifier")) Is Nothing) Then
                Me.Tables.Add(New BucklerModifierDataTable(ds.Tables("BucklerModifier")))
            End If
            If (Not (ds.Tables("BucklerAbility")) Is Nothing) Then
                Me.Tables.Add(New BucklerAbilityDataTable(ds.Tables("BucklerAbility")))
            End If
            If (Not (ds.Tables("Skills")) Is Nothing) Then
                Me.Tables.Add(New SkillsDataTable(ds.Tables("Skills")))
            End If
            If (Not (ds.Tables("Skill")) Is Nothing) Then
                Me.Tables.Add(New SkillDataTable(ds.Tables("Skill")))
            End If
            If (Not (ds.Tables("Languages")) Is Nothing) Then
                Me.Tables.Add(New LanguagesDataTable(ds.Tables("Languages")))
            End If
            If (Not (ds.Tables("Language")) Is Nothing) Then
                Me.Tables.Add(New LanguageDataTable(ds.Tables("Language")))
            End If
            If (Not (ds.Tables("CoreModifiers")) Is Nothing) Then
                Me.Tables.Add(New CoreModifiersDataTable(ds.Tables("CoreModifiers")))
            End If
            If (Not (ds.Tables("CoreModifier")) Is Nothing) Then
                Me.Tables.Add(New CoreModifierDataTable(ds.Tables("CoreModifier")))
            End If
            If (Not (ds.Tables("AttackModifiers")) Is Nothing) Then
                Me.Tables.Add(New AttackModifiersDataTable(ds.Tables("AttackModifiers")))
            End If
            If (Not (ds.Tables("AttackModifier")) Is Nothing) Then
                Me.Tables.Add(New AttackModifierDataTable(ds.Tables("AttackModifier")))
            End If
            If (Not (ds.Tables("DefenseModifiers")) Is Nothing) Then
                Me.Tables.Add(New DefenseModifiersDataTable(ds.Tables("DefenseModifiers")))
            End If
            If (Not (ds.Tables("DefenseModifier")) Is Nothing) Then
                Me.Tables.Add(New DefenseModifierDataTable(ds.Tables("DefenseModifier")))
            End If
            If (Not (ds.Tables("SkillModifiers")) Is Nothing) Then
                Me.Tables.Add(New SkillModifiersDataTable(ds.Tables("SkillModifiers")))
            End If
            If (Not (ds.Tables("SkillModifier")) Is Nothing) Then
                Me.Tables.Add(New SkillModifierDataTable(ds.Tables("SkillModifier")))
            End If
            If (Not (ds.Tables("MagicModifiers")) Is Nothing) Then
                Me.Tables.Add(New MagicModifiersDataTable(ds.Tables("MagicModifiers")))
            End If
            If (Not (ds.Tables("MagicModifier")) Is Nothing) Then
                Me.Tables.Add(New MagicModifierDataTable(ds.Tables("MagicModifier")))
            End If
            If (Not (ds.Tables("Feats")) Is Nothing) Then
                Me.Tables.Add(New FeatsDataTable(ds.Tables("Feats")))
            End If
            If (Not (ds.Tables("Feat")) Is Nothing) Then
                Me.Tables.Add(New FeatDataTable(ds.Tables("Feat")))
            End If
            If (Not (ds.Tables("Features")) Is Nothing) Then
                Me.Tables.Add(New FeaturesDataTable(ds.Tables("Features")))
            End If
            If (Not (ds.Tables("Feature")) Is Nothing) Then
                Me.Tables.Add(New FeatureDataTable(ds.Tables("Feature")))
            End If
            If (Not (ds.Tables("Inventory")) Is Nothing) Then
                Me.Tables.Add(New InventoryDataTable(ds.Tables("Inventory")))
            End If
            If (Not (ds.Tables("InventoryItem")) Is Nothing) Then
                Me.Tables.Add(New InventoryItemDataTable(ds.Tables("InventoryItem")))
            End If
            If (Not (ds.Tables("Assets")) Is Nothing) Then
                Me.Tables.Add(New AssetsDataTable(ds.Tables("Assets")))
            End If
            If (Not (ds.Tables("AssetItem")) Is Nothing) Then
                Me.Tables.Add(New AssetItemDataTable(ds.Tables("AssetItem")))
            End If
            If (Not (ds.Tables("SpellCasterInfo")) Is Nothing) Then
                Me.Tables.Add(New SpellCasterInfoDataTable(ds.Tables("SpellCasterInfo")))
            End If
            If (Not (ds.Tables("CasterClass")) Is Nothing) Then
                Me.Tables.Add(New CasterClassDataTable(ds.Tables("CasterClass")))
            End If
            If (Not (ds.Tables("SpellsPerDay")) Is Nothing) Then
                Me.Tables.Add(New SpellsPerDayDataTable(ds.Tables("SpellsPerDay")))
            End If
            If (Not (ds.Tables("ClassSPD")) Is Nothing) Then
                Me.Tables.Add(New ClassSPDDataTable(ds.Tables("ClassSPD")))
            End If
            If (Not (ds.Tables("SpecialistSPD")) Is Nothing) Then
                Me.Tables.Add(New SpecialistSPDDataTable(ds.Tables("SpecialistSPD")))
            End If
            If (Not (ds.Tables("DomainSPD")) Is Nothing) Then
                Me.Tables.Add(New DomainSPDDataTable(ds.Tables("DomainSPD")))
            End If
            If (Not (ds.Tables("SpellSaves")) Is Nothing) Then
                Me.Tables.Add(New SpellSavesDataTable(ds.Tables("SpellSaves")))
            End If
            If (Not (ds.Tables("SpellsKnown")) Is Nothing) Then
                Me.Tables.Add(New SpellsKnownDataTable(ds.Tables("SpellsKnown")))
            End If
            If (Not (ds.Tables("MemorizedSpells")) Is Nothing) Then
                Me.Tables.Add(New MemorizedSpellsDataTable(ds.Tables("MemorizedSpells")))
            End If
            If (Not (ds.Tables("MemorizedSpell")) Is Nothing) Then
                Me.Tables.Add(New MemorizedSpellDataTable(ds.Tables("MemorizedSpell")))
            End If
            If (Not (ds.Tables("Domains")) Is Nothing) Then
                Me.Tables.Add(New DomainsDataTable(ds.Tables("Domains")))
            End If
            If (Not (ds.Tables("Domain")) Is Nothing) Then
                Me.Tables.Add(New DomainDataTable(ds.Tables("Domain")))
            End If
            If (Not (ds.Tables("SpecialistSchools")) Is Nothing) Then
                Me.Tables.Add(New SpecialistSchoolsDataTable(ds.Tables("SpecialistSchools")))
            End If
            If (Not (ds.Tables("SpecialistSchool")) Is Nothing) Then
                Me.Tables.Add(New SpecialistSchoolDataTable(ds.Tables("SpecialistSchool")))
            End If
            If (Not (ds.Tables("ProhibitedSchools")) Is Nothing) Then
                Me.Tables.Add(New ProhibitedSchoolsDataTable(ds.Tables("ProhibitedSchools")))
            End If
            If (Not (ds.Tables("ProhibitedSchool")) Is Nothing) Then
                Me.Tables.Add(New ProhibitedSchoolDataTable(ds.Tables("ProhibitedSchool")))
            End If
            If (Not (ds.Tables("Spells")) Is Nothing) Then
                Me.Tables.Add(New SpellsDataTable(ds.Tables("Spells")))
            End If
            If (Not (ds.Tables("ClassSpells")) Is Nothing) Then
                Me.Tables.Add(New ClassSpellsDataTable(ds.Tables("ClassSpells")))
            End If
            If (Not (ds.Tables("Spell")) Is Nothing) Then
                Me.Tables.Add(New SpellDataTable(ds.Tables("Spell")))
            End If
            If (Not (ds.Tables("ManifesterInfo")) Is Nothing) Then
                Me.Tables.Add(New ManifesterInfoDataTable(ds.Tables("ManifesterInfo")))
            End If
            If (Not (ds.Tables("ManifesterClass")) Is Nothing) Then
                Me.Tables.Add(New ManifesterClassDataTable(ds.Tables("ManifesterClass")))
            End If
            If (Not (ds.Tables("PowerSaves")) Is Nothing) Then
                Me.Tables.Add(New PowerSavesDataTable(ds.Tables("PowerSaves")))
            End If
            If (Not (ds.Tables("Powers")) Is Nothing) Then
                Me.Tables.Add(New PowersDataTable(ds.Tables("Powers")))
            End If
            If (Not (ds.Tables("ClassPowers")) Is Nothing) Then
                Me.Tables.Add(New ClassPowersDataTable(ds.Tables("ClassPowers")))
            End If
            If (Not (ds.Tables("Power")) Is Nothing) Then
                Me.Tables.Add(New PowerDataTable(ds.Tables("Power")))
            End If
            If (Not (ds.Tables("PsionicSpecializations")) Is Nothing) Then
                Me.Tables.Add(New PsionicSpecializationsDataTable(ds.Tables("PsionicSpecializations")))
            End If
            If (Not (ds.Tables("PsionicSpecialization")) Is Nothing) Then
                Me.Tables.Add(New PsionicSpecializationDataTable(ds.Tables("PsionicSpecialization")))
            End If
            If (Not (ds.Tables("PsionicModifiers")) Is Nothing) Then
                Me.Tables.Add(New PsionicModifiersDataTable(ds.Tables("PsionicModifiers")))
            End If
            If (Not (ds.Tables("PsionicModifier")) Is Nothing) Then
                Me.Tables.Add(New PsionicModifierDataTable(ds.Tables("PsionicModifier")))
            End If
            If (Not (ds.Tables("ArmorClass")) Is Nothing) Then
                Me.Tables.Add(New ArmorClassDataTable(ds.Tables("ArmorClass")))
            End If
            If (Not (ds.Tables("SavingThrows")) Is Nothing) Then
                Me.Tables.Add(New SavingThrowsDataTable(ds.Tables("SavingThrows")))
            End If
            If (Not (ds.Tables("SavingThrow")) Is Nothing) Then
                Me.Tables.Add(New SavingThrowDataTable(ds.Tables("SavingThrow")))
            End If
            If (Not (ds.Tables("AbilityScores")) Is Nothing) Then
                Me.Tables.Add(New AbilityScoresDataTable(ds.Tables("AbilityScores")))
            End If
            If (Not (ds.Tables("AbilityScore")) Is Nothing) Then
                Me.Tables.Add(New AbilityScoreDataTable(ds.Tables("AbilityScore")))
            End If
            If (Not (ds.Tables("PsiLikeAbilities")) Is Nothing) Then
                Me.Tables.Add(New PsiLikeAbilitiesDataTable(ds.Tables("PsiLikeAbilities")))
            End If
            If (Not (ds.Tables("PsiLikeAbility")) Is Nothing) Then
                Me.Tables.Add(New PsiLikeAbilityDataTable(ds.Tables("PsiLikeAbility")))
            End If
            If (Not (ds.Tables("AbilityPower")) Is Nothing) Then
                Me.Tables.Add(New AbilityPowerDataTable(ds.Tables("AbilityPower")))
            End If
            If (Not (ds.Tables("SpellLikeAbilities")) Is Nothing) Then
                Me.Tables.Add(New SpellLikeAbilitiesDataTable(ds.Tables("SpellLikeAbilities")))
            End If
            If (Not (ds.Tables("SpellLikeAbility")) Is Nothing) Then
                Me.Tables.Add(New SpellLikeAbilityDataTable(ds.Tables("SpellLikeAbility")))
            End If
            If (Not (ds.Tables("AbilitySpell")) Is Nothing) Then
                Me.Tables.Add(New AbilitySpellDataTable(ds.Tables("AbilitySpell")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Character As CharacterDataTable
        Get
            Return Me.tableCharacter
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Subtypes As SubtypesDataTable
        Get
            Return Me.tableSubtypes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Subtype As SubtypeDataTable
        Get
            Return Me.tableSubtype
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Classes As ClassesDataTable
        Get
            Return Me.tableClasses
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Class As _ClassDataTable
        Get
            Return Me.table_Class
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Resistances As ResistancesDataTable
        Get
            Return Me.tableResistances
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Resistance As ResistanceDataTable
        Get
            Return Me.tableResistance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Attacks As AttacksDataTable
        Get
            Return Me.tableAttacks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Attack As AttackDataTable
        Get
            Return Me.tableAttack
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Primary As PrimaryDataTable
        Get
            Return Me.tablePrimary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryExtraDamage As PrimaryExtraDamageDataTable
        Get
            Return Me.tablePrimaryExtraDamage
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryAbility As PrimaryAbilityDataTable
        Get
            Return Me.tablePrimaryAbility
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryModifier As PrimaryModifierDataTable
        Get
            Return Me.tablePrimaryModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryDamageResistance As PrimaryDamageResistanceDataTable
        Get
            Return Me.tablePrimaryDamageResistance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryCondition As PrimaryConditionDataTable
        Get
            Return Me.tablePrimaryCondition
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryConditionalModifier As PrimaryConditionalModifierDataTable
        Get
            Return Me.tablePrimaryConditionalModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryConditionalExtraDamage As PrimaryConditionalExtraDamageDataTable
        Get
            Return Me.tablePrimaryConditionalExtraDamage
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryConditionalAbility As PrimaryConditionalAbilityDataTable
        Get
            Return Me.tablePrimaryConditionalAbility
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PrimaryConditionalDamageResistance As PrimaryConditionalDamageResistanceDataTable
        Get
            Return Me.tablePrimaryConditionalDamageResistance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Secondary As SecondaryDataTable
        Get
            Return Me.tableSecondary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryExtraDamage As SecondaryExtraDamageDataTable
        Get
            Return Me.tableSecondaryExtraDamage
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryAbility As SecondaryAbilityDataTable
        Get
            Return Me.tableSecondaryAbility
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryModifier As SecondaryModifierDataTable
        Get
            Return Me.tableSecondaryModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryDamageResistance As SecondaryDamageResistanceDataTable
        Get
            Return Me.tableSecondaryDamageResistance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryCondition As SecondaryConditionDataTable
        Get
            Return Me.tableSecondaryCondition
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryConditionalModifier As SecondaryConditionalModifierDataTable
        Get
            Return Me.tableSecondaryConditionalModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryConditionalExtraDamage As SecondaryConditionalExtraDamageDataTable
        Get
            Return Me.tableSecondaryConditionalExtraDamage
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryConditionalAbility As SecondaryConditionalAbilityDataTable
        Get
            Return Me.tableSecondaryConditionalAbility
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SecondaryConditionalDamageResistance As SecondaryConditionalDamageResistanceDataTable
        Get
            Return Me.tableSecondaryConditionalDamageResistance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Buckler As BucklerDataTable
        Get
            Return Me.tableBuckler
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BucklerDamageResistance As BucklerDamageResistanceDataTable
        Get
            Return Me.tableBucklerDamageResistance
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BucklerModifier As BucklerModifierDataTable
        Get
            Return Me.tableBucklerModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BucklerAbility As BucklerAbilityDataTable
        Get
            Return Me.tableBucklerAbility
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Skills As SkillsDataTable
        Get
            Return Me.tableSkills
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Skill As SkillDataTable
        Get
            Return Me.tableSkill
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Languages As LanguagesDataTable
        Get
            Return Me.tableLanguages
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Language As LanguageDataTable
        Get
            Return Me.tableLanguage
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CoreModifiers As CoreModifiersDataTable
        Get
            Return Me.tableCoreModifiers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CoreModifier As CoreModifierDataTable
        Get
            Return Me.tableCoreModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AttackModifiers As AttackModifiersDataTable
        Get
            Return Me.tableAttackModifiers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AttackModifier As AttackModifierDataTable
        Get
            Return Me.tableAttackModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DefenseModifiers As DefenseModifiersDataTable
        Get
            Return Me.tableDefenseModifiers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DefenseModifier As DefenseModifierDataTable
        Get
            Return Me.tableDefenseModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SkillModifiers As SkillModifiersDataTable
        Get
            Return Me.tableSkillModifiers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SkillModifier As SkillModifierDataTable
        Get
            Return Me.tableSkillModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MagicModifiers As MagicModifiersDataTable
        Get
            Return Me.tableMagicModifiers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MagicModifier As MagicModifierDataTable
        Get
            Return Me.tableMagicModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Feats As FeatsDataTable
        Get
            Return Me.tableFeats
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Feat As FeatDataTable
        Get
            Return Me.tableFeat
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Features As FeaturesDataTable
        Get
            Return Me.tableFeatures
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Feature As FeatureDataTable
        Get
            Return Me.tableFeature
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inventory As InventoryDataTable
        Get
            Return Me.tableInventory
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property InventoryItem As InventoryItemDataTable
        Get
            Return Me.tableInventoryItem
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Assets As AssetsDataTable
        Get
            Return Me.tableAssets
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetItem As AssetItemDataTable
        Get
            Return Me.tableAssetItem
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpellCasterInfo As SpellCasterInfoDataTable
        Get
            Return Me.tableSpellCasterInfo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CasterClass As CasterClassDataTable
        Get
            Return Me.tableCasterClass
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpellsPerDay As SpellsPerDayDataTable
        Get
            Return Me.tableSpellsPerDay
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClassSPD As ClassSPDDataTable
        Get
            Return Me.tableClassSPD
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpecialistSPD As SpecialistSPDDataTable
        Get
            Return Me.tableSpecialistSPD
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DomainSPD As DomainSPDDataTable
        Get
            Return Me.tableDomainSPD
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpellSaves As SpellSavesDataTable
        Get
            Return Me.tableSpellSaves
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpellsKnown As SpellsKnownDataTable
        Get
            Return Me.tableSpellsKnown
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MemorizedSpells As MemorizedSpellsDataTable
        Get
            Return Me.tableMemorizedSpells
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MemorizedSpell As MemorizedSpellDataTable
        Get
            Return Me.tableMemorizedSpell
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Domains As DomainsDataTable
        Get
            Return Me.tableDomains
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Domain As DomainDataTable
        Get
            Return Me.tableDomain
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpecialistSchools As SpecialistSchoolsDataTable
        Get
            Return Me.tableSpecialistSchools
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpecialistSchool As SpecialistSchoolDataTable
        Get
            Return Me.tableSpecialistSchool
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProhibitedSchools As ProhibitedSchoolsDataTable
        Get
            Return Me.tableProhibitedSchools
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProhibitedSchool As ProhibitedSchoolDataTable
        Get
            Return Me.tableProhibitedSchool
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Spells As SpellsDataTable
        Get
            Return Me.tableSpells
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClassSpells As ClassSpellsDataTable
        Get
            Return Me.tableClassSpells
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Spell As SpellDataTable
        Get
            Return Me.tableSpell
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManifesterInfo As ManifesterInfoDataTable
        Get
            Return Me.tableManifesterInfo
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManifesterClass As ManifesterClassDataTable
        Get
            Return Me.tableManifesterClass
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PowerSaves As PowerSavesDataTable
        Get
            Return Me.tablePowerSaves
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Powers As PowersDataTable
        Get
            Return Me.tablePowers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClassPowers As ClassPowersDataTable
        Get
            Return Me.tableClassPowers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Power As PowerDataTable
        Get
            Return Me.tablePower
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PsionicSpecializations As PsionicSpecializationsDataTable
        Get
            Return Me.tablePsionicSpecializations
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PsionicSpecialization As PsionicSpecializationDataTable
        Get
            Return Me.tablePsionicSpecialization
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PsionicModifiers As PsionicModifiersDataTable
        Get
            Return Me.tablePsionicModifiers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PsionicModifier As PsionicModifierDataTable
        Get
            Return Me.tablePsionicModifier
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ArmorClass As ArmorClassDataTable
        Get
            Return Me.tableArmorClass
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SavingThrows As SavingThrowsDataTable
        Get
            Return Me.tableSavingThrows
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SavingThrow As SavingThrowDataTable
        Get
            Return Me.tableSavingThrow
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AbilityScores As AbilityScoresDataTable
        Get
            Return Me.tableAbilityScores
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AbilityScore As AbilityScoreDataTable
        Get
            Return Me.tableAbilityScore
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PsiLikeAbilities As PsiLikeAbilitiesDataTable
        Get
            Return Me.tablePsiLikeAbilities
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PsiLikeAbility As PsiLikeAbilityDataTable
        Get
            Return Me.tablePsiLikeAbility
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AbilityPower As AbilityPowerDataTable
        Get
            Return Me.tableAbilityPower
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpellLikeAbilities As SpellLikeAbilitiesDataTable
        Get
            Return Me.tableSpellLikeAbilities
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpellLikeAbility As SpellLikeAbilityDataTable
        Get
            Return Me.tableSpellLikeAbility
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AbilitySpell As AbilitySpellDataTable
        Get
            Return Me.tableAbilitySpell
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As CharacterXMLDataset = CType(MyBase.Clone,CharacterXMLDataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Character")) Is Nothing) Then
            Me.Tables.Add(New CharacterDataTable(ds.Tables("Character")))
        End If
        If (Not (ds.Tables("Subtypes")) Is Nothing) Then
            Me.Tables.Add(New SubtypesDataTable(ds.Tables("Subtypes")))
        End If
        If (Not (ds.Tables("Subtype")) Is Nothing) Then
            Me.Tables.Add(New SubtypeDataTable(ds.Tables("Subtype")))
        End If
        If (Not (ds.Tables("Classes")) Is Nothing) Then
            Me.Tables.Add(New ClassesDataTable(ds.Tables("Classes")))
        End If
        If (Not (ds.Tables("Class")) Is Nothing) Then
            Me.Tables.Add(New _ClassDataTable(ds.Tables("Class")))
        End If
        If (Not (ds.Tables("Resistances")) Is Nothing) Then
            Me.Tables.Add(New ResistancesDataTable(ds.Tables("Resistances")))
        End If
        If (Not (ds.Tables("Resistance")) Is Nothing) Then
            Me.Tables.Add(New ResistanceDataTable(ds.Tables("Resistance")))
        End If
        If (Not (ds.Tables("Attacks")) Is Nothing) Then
            Me.Tables.Add(New AttacksDataTable(ds.Tables("Attacks")))
        End If
        If (Not (ds.Tables("Attack")) Is Nothing) Then
            Me.Tables.Add(New AttackDataTable(ds.Tables("Attack")))
        End If
        If (Not (ds.Tables("Primary")) Is Nothing) Then
            Me.Tables.Add(New PrimaryDataTable(ds.Tables("Primary")))
        End If
        If (Not (ds.Tables("PrimaryExtraDamage")) Is Nothing) Then
            Me.Tables.Add(New PrimaryExtraDamageDataTable(ds.Tables("PrimaryExtraDamage")))
        End If
        If (Not (ds.Tables("PrimaryAbility")) Is Nothing) Then
            Me.Tables.Add(New PrimaryAbilityDataTable(ds.Tables("PrimaryAbility")))
        End If
        If (Not (ds.Tables("PrimaryModifier")) Is Nothing) Then
            Me.Tables.Add(New PrimaryModifierDataTable(ds.Tables("PrimaryModifier")))
        End If
        If (Not (ds.Tables("PrimaryDamageResistance")) Is Nothing) Then
            Me.Tables.Add(New PrimaryDamageResistanceDataTable(ds.Tables("PrimaryDamageResistance")))
        End If
        If (Not (ds.Tables("PrimaryCondition")) Is Nothing) Then
            Me.Tables.Add(New PrimaryConditionDataTable(ds.Tables("PrimaryCondition")))
        End If
        If (Not (ds.Tables("PrimaryConditionalModifier")) Is Nothing) Then
            Me.Tables.Add(New PrimaryConditionalModifierDataTable(ds.Tables("PrimaryConditionalModifier")))
        End If
        If (Not (ds.Tables("PrimaryConditionalExtraDamage")) Is Nothing) Then
            Me.Tables.Add(New PrimaryConditionalExtraDamageDataTable(ds.Tables("PrimaryConditionalExtraDamage")))
        End If
        If (Not (ds.Tables("PrimaryConditionalAbility")) Is Nothing) Then
            Me.Tables.Add(New PrimaryConditionalAbilityDataTable(ds.Tables("PrimaryConditionalAbility")))
        End If
        If (Not (ds.Tables("PrimaryConditionalDamageResistance")) Is Nothing) Then
            Me.Tables.Add(New PrimaryConditionalDamageResistanceDataTable(ds.Tables("PrimaryConditionalDamageResistance")))
        End If
        If (Not (ds.Tables("Secondary")) Is Nothing) Then
            Me.Tables.Add(New SecondaryDataTable(ds.Tables("Secondary")))
        End If
        If (Not (ds.Tables("SecondaryExtraDamage")) Is Nothing) Then
            Me.Tables.Add(New SecondaryExtraDamageDataTable(ds.Tables("SecondaryExtraDamage")))
        End If
        If (Not (ds.Tables("SecondaryAbility")) Is Nothing) Then
            Me.Tables.Add(New SecondaryAbilityDataTable(ds.Tables("SecondaryAbility")))
        End If
        If (Not (ds.Tables("SecondaryModifier")) Is Nothing) Then
            Me.Tables.Add(New SecondaryModifierDataTable(ds.Tables("SecondaryModifier")))
        End If
        If (Not (ds.Tables("SecondaryDamageResistance")) Is Nothing) Then
            Me.Tables.Add(New SecondaryDamageResistanceDataTable(ds.Tables("SecondaryDamageResistance")))
        End If
        If (Not (ds.Tables("SecondaryCondition")) Is Nothing) Then
            Me.Tables.Add(New SecondaryConditionDataTable(ds.Tables("SecondaryCondition")))
        End If
        If (Not (ds.Tables("SecondaryConditionalModifier")) Is Nothing) Then
            Me.Tables.Add(New SecondaryConditionalModifierDataTable(ds.Tables("SecondaryConditionalModifier")))
        End If
        If (Not (ds.Tables("SecondaryConditionalExtraDamage")) Is Nothing) Then
            Me.Tables.Add(New SecondaryConditionalExtraDamageDataTable(ds.Tables("SecondaryConditionalExtraDamage")))
        End If
        If (Not (ds.Tables("SecondaryConditionalAbility")) Is Nothing) Then
            Me.Tables.Add(New SecondaryConditionalAbilityDataTable(ds.Tables("SecondaryConditionalAbility")))
        End If
        If (Not (ds.Tables("SecondaryConditionalDamageResistance")) Is Nothing) Then
            Me.Tables.Add(New SecondaryConditionalDamageResistanceDataTable(ds.Tables("SecondaryConditionalDamageResistance")))
        End If
        If (Not (ds.Tables("Buckler")) Is Nothing) Then
            Me.Tables.Add(New BucklerDataTable(ds.Tables("Buckler")))
        End If
        If (Not (ds.Tables("BucklerDamageResistance")) Is Nothing) Then
            Me.Tables.Add(New BucklerDamageResistanceDataTable(ds.Tables("BucklerDamageResistance")))
        End If
        If (Not (ds.Tables("BucklerModifier")) Is Nothing) Then
            Me.Tables.Add(New BucklerModifierDataTable(ds.Tables("BucklerModifier")))
        End If
        If (Not (ds.Tables("BucklerAbility")) Is Nothing) Then
            Me.Tables.Add(New BucklerAbilityDataTable(ds.Tables("BucklerAbility")))
        End If
        If (Not (ds.Tables("Skills")) Is Nothing) Then
            Me.Tables.Add(New SkillsDataTable(ds.Tables("Skills")))
        End If
        If (Not (ds.Tables("Skill")) Is Nothing) Then
            Me.Tables.Add(New SkillDataTable(ds.Tables("Skill")))
        End If
        If (Not (ds.Tables("Languages")) Is Nothing) Then
            Me.Tables.Add(New LanguagesDataTable(ds.Tables("Languages")))
        End If
        If (Not (ds.Tables("Language")) Is Nothing) Then
            Me.Tables.Add(New LanguageDataTable(ds.Tables("Language")))
        End If
        If (Not (ds.Tables("CoreModifiers")) Is Nothing) Then
            Me.Tables.Add(New CoreModifiersDataTable(ds.Tables("CoreModifiers")))
        End If
        If (Not (ds.Tables("CoreModifier")) Is Nothing) Then
            Me.Tables.Add(New CoreModifierDataTable(ds.Tables("CoreModifier")))
        End If
        If (Not (ds.Tables("AttackModifiers")) Is Nothing) Then
            Me.Tables.Add(New AttackModifiersDataTable(ds.Tables("AttackModifiers")))
        End If
        If (Not (ds.Tables("AttackModifier")) Is Nothing) Then
            Me.Tables.Add(New AttackModifierDataTable(ds.Tables("AttackModifier")))
        End If
        If (Not (ds.Tables("DefenseModifiers")) Is Nothing) Then
            Me.Tables.Add(New DefenseModifiersDataTable(ds.Tables("DefenseModifiers")))
        End If
        If (Not (ds.Tables("DefenseModifier")) Is Nothing) Then
            Me.Tables.Add(New DefenseModifierDataTable(ds.Tables("DefenseModifier")))
        End If
        If (Not (ds.Tables("SkillModifiers")) Is Nothing) Then
            Me.Tables.Add(New SkillModifiersDataTable(ds.Tables("SkillModifiers")))
        End If
        If (Not (ds.Tables("SkillModifier")) Is Nothing) Then
            Me.Tables.Add(New SkillModifierDataTable(ds.Tables("SkillModifier")))
        End If
        If (Not (ds.Tables("MagicModifiers")) Is Nothing) Then
            Me.Tables.Add(New MagicModifiersDataTable(ds.Tables("MagicModifiers")))
        End If
        If (Not (ds.Tables("MagicModifier")) Is Nothing) Then
            Me.Tables.Add(New MagicModifierDataTable(ds.Tables("MagicModifier")))
        End If
        If (Not (ds.Tables("Feats")) Is Nothing) Then
            Me.Tables.Add(New FeatsDataTable(ds.Tables("Feats")))
        End If
        If (Not (ds.Tables("Feat")) Is Nothing) Then
            Me.Tables.Add(New FeatDataTable(ds.Tables("Feat")))
        End If
        If (Not (ds.Tables("Features")) Is Nothing) Then
            Me.Tables.Add(New FeaturesDataTable(ds.Tables("Features")))
        End If
        If (Not (ds.Tables("Feature")) Is Nothing) Then
            Me.Tables.Add(New FeatureDataTable(ds.Tables("Feature")))
        End If
        If (Not (ds.Tables("Inventory")) Is Nothing) Then
            Me.Tables.Add(New InventoryDataTable(ds.Tables("Inventory")))
        End If
        If (Not (ds.Tables("InventoryItem")) Is Nothing) Then
            Me.Tables.Add(New InventoryItemDataTable(ds.Tables("InventoryItem")))
        End If
        If (Not (ds.Tables("Assets")) Is Nothing) Then
            Me.Tables.Add(New AssetsDataTable(ds.Tables("Assets")))
        End If
        If (Not (ds.Tables("AssetItem")) Is Nothing) Then
            Me.Tables.Add(New AssetItemDataTable(ds.Tables("AssetItem")))
        End If
        If (Not (ds.Tables("SpellCasterInfo")) Is Nothing) Then
            Me.Tables.Add(New SpellCasterInfoDataTable(ds.Tables("SpellCasterInfo")))
        End If
        If (Not (ds.Tables("CasterClass")) Is Nothing) Then
            Me.Tables.Add(New CasterClassDataTable(ds.Tables("CasterClass")))
        End If
        If (Not (ds.Tables("SpellsPerDay")) Is Nothing) Then
            Me.Tables.Add(New SpellsPerDayDataTable(ds.Tables("SpellsPerDay")))
        End If
        If (Not (ds.Tables("ClassSPD")) Is Nothing) Then
            Me.Tables.Add(New ClassSPDDataTable(ds.Tables("ClassSPD")))
        End If
        If (Not (ds.Tables("SpecialistSPD")) Is Nothing) Then
            Me.Tables.Add(New SpecialistSPDDataTable(ds.Tables("SpecialistSPD")))
        End If
        If (Not (ds.Tables("DomainSPD")) Is Nothing) Then
            Me.Tables.Add(New DomainSPDDataTable(ds.Tables("DomainSPD")))
        End If
        If (Not (ds.Tables("SpellSaves")) Is Nothing) Then
            Me.Tables.Add(New SpellSavesDataTable(ds.Tables("SpellSaves")))
        End If
        If (Not (ds.Tables("SpellsKnown")) Is Nothing) Then
            Me.Tables.Add(New SpellsKnownDataTable(ds.Tables("SpellsKnown")))
        End If
        If (Not (ds.Tables("MemorizedSpells")) Is Nothing) Then
            Me.Tables.Add(New MemorizedSpellsDataTable(ds.Tables("MemorizedSpells")))
        End If
        If (Not (ds.Tables("MemorizedSpell")) Is Nothing) Then
            Me.Tables.Add(New MemorizedSpellDataTable(ds.Tables("MemorizedSpell")))
        End If
        If (Not (ds.Tables("Domains")) Is Nothing) Then
            Me.Tables.Add(New DomainsDataTable(ds.Tables("Domains")))
        End If
        If (Not (ds.Tables("Domain")) Is Nothing) Then
            Me.Tables.Add(New DomainDataTable(ds.Tables("Domain")))
        End If
        If (Not (ds.Tables("SpecialistSchools")) Is Nothing) Then
            Me.Tables.Add(New SpecialistSchoolsDataTable(ds.Tables("SpecialistSchools")))
        End If
        If (Not (ds.Tables("SpecialistSchool")) Is Nothing) Then
            Me.Tables.Add(New SpecialistSchoolDataTable(ds.Tables("SpecialistSchool")))
        End If
        If (Not (ds.Tables("ProhibitedSchools")) Is Nothing) Then
            Me.Tables.Add(New ProhibitedSchoolsDataTable(ds.Tables("ProhibitedSchools")))
        End If
        If (Not (ds.Tables("ProhibitedSchool")) Is Nothing) Then
            Me.Tables.Add(New ProhibitedSchoolDataTable(ds.Tables("ProhibitedSchool")))
        End If
        If (Not (ds.Tables("Spells")) Is Nothing) Then
            Me.Tables.Add(New SpellsDataTable(ds.Tables("Spells")))
        End If
        If (Not (ds.Tables("ClassSpells")) Is Nothing) Then
            Me.Tables.Add(New ClassSpellsDataTable(ds.Tables("ClassSpells")))
        End If
        If (Not (ds.Tables("Spell")) Is Nothing) Then
            Me.Tables.Add(New SpellDataTable(ds.Tables("Spell")))
        End If
        If (Not (ds.Tables("ManifesterInfo")) Is Nothing) Then
            Me.Tables.Add(New ManifesterInfoDataTable(ds.Tables("ManifesterInfo")))
        End If
        If (Not (ds.Tables("ManifesterClass")) Is Nothing) Then
            Me.Tables.Add(New ManifesterClassDataTable(ds.Tables("ManifesterClass")))
        End If
        If (Not (ds.Tables("PowerSaves")) Is Nothing) Then
            Me.Tables.Add(New PowerSavesDataTable(ds.Tables("PowerSaves")))
        End If
        If (Not (ds.Tables("Powers")) Is Nothing) Then
            Me.Tables.Add(New PowersDataTable(ds.Tables("Powers")))
        End If
        If (Not (ds.Tables("ClassPowers")) Is Nothing) Then
            Me.Tables.Add(New ClassPowersDataTable(ds.Tables("ClassPowers")))
        End If
        If (Not (ds.Tables("Power")) Is Nothing) Then
            Me.Tables.Add(New PowerDataTable(ds.Tables("Power")))
        End If
        If (Not (ds.Tables("PsionicSpecializations")) Is Nothing) Then
            Me.Tables.Add(New PsionicSpecializationsDataTable(ds.Tables("PsionicSpecializations")))
        End If
        If (Not (ds.Tables("PsionicSpecialization")) Is Nothing) Then
            Me.Tables.Add(New PsionicSpecializationDataTable(ds.Tables("PsionicSpecialization")))
        End If
        If (Not (ds.Tables("PsionicModifiers")) Is Nothing) Then
            Me.Tables.Add(New PsionicModifiersDataTable(ds.Tables("PsionicModifiers")))
        End If
        If (Not (ds.Tables("PsionicModifier")) Is Nothing) Then
            Me.Tables.Add(New PsionicModifierDataTable(ds.Tables("PsionicModifier")))
        End If
        If (Not (ds.Tables("ArmorClass")) Is Nothing) Then
            Me.Tables.Add(New ArmorClassDataTable(ds.Tables("ArmorClass")))
        End If
        If (Not (ds.Tables("SavingThrows")) Is Nothing) Then
            Me.Tables.Add(New SavingThrowsDataTable(ds.Tables("SavingThrows")))
        End If
        If (Not (ds.Tables("SavingThrow")) Is Nothing) Then
            Me.Tables.Add(New SavingThrowDataTable(ds.Tables("SavingThrow")))
        End If
        If (Not (ds.Tables("AbilityScores")) Is Nothing) Then
            Me.Tables.Add(New AbilityScoresDataTable(ds.Tables("AbilityScores")))
        End If
        If (Not (ds.Tables("AbilityScore")) Is Nothing) Then
            Me.Tables.Add(New AbilityScoreDataTable(ds.Tables("AbilityScore")))
        End If
        If (Not (ds.Tables("PsiLikeAbilities")) Is Nothing) Then
            Me.Tables.Add(New PsiLikeAbilitiesDataTable(ds.Tables("PsiLikeAbilities")))
        End If
        If (Not (ds.Tables("PsiLikeAbility")) Is Nothing) Then
            Me.Tables.Add(New PsiLikeAbilityDataTable(ds.Tables("PsiLikeAbility")))
        End If
        If (Not (ds.Tables("AbilityPower")) Is Nothing) Then
            Me.Tables.Add(New AbilityPowerDataTable(ds.Tables("AbilityPower")))
        End If
        If (Not (ds.Tables("SpellLikeAbilities")) Is Nothing) Then
            Me.Tables.Add(New SpellLikeAbilitiesDataTable(ds.Tables("SpellLikeAbilities")))
        End If
        If (Not (ds.Tables("SpellLikeAbility")) Is Nothing) Then
            Me.Tables.Add(New SpellLikeAbilityDataTable(ds.Tables("SpellLikeAbility")))
        End If
        If (Not (ds.Tables("AbilitySpell")) Is Nothing) Then
            Me.Tables.Add(New AbilitySpellDataTable(ds.Tables("AbilitySpell")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Public Sub InitVars()
        Me.tableCharacter = CType(Me.Tables("Character"),CharacterDataTable)
        If (Not (Me.tableCharacter) Is Nothing) Then
            Me.tableCharacter.InitVars
        End If
        Me.tableSubtypes = CType(Me.Tables("Subtypes"),SubtypesDataTable)
        If (Not (Me.tableSubtypes) Is Nothing) Then
            Me.tableSubtypes.InitVars
        End If
        Me.tableSubtype = CType(Me.Tables("Subtype"),SubtypeDataTable)
        If (Not (Me.tableSubtype) Is Nothing) Then
            Me.tableSubtype.InitVars
        End If
        Me.tableClasses = CType(Me.Tables("Classes"),ClassesDataTable)
        If (Not (Me.tableClasses) Is Nothing) Then
            Me.tableClasses.InitVars
        End If
        Me.table_Class = CType(Me.Tables("Class"),_ClassDataTable)
        If (Not (Me.table_Class) Is Nothing) Then
            Me.table_Class.InitVars
        End If
        Me.tableResistances = CType(Me.Tables("Resistances"),ResistancesDataTable)
        If (Not (Me.tableResistances) Is Nothing) Then
            Me.tableResistances.InitVars
        End If
        Me.tableResistance = CType(Me.Tables("Resistance"),ResistanceDataTable)
        If (Not (Me.tableResistance) Is Nothing) Then
            Me.tableResistance.InitVars
        End If
        Me.tableAttacks = CType(Me.Tables("Attacks"),AttacksDataTable)
        If (Not (Me.tableAttacks) Is Nothing) Then
            Me.tableAttacks.InitVars
        End If
        Me.tableAttack = CType(Me.Tables("Attack"),AttackDataTable)
        If (Not (Me.tableAttack) Is Nothing) Then
            Me.tableAttack.InitVars
        End If
        Me.tablePrimary = CType(Me.Tables("Primary"),PrimaryDataTable)
        If (Not (Me.tablePrimary) Is Nothing) Then
            Me.tablePrimary.InitVars
        End If
        Me.tablePrimaryExtraDamage = CType(Me.Tables("PrimaryExtraDamage"),PrimaryExtraDamageDataTable)
        If (Not (Me.tablePrimaryExtraDamage) Is Nothing) Then
            Me.tablePrimaryExtraDamage.InitVars
        End If
        Me.tablePrimaryAbility = CType(Me.Tables("PrimaryAbility"),PrimaryAbilityDataTable)
        If (Not (Me.tablePrimaryAbility) Is Nothing) Then
            Me.tablePrimaryAbility.InitVars
        End If
        Me.tablePrimaryModifier = CType(Me.Tables("PrimaryModifier"),PrimaryModifierDataTable)
        If (Not (Me.tablePrimaryModifier) Is Nothing) Then
            Me.tablePrimaryModifier.InitVars
        End If
        Me.tablePrimaryDamageResistance = CType(Me.Tables("PrimaryDamageResistance"),PrimaryDamageResistanceDataTable)
        If (Not (Me.tablePrimaryDamageResistance) Is Nothing) Then
            Me.tablePrimaryDamageResistance.InitVars
        End If
        Me.tablePrimaryCondition = CType(Me.Tables("PrimaryCondition"),PrimaryConditionDataTable)
        If (Not (Me.tablePrimaryCondition) Is Nothing) Then
            Me.tablePrimaryCondition.InitVars
        End If
        Me.tablePrimaryConditionalModifier = CType(Me.Tables("PrimaryConditionalModifier"),PrimaryConditionalModifierDataTable)
        If (Not (Me.tablePrimaryConditionalModifier) Is Nothing) Then
            Me.tablePrimaryConditionalModifier.InitVars
        End If
        Me.tablePrimaryConditionalExtraDamage = CType(Me.Tables("PrimaryConditionalExtraDamage"),PrimaryConditionalExtraDamageDataTable)
        If (Not (Me.tablePrimaryConditionalExtraDamage) Is Nothing) Then
            Me.tablePrimaryConditionalExtraDamage.InitVars
        End If
        Me.tablePrimaryConditionalAbility = CType(Me.Tables("PrimaryConditionalAbility"),PrimaryConditionalAbilityDataTable)
        If (Not (Me.tablePrimaryConditionalAbility) Is Nothing) Then
            Me.tablePrimaryConditionalAbility.InitVars
        End If
        Me.tablePrimaryConditionalDamageResistance = CType(Me.Tables("PrimaryConditionalDamageResistance"),PrimaryConditionalDamageResistanceDataTable)
        If (Not (Me.tablePrimaryConditionalDamageResistance) Is Nothing) Then
            Me.tablePrimaryConditionalDamageResistance.InitVars
        End If
        Me.tableSecondary = CType(Me.Tables("Secondary"),SecondaryDataTable)
        If (Not (Me.tableSecondary) Is Nothing) Then
            Me.tableSecondary.InitVars
        End If
        Me.tableSecondaryExtraDamage = CType(Me.Tables("SecondaryExtraDamage"),SecondaryExtraDamageDataTable)
        If (Not (Me.tableSecondaryExtraDamage) Is Nothing) Then
            Me.tableSecondaryExtraDamage.InitVars
        End If
        Me.tableSecondaryAbility = CType(Me.Tables("SecondaryAbility"),SecondaryAbilityDataTable)
        If (Not (Me.tableSecondaryAbility) Is Nothing) Then
            Me.tableSecondaryAbility.InitVars
        End If
        Me.tableSecondaryModifier = CType(Me.Tables("SecondaryModifier"),SecondaryModifierDataTable)
        If (Not (Me.tableSecondaryModifier) Is Nothing) Then
            Me.tableSecondaryModifier.InitVars
        End If
        Me.tableSecondaryDamageResistance = CType(Me.Tables("SecondaryDamageResistance"),SecondaryDamageResistanceDataTable)
        If (Not (Me.tableSecondaryDamageResistance) Is Nothing) Then
            Me.tableSecondaryDamageResistance.InitVars
        End If
        Me.tableSecondaryCondition = CType(Me.Tables("SecondaryCondition"),SecondaryConditionDataTable)
        If (Not (Me.tableSecondaryCondition) Is Nothing) Then
            Me.tableSecondaryCondition.InitVars
        End If
        Me.tableSecondaryConditionalModifier = CType(Me.Tables("SecondaryConditionalModifier"),SecondaryConditionalModifierDataTable)
        If (Not (Me.tableSecondaryConditionalModifier) Is Nothing) Then
            Me.tableSecondaryConditionalModifier.InitVars
        End If
        Me.tableSecondaryConditionalExtraDamage = CType(Me.Tables("SecondaryConditionalExtraDamage"),SecondaryConditionalExtraDamageDataTable)
        If (Not (Me.tableSecondaryConditionalExtraDamage) Is Nothing) Then
            Me.tableSecondaryConditionalExtraDamage.InitVars
        End If
        Me.tableSecondaryConditionalAbility = CType(Me.Tables("SecondaryConditionalAbility"),SecondaryConditionalAbilityDataTable)
        If (Not (Me.tableSecondaryConditionalAbility) Is Nothing) Then
            Me.tableSecondaryConditionalAbility.InitVars
        End If
        Me.tableSecondaryConditionalDamageResistance = CType(Me.Tables("SecondaryConditionalDamageResistance"),SecondaryConditionalDamageResistanceDataTable)
        If (Not (Me.tableSecondaryConditionalDamageResistance) Is Nothing) Then
            Me.tableSecondaryConditionalDamageResistance.InitVars
        End If
        Me.tableBuckler = CType(Me.Tables("Buckler"),BucklerDataTable)
        If (Not (Me.tableBuckler) Is Nothing) Then
            Me.tableBuckler.InitVars
        End If
        Me.tableBucklerDamageResistance = CType(Me.Tables("BucklerDamageResistance"),BucklerDamageResistanceDataTable)
        If (Not (Me.tableBucklerDamageResistance) Is Nothing) Then
            Me.tableBucklerDamageResistance.InitVars
        End If
        Me.tableBucklerModifier = CType(Me.Tables("BucklerModifier"),BucklerModifierDataTable)
        If (Not (Me.tableBucklerModifier) Is Nothing) Then
            Me.tableBucklerModifier.InitVars
        End If
        Me.tableBucklerAbility = CType(Me.Tables("BucklerAbility"),BucklerAbilityDataTable)
        If (Not (Me.tableBucklerAbility) Is Nothing) Then
            Me.tableBucklerAbility.InitVars
        End If
        Me.tableSkills = CType(Me.Tables("Skills"),SkillsDataTable)
        If (Not (Me.tableSkills) Is Nothing) Then
            Me.tableSkills.InitVars
        End If
        Me.tableSkill = CType(Me.Tables("Skill"),SkillDataTable)
        If (Not (Me.tableSkill) Is Nothing) Then
            Me.tableSkill.InitVars
        End If
        Me.tableLanguages = CType(Me.Tables("Languages"),LanguagesDataTable)
        If (Not (Me.tableLanguages) Is Nothing) Then
            Me.tableLanguages.InitVars
        End If
        Me.tableLanguage = CType(Me.Tables("Language"),LanguageDataTable)
        If (Not (Me.tableLanguage) Is Nothing) Then
            Me.tableLanguage.InitVars
        End If
        Me.tableCoreModifiers = CType(Me.Tables("CoreModifiers"),CoreModifiersDataTable)
        If (Not (Me.tableCoreModifiers) Is Nothing) Then
            Me.tableCoreModifiers.InitVars
        End If
        Me.tableCoreModifier = CType(Me.Tables("CoreModifier"),CoreModifierDataTable)
        If (Not (Me.tableCoreModifier) Is Nothing) Then
            Me.tableCoreModifier.InitVars
        End If
        Me.tableAttackModifiers = CType(Me.Tables("AttackModifiers"),AttackModifiersDataTable)
        If (Not (Me.tableAttackModifiers) Is Nothing) Then
            Me.tableAttackModifiers.InitVars
        End If
        Me.tableAttackModifier = CType(Me.Tables("AttackModifier"),AttackModifierDataTable)
        If (Not (Me.tableAttackModifier) Is Nothing) Then
            Me.tableAttackModifier.InitVars
        End If
        Me.tableDefenseModifiers = CType(Me.Tables("DefenseModifiers"),DefenseModifiersDataTable)
        If (Not (Me.tableDefenseModifiers) Is Nothing) Then
            Me.tableDefenseModifiers.InitVars
        End If
        Me.tableDefenseModifier = CType(Me.Tables("DefenseModifier"),DefenseModifierDataTable)
        If (Not (Me.tableDefenseModifier) Is Nothing) Then
            Me.tableDefenseModifier.InitVars
        End If
        Me.tableSkillModifiers = CType(Me.Tables("SkillModifiers"),SkillModifiersDataTable)
        If (Not (Me.tableSkillModifiers) Is Nothing) Then
            Me.tableSkillModifiers.InitVars
        End If
        Me.tableSkillModifier = CType(Me.Tables("SkillModifier"),SkillModifierDataTable)
        If (Not (Me.tableSkillModifier) Is Nothing) Then
            Me.tableSkillModifier.InitVars
        End If
        Me.tableMagicModifiers = CType(Me.Tables("MagicModifiers"),MagicModifiersDataTable)
        If (Not (Me.tableMagicModifiers) Is Nothing) Then
            Me.tableMagicModifiers.InitVars
        End If
        Me.tableMagicModifier = CType(Me.Tables("MagicModifier"),MagicModifierDataTable)
        If (Not (Me.tableMagicModifier) Is Nothing) Then
            Me.tableMagicModifier.InitVars
        End If
        Me.tableFeats = CType(Me.Tables("Feats"),FeatsDataTable)
        If (Not (Me.tableFeats) Is Nothing) Then
            Me.tableFeats.InitVars
        End If
        Me.tableFeat = CType(Me.Tables("Feat"),FeatDataTable)
        If (Not (Me.tableFeat) Is Nothing) Then
            Me.tableFeat.InitVars
        End If
        Me.tableFeatures = CType(Me.Tables("Features"),FeaturesDataTable)
        If (Not (Me.tableFeatures) Is Nothing) Then
            Me.tableFeatures.InitVars
        End If
        Me.tableFeature = CType(Me.Tables("Feature"),FeatureDataTable)
        If (Not (Me.tableFeature) Is Nothing) Then
            Me.tableFeature.InitVars
        End If
        Me.tableInventory = CType(Me.Tables("Inventory"),InventoryDataTable)
        If (Not (Me.tableInventory) Is Nothing) Then
            Me.tableInventory.InitVars
        End If
        Me.tableInventoryItem = CType(Me.Tables("InventoryItem"),InventoryItemDataTable)
        If (Not (Me.tableInventoryItem) Is Nothing) Then
            Me.tableInventoryItem.InitVars
        End If
        Me.tableAssets = CType(Me.Tables("Assets"),AssetsDataTable)
        If (Not (Me.tableAssets) Is Nothing) Then
            Me.tableAssets.InitVars
        End If
        Me.tableAssetItem = CType(Me.Tables("AssetItem"),AssetItemDataTable)
        If (Not (Me.tableAssetItem) Is Nothing) Then
            Me.tableAssetItem.InitVars
        End If
        Me.tableSpellCasterInfo = CType(Me.Tables("SpellCasterInfo"),SpellCasterInfoDataTable)
        If (Not (Me.tableSpellCasterInfo) Is Nothing) Then
            Me.tableSpellCasterInfo.InitVars
        End If
        Me.tableCasterClass = CType(Me.Tables("CasterClass"),CasterClassDataTable)
        If (Not (Me.tableCasterClass) Is Nothing) Then
            Me.tableCasterClass.InitVars
        End If
        Me.tableSpellsPerDay = CType(Me.Tables("SpellsPerDay"),SpellsPerDayDataTable)
        If (Not (Me.tableSpellsPerDay) Is Nothing) Then
            Me.tableSpellsPerDay.InitVars
        End If
        Me.tableClassSPD = CType(Me.Tables("ClassSPD"),ClassSPDDataTable)
        If (Not (Me.tableClassSPD) Is Nothing) Then
            Me.tableClassSPD.InitVars
        End If
        Me.tableSpecialistSPD = CType(Me.Tables("SpecialistSPD"),SpecialistSPDDataTable)
        If (Not (Me.tableSpecialistSPD) Is Nothing) Then
            Me.tableSpecialistSPD.InitVars
        End If
        Me.tableDomainSPD = CType(Me.Tables("DomainSPD"),DomainSPDDataTable)
        If (Not (Me.tableDomainSPD) Is Nothing) Then
            Me.tableDomainSPD.InitVars
        End If
        Me.tableSpellSaves = CType(Me.Tables("SpellSaves"),SpellSavesDataTable)
        If (Not (Me.tableSpellSaves) Is Nothing) Then
            Me.tableSpellSaves.InitVars
        End If
        Me.tableSpellsKnown = CType(Me.Tables("SpellsKnown"),SpellsKnownDataTable)
        If (Not (Me.tableSpellsKnown) Is Nothing) Then
            Me.tableSpellsKnown.InitVars
        End If
        Me.tableMemorizedSpells = CType(Me.Tables("MemorizedSpells"),MemorizedSpellsDataTable)
        If (Not (Me.tableMemorizedSpells) Is Nothing) Then
            Me.tableMemorizedSpells.InitVars
        End If
        Me.tableMemorizedSpell = CType(Me.Tables("MemorizedSpell"),MemorizedSpellDataTable)
        If (Not (Me.tableMemorizedSpell) Is Nothing) Then
            Me.tableMemorizedSpell.InitVars
        End If
        Me.tableDomains = CType(Me.Tables("Domains"),DomainsDataTable)
        If (Not (Me.tableDomains) Is Nothing) Then
            Me.tableDomains.InitVars
        End If
        Me.tableDomain = CType(Me.Tables("Domain"),DomainDataTable)
        If (Not (Me.tableDomain) Is Nothing) Then
            Me.tableDomain.InitVars
        End If
        Me.tableSpecialistSchools = CType(Me.Tables("SpecialistSchools"),SpecialistSchoolsDataTable)
        If (Not (Me.tableSpecialistSchools) Is Nothing) Then
            Me.tableSpecialistSchools.InitVars
        End If
        Me.tableSpecialistSchool = CType(Me.Tables("SpecialistSchool"),SpecialistSchoolDataTable)
        If (Not (Me.tableSpecialistSchool) Is Nothing) Then
            Me.tableSpecialistSchool.InitVars
        End If
        Me.tableProhibitedSchools = CType(Me.Tables("ProhibitedSchools"),ProhibitedSchoolsDataTable)
        If (Not (Me.tableProhibitedSchools) Is Nothing) Then
            Me.tableProhibitedSchools.InitVars
        End If
        Me.tableProhibitedSchool = CType(Me.Tables("ProhibitedSchool"),ProhibitedSchoolDataTable)
        If (Not (Me.tableProhibitedSchool) Is Nothing) Then
            Me.tableProhibitedSchool.InitVars
        End If
        Me.tableSpells = CType(Me.Tables("Spells"),SpellsDataTable)
        If (Not (Me.tableSpells) Is Nothing) Then
            Me.tableSpells.InitVars
        End If
        Me.tableClassSpells = CType(Me.Tables("ClassSpells"),ClassSpellsDataTable)
        If (Not (Me.tableClassSpells) Is Nothing) Then
            Me.tableClassSpells.InitVars
        End If
        Me.tableSpell = CType(Me.Tables("Spell"),SpellDataTable)
        If (Not (Me.tableSpell) Is Nothing) Then
            Me.tableSpell.InitVars
        End If
        Me.tableManifesterInfo = CType(Me.Tables("ManifesterInfo"),ManifesterInfoDataTable)
        If (Not (Me.tableManifesterInfo) Is Nothing) Then
            Me.tableManifesterInfo.InitVars
        End If
        Me.tableManifesterClass = CType(Me.Tables("ManifesterClass"),ManifesterClassDataTable)
        If (Not (Me.tableManifesterClass) Is Nothing) Then
            Me.tableManifesterClass.InitVars
        End If
        Me.tablePowerSaves = CType(Me.Tables("PowerSaves"),PowerSavesDataTable)
        If (Not (Me.tablePowerSaves) Is Nothing) Then
            Me.tablePowerSaves.InitVars
        End If
        Me.tablePowers = CType(Me.Tables("Powers"),PowersDataTable)
        If (Not (Me.tablePowers) Is Nothing) Then
            Me.tablePowers.InitVars
        End If
        Me.tableClassPowers = CType(Me.Tables("ClassPowers"),ClassPowersDataTable)
        If (Not (Me.tableClassPowers) Is Nothing) Then
            Me.tableClassPowers.InitVars
        End If
        Me.tablePower = CType(Me.Tables("Power"),PowerDataTable)
        If (Not (Me.tablePower) Is Nothing) Then
            Me.tablePower.InitVars
        End If
        Me.tablePsionicSpecializations = CType(Me.Tables("PsionicSpecializations"),PsionicSpecializationsDataTable)
        If (Not (Me.tablePsionicSpecializations) Is Nothing) Then
            Me.tablePsionicSpecializations.InitVars
        End If
        Me.tablePsionicSpecialization = CType(Me.Tables("PsionicSpecialization"),PsionicSpecializationDataTable)
        If (Not (Me.tablePsionicSpecialization) Is Nothing) Then
            Me.tablePsionicSpecialization.InitVars
        End If
        Me.tablePsionicModifiers = CType(Me.Tables("PsionicModifiers"),PsionicModifiersDataTable)
        If (Not (Me.tablePsionicModifiers) Is Nothing) Then
            Me.tablePsionicModifiers.InitVars
        End If
        Me.tablePsionicModifier = CType(Me.Tables("PsionicModifier"),PsionicModifierDataTable)
        If (Not (Me.tablePsionicModifier) Is Nothing) Then
            Me.tablePsionicModifier.InitVars
        End If
        Me.tableArmorClass = CType(Me.Tables("ArmorClass"),ArmorClassDataTable)
        If (Not (Me.tableArmorClass) Is Nothing) Then
            Me.tableArmorClass.InitVars
        End If
        Me.tableSavingThrows = CType(Me.Tables("SavingThrows"),SavingThrowsDataTable)
        If (Not (Me.tableSavingThrows) Is Nothing) Then
            Me.tableSavingThrows.InitVars
        End If
        Me.tableSavingThrow = CType(Me.Tables("SavingThrow"),SavingThrowDataTable)
        If (Not (Me.tableSavingThrow) Is Nothing) Then
            Me.tableSavingThrow.InitVars
        End If
        Me.tableAbilityScores = CType(Me.Tables("AbilityScores"),AbilityScoresDataTable)
        If (Not (Me.tableAbilityScores) Is Nothing) Then
            Me.tableAbilityScores.InitVars
        End If
        Me.tableAbilityScore = CType(Me.Tables("AbilityScore"),AbilityScoreDataTable)
        If (Not (Me.tableAbilityScore) Is Nothing) Then
            Me.tableAbilityScore.InitVars
        End If
        Me.tablePsiLikeAbilities = CType(Me.Tables("PsiLikeAbilities"),PsiLikeAbilitiesDataTable)
        If (Not (Me.tablePsiLikeAbilities) Is Nothing) Then
            Me.tablePsiLikeAbilities.InitVars
        End If
        Me.tablePsiLikeAbility = CType(Me.Tables("PsiLikeAbility"),PsiLikeAbilityDataTable)
        If (Not (Me.tablePsiLikeAbility) Is Nothing) Then
            Me.tablePsiLikeAbility.InitVars
        End If
        Me.tableAbilityPower = CType(Me.Tables("AbilityPower"),AbilityPowerDataTable)
        If (Not (Me.tableAbilityPower) Is Nothing) Then
            Me.tableAbilityPower.InitVars
        End If
        Me.tableSpellLikeAbilities = CType(Me.Tables("SpellLikeAbilities"),SpellLikeAbilitiesDataTable)
        If (Not (Me.tableSpellLikeAbilities) Is Nothing) Then
            Me.tableSpellLikeAbilities.InitVars
        End If
        Me.tableSpellLikeAbility = CType(Me.Tables("SpellLikeAbility"),SpellLikeAbilityDataTable)
        If (Not (Me.tableSpellLikeAbility) Is Nothing) Then
            Me.tableSpellLikeAbility.InitVars
        End If
        Me.tableAbilitySpell = CType(Me.Tables("AbilitySpell"),AbilitySpellDataTable)
        If (Not (Me.tableAbilitySpell) Is Nothing) Then
            Me.tableAbilitySpell.InitVars
        End If
        Me.relationSubtypes_Subtype = Me.Relations("Subtypes_Subtype")
        Me.relationClasses_Class = Me.Relations("Classes_Class")
        Me.relationResistances_Resistance = Me.Relations("Resistances_Resistance")
        Me.relationPrimaryCondition_PrimaryConditionalModifier = Me.Relations("PrimaryCondition_PrimaryConditionalModifier")
        Me.relationPrimaryCondition_PrimaryConditionalExtraDamage = Me.Relations("PrimaryCondition_PrimaryConditionalExtraDamage")
        Me.relationPrimaryCondition_PrimaryConditionalAbility = Me.Relations("PrimaryCondition_PrimaryConditionalAbility")
        Me.relationPrimaryCondition_PrimaryConditionalDamageResistance = Me.Relations("PrimaryCondition_PrimaryConditionalDamageResistance")
        Me.relationPrimary_PrimaryExtraDamage = Me.Relations("Primary_PrimaryExtraDamage")
        Me.relationPrimary_PrimaryAbility = Me.Relations("Primary_PrimaryAbility")
        Me.relationPrimary_PrimaryModifier = Me.Relations("Primary_PrimaryModifier")
        Me.relationPrimary_PrimaryDamageResistance = Me.Relations("Primary_PrimaryDamageResistance")
        Me.relationPrimary_PrimaryCondition = Me.Relations("Primary_PrimaryCondition")
        Me.relationSecondaryCondition_SecondaryConditionalModifier = Me.Relations("SecondaryCondition_SecondaryConditionalModifier")
        Me.relationSecondaryCondition_SecondaryConditionalExtraDamage = Me.Relations("SecondaryCondition_SecondaryConditionalExtraDamage")
        Me.relationSecondaryCondition_SecondaryConditionalAbility = Me.Relations("SecondaryCondition_SecondaryConditionalAbility")
        Me.relationSecondaryCondition_SecondaryConditionalDamageResistance = Me.Relations("SecondaryCondition_SecondaryConditionalDamageResistance")
        Me.relationSecondary_SecondaryExtraDamage = Me.Relations("Secondary_SecondaryExtraDamage")
        Me.relationSecondary_SecondaryAbility = Me.Relations("Secondary_SecondaryAbility")
        Me.relationSecondary_SecondaryModifier = Me.Relations("Secondary_SecondaryModifier")
        Me.relationSecondary_SecondaryDamageResistance = Me.Relations("Secondary_SecondaryDamageResistance")
        Me.relationSecondary_SecondaryCondition = Me.Relations("Secondary_SecondaryCondition")
        Me.relationBuckler_BucklerDamageResistance = Me.Relations("Buckler_BucklerDamageResistance")
        Me.relationBuckler_BucklerModifier = Me.Relations("Buckler_BucklerModifier")
        Me.relationBuckler_BucklerAbility = Me.Relations("Buckler_BucklerAbility")
        Me.relationAttack_Primary = Me.Relations("Attack_Primary")
        Me.relationAttack_Secondary = Me.Relations("Attack_Secondary")
        Me.relationAttack_Buckler = Me.Relations("Attack_Buckler")
        Me.relationAttacks_Attack = Me.Relations("Attacks_Attack")
        Me.relationSkills_Skill = Me.Relations("Skills_Skill")
        Me.relationLanguages_Language = Me.Relations("Languages_Language")
        Me.relationCoreModifiers_CoreModifier = Me.Relations("CoreModifiers_CoreModifier")
        Me.relationAttackModifiers_AttackModifier = Me.Relations("AttackModifiers_AttackModifier")
        Me.relationDefenseModifiers_DefenseModifier = Me.Relations("DefenseModifiers_DefenseModifier")
        Me.relationSkillModifiers_SkillModifier = Me.Relations("SkillModifiers_SkillModifier")
        Me.relationMagicModifiers_MagicModifier = Me.Relations("MagicModifiers_MagicModifier")
        Me.relationFeats_Feat = Me.Relations("Feats_Feat")
        Me.relationFeatures_Feature = Me.Relations("Features_Feature")
        Me.relationInventory_InventoryItem = Me.Relations("Inventory_InventoryItem")
        Me.relationAssets_AssetItem = Me.Relations("Assets_AssetItem")
        Me.relationSpellsPerDay_ClassSPD = Me.Relations("SpellsPerDay_ClassSPD")
        Me.relationSpellsPerDay_SpecialistSPD = Me.Relations("SpellsPerDay_SpecialistSPD")
        Me.relationSpellsPerDay_DomainSPD = Me.Relations("SpellsPerDay_DomainSPD")
        Me.relationMemorizedSpells_MemorizedSpell = Me.Relations("MemorizedSpells_MemorizedSpell")
        Me.relationCasterClass_SpellsPerDay = Me.Relations("CasterClass_SpellsPerDay")
        Me.relationCasterClass_SpellSaves = Me.Relations("CasterClass_SpellSaves")
        Me.relationCasterClass_SpellsKnown = Me.Relations("CasterClass_SpellsKnown")
        Me.relationCasterClass_MemorizedSpells = Me.Relations("CasterClass_MemorizedSpells")
        Me.relationSpellCasterInfo_CasterClass = Me.Relations("SpellCasterInfo_CasterClass")
        Me.relationDomains_Domain = Me.Relations("Domains_Domain")
        Me.relationSpecialistSchools_SpecialistSchool = Me.Relations("SpecialistSchools_SpecialistSchool")
        Me.relationProhibitedSchools_ProhibitedSchool = Me.Relations("ProhibitedSchools_ProhibitedSchool")
        Me.relationClassSpells_Spell = Me.Relations("ClassSpells_Spell")
        Me.relationSpells_ClassSpells = Me.Relations("Spells_ClassSpells")
        Me.relationManifesterClass_PowerSaves = Me.Relations("ManifesterClass_PowerSaves")
        Me.relationManifesterInfo_ManifesterClass = Me.Relations("ManifesterInfo_ManifesterClass")
        Me.relationClassPowers_Power = Me.Relations("ClassPowers_Power")
        Me.relationPowers_ClassPowers = Me.Relations("Powers_ClassPowers")
        Me.relationPsionicSpecializations_PsionicSpecialization = Me.Relations("PsionicSpecializations_PsionicSpecialization")
        Me.relationPsionicModifiers_PsionicModifier = Me.Relations("PsionicModifiers_PsionicModifier")
        Me.relationSavingThrows_SavingThrow = Me.Relations("SavingThrows_SavingThrow")
        Me.relationAbilityScores_AbilityScore = Me.Relations("AbilityScores_AbilityScore")
        Me.relationPsiLikeAbility_AbilityPower = Me.Relations("PsiLikeAbility_AbilityPower")
        Me.relationPsiLikeAbilities_PsiLikeAbility = Me.Relations("PsiLikeAbilities_PsiLikeAbility")
        Me.relationSpellLikeAbility_AbilitySpell = Me.Relations("SpellLikeAbility_AbilitySpell")
        Me.relationSpellLikeAbilities_SpellLikeAbility = Me.Relations("SpellLikeAbilities_SpellLikeAbility")
        Me.relationCharacter_Subtypes = Me.Relations("Character_Subtypes")
        Me.relationCharacter_Classes = Me.Relations("Character_Classes")
        Me.relationCharacter_Resistances = Me.Relations("Character_Resistances")
        Me.relationCharacter_Attacks = Me.Relations("Character_Attacks")
        Me.relationCharacter_Skills = Me.Relations("Character_Skills")
        Me.relationCharacter_Languages = Me.Relations("Character_Languages")
        Me.relationCharacter_CoreModifiers = Me.Relations("Character_CoreModifiers")
        Me.relationCharacter_AttackModifiers = Me.Relations("Character_AttackModifiers")
        Me.relationCharacter_DefenseModifiers = Me.Relations("Character_DefenseModifiers")
        Me.relationCharacter_SkillModifiers = Me.Relations("Character_SkillModifiers")
        Me.relationCharacter_MagicModifiers = Me.Relations("Character_MagicModifiers")
        Me.relationCharacter_Feats = Me.Relations("Character_Feats")
        Me.relationCharacter_Features = Me.Relations("Character_Features")
        Me.relationCharacter_Inventory = Me.Relations("Character_Inventory")
        Me.relationCharacter_Assets = Me.Relations("Character_Assets")
        Me.relationCharacter_SpellCasterInfo = Me.Relations("Character_SpellCasterInfo")
        Me.relationCharacter_Domains = Me.Relations("Character_Domains")
        Me.relationCharacter_SpecialistSchools = Me.Relations("Character_SpecialistSchools")
        Me.relationCharacter_ProhibitedSchools = Me.Relations("Character_ProhibitedSchools")
        Me.relationCharacter_Spells = Me.Relations("Character_Spells")
        Me.relationCharacter_ManifesterInfo = Me.Relations("Character_ManifesterInfo")
        Me.relationCharacter_Powers = Me.Relations("Character_Powers")
        Me.relationCharacter_PsionicSpecializations = Me.Relations("Character_PsionicSpecializations")
        Me.relationCharacter_PsionicModifiers = Me.Relations("Character_PsionicModifiers")
        Me.relationCharacter_ArmorClass = Me.Relations("Character_ArmorClass")
        Me.relationCharacter_SavingThrows = Me.Relations("Character_SavingThrows")
        Me.relationCharacter_AbilityScores = Me.Relations("Character_AbilityScores")
        Me.relationCharacter_PsiLikeAbilities = Me.Relations("Character_PsiLikeAbilities")
        Me.relationCharacter_SpellLikeAbilities = Me.Relations("Character_SpellLikeAbilities")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "CharacterXMLDataset"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCharacter = New CharacterDataTable
        Me.Tables.Add(Me.tableCharacter)
        Me.tableSubtypes = New SubtypesDataTable
        Me.Tables.Add(Me.tableSubtypes)
        Me.tableSubtype = New SubtypeDataTable
        Me.Tables.Add(Me.tableSubtype)
        Me.tableClasses = New ClassesDataTable
        Me.Tables.Add(Me.tableClasses)
        Me.table_Class = New _ClassDataTable
        Me.Tables.Add(Me.table_Class)
        Me.tableResistances = New ResistancesDataTable
        Me.Tables.Add(Me.tableResistances)
        Me.tableResistance = New ResistanceDataTable
        Me.Tables.Add(Me.tableResistance)
        Me.tableAttacks = New AttacksDataTable
        Me.Tables.Add(Me.tableAttacks)
        Me.tableAttack = New AttackDataTable
        Me.Tables.Add(Me.tableAttack)
        Me.tablePrimary = New PrimaryDataTable
        Me.Tables.Add(Me.tablePrimary)
        Me.tablePrimaryExtraDamage = New PrimaryExtraDamageDataTable
        Me.Tables.Add(Me.tablePrimaryExtraDamage)
        Me.tablePrimaryAbility = New PrimaryAbilityDataTable
        Me.Tables.Add(Me.tablePrimaryAbility)
        Me.tablePrimaryModifier = New PrimaryModifierDataTable
        Me.Tables.Add(Me.tablePrimaryModifier)
        Me.tablePrimaryDamageResistance = New PrimaryDamageResistanceDataTable
        Me.Tables.Add(Me.tablePrimaryDamageResistance)
        Me.tablePrimaryCondition = New PrimaryConditionDataTable
        Me.Tables.Add(Me.tablePrimaryCondition)
        Me.tablePrimaryConditionalModifier = New PrimaryConditionalModifierDataTable
        Me.Tables.Add(Me.tablePrimaryConditionalModifier)
        Me.tablePrimaryConditionalExtraDamage = New PrimaryConditionalExtraDamageDataTable
        Me.Tables.Add(Me.tablePrimaryConditionalExtraDamage)
        Me.tablePrimaryConditionalAbility = New PrimaryConditionalAbilityDataTable
        Me.Tables.Add(Me.tablePrimaryConditionalAbility)
        Me.tablePrimaryConditionalDamageResistance = New PrimaryConditionalDamageResistanceDataTable
        Me.Tables.Add(Me.tablePrimaryConditionalDamageResistance)
        Me.tableSecondary = New SecondaryDataTable
        Me.Tables.Add(Me.tableSecondary)
        Me.tableSecondaryExtraDamage = New SecondaryExtraDamageDataTable
        Me.Tables.Add(Me.tableSecondaryExtraDamage)
        Me.tableSecondaryAbility = New SecondaryAbilityDataTable
        Me.Tables.Add(Me.tableSecondaryAbility)
        Me.tableSecondaryModifier = New SecondaryModifierDataTable
        Me.Tables.Add(Me.tableSecondaryModifier)
        Me.tableSecondaryDamageResistance = New SecondaryDamageResistanceDataTable
        Me.Tables.Add(Me.tableSecondaryDamageResistance)
        Me.tableSecondaryCondition = New SecondaryConditionDataTable
        Me.Tables.Add(Me.tableSecondaryCondition)
        Me.tableSecondaryConditionalModifier = New SecondaryConditionalModifierDataTable
        Me.Tables.Add(Me.tableSecondaryConditionalModifier)
        Me.tableSecondaryConditionalExtraDamage = New SecondaryConditionalExtraDamageDataTable
        Me.Tables.Add(Me.tableSecondaryConditionalExtraDamage)
        Me.tableSecondaryConditionalAbility = New SecondaryConditionalAbilityDataTable
        Me.Tables.Add(Me.tableSecondaryConditionalAbility)
        Me.tableSecondaryConditionalDamageResistance = New SecondaryConditionalDamageResistanceDataTable
        Me.Tables.Add(Me.tableSecondaryConditionalDamageResistance)
        Me.tableBuckler = New BucklerDataTable
        Me.Tables.Add(Me.tableBuckler)
        Me.tableBucklerDamageResistance = New BucklerDamageResistanceDataTable
        Me.Tables.Add(Me.tableBucklerDamageResistance)
        Me.tableBucklerModifier = New BucklerModifierDataTable
        Me.Tables.Add(Me.tableBucklerModifier)
        Me.tableBucklerAbility = New BucklerAbilityDataTable
        Me.Tables.Add(Me.tableBucklerAbility)
        Me.tableSkills = New SkillsDataTable
        Me.Tables.Add(Me.tableSkills)
        Me.tableSkill = New SkillDataTable
        Me.Tables.Add(Me.tableSkill)
        Me.tableLanguages = New LanguagesDataTable
        Me.Tables.Add(Me.tableLanguages)
        Me.tableLanguage = New LanguageDataTable
        Me.Tables.Add(Me.tableLanguage)
        Me.tableCoreModifiers = New CoreModifiersDataTable
        Me.Tables.Add(Me.tableCoreModifiers)
        Me.tableCoreModifier = New CoreModifierDataTable
        Me.Tables.Add(Me.tableCoreModifier)
        Me.tableAttackModifiers = New AttackModifiersDataTable
        Me.Tables.Add(Me.tableAttackModifiers)
        Me.tableAttackModifier = New AttackModifierDataTable
        Me.Tables.Add(Me.tableAttackModifier)
        Me.tableDefenseModifiers = New DefenseModifiersDataTable
        Me.Tables.Add(Me.tableDefenseModifiers)
        Me.tableDefenseModifier = New DefenseModifierDataTable
        Me.Tables.Add(Me.tableDefenseModifier)
        Me.tableSkillModifiers = New SkillModifiersDataTable
        Me.Tables.Add(Me.tableSkillModifiers)
        Me.tableSkillModifier = New SkillModifierDataTable
        Me.Tables.Add(Me.tableSkillModifier)
        Me.tableMagicModifiers = New MagicModifiersDataTable
        Me.Tables.Add(Me.tableMagicModifiers)
        Me.tableMagicModifier = New MagicModifierDataTable
        Me.Tables.Add(Me.tableMagicModifier)
        Me.tableFeats = New FeatsDataTable
        Me.Tables.Add(Me.tableFeats)
        Me.tableFeat = New FeatDataTable
        Me.Tables.Add(Me.tableFeat)
        Me.tableFeatures = New FeaturesDataTable
        Me.Tables.Add(Me.tableFeatures)
        Me.tableFeature = New FeatureDataTable
        Me.Tables.Add(Me.tableFeature)
        Me.tableInventory = New InventoryDataTable
        Me.Tables.Add(Me.tableInventory)
        Me.tableInventoryItem = New InventoryItemDataTable
        Me.Tables.Add(Me.tableInventoryItem)
        Me.tableAssets = New AssetsDataTable
        Me.Tables.Add(Me.tableAssets)
        Me.tableAssetItem = New AssetItemDataTable
        Me.Tables.Add(Me.tableAssetItem)
        Me.tableSpellCasterInfo = New SpellCasterInfoDataTable
        Me.Tables.Add(Me.tableSpellCasterInfo)
        Me.tableCasterClass = New CasterClassDataTable
        Me.Tables.Add(Me.tableCasterClass)
        Me.tableSpellsPerDay = New SpellsPerDayDataTable
        Me.Tables.Add(Me.tableSpellsPerDay)
        Me.tableClassSPD = New ClassSPDDataTable
        Me.Tables.Add(Me.tableClassSPD)
        Me.tableSpecialistSPD = New SpecialistSPDDataTable
        Me.Tables.Add(Me.tableSpecialistSPD)
        Me.tableDomainSPD = New DomainSPDDataTable
        Me.Tables.Add(Me.tableDomainSPD)
        Me.tableSpellSaves = New SpellSavesDataTable
        Me.Tables.Add(Me.tableSpellSaves)
        Me.tableSpellsKnown = New SpellsKnownDataTable
        Me.Tables.Add(Me.tableSpellsKnown)
        Me.tableMemorizedSpells = New MemorizedSpellsDataTable
        Me.Tables.Add(Me.tableMemorizedSpells)
        Me.tableMemorizedSpell = New MemorizedSpellDataTable
        Me.Tables.Add(Me.tableMemorizedSpell)
        Me.tableDomains = New DomainsDataTable
        Me.Tables.Add(Me.tableDomains)
        Me.tableDomain = New DomainDataTable
        Me.Tables.Add(Me.tableDomain)
        Me.tableSpecialistSchools = New SpecialistSchoolsDataTable
        Me.Tables.Add(Me.tableSpecialistSchools)
        Me.tableSpecialistSchool = New SpecialistSchoolDataTable
        Me.Tables.Add(Me.tableSpecialistSchool)
        Me.tableProhibitedSchools = New ProhibitedSchoolsDataTable
        Me.Tables.Add(Me.tableProhibitedSchools)
        Me.tableProhibitedSchool = New ProhibitedSchoolDataTable
        Me.Tables.Add(Me.tableProhibitedSchool)
        Me.tableSpells = New SpellsDataTable
        Me.Tables.Add(Me.tableSpells)
        Me.tableClassSpells = New ClassSpellsDataTable
        Me.Tables.Add(Me.tableClassSpells)
        Me.tableSpell = New SpellDataTable
        Me.Tables.Add(Me.tableSpell)
        Me.tableManifesterInfo = New ManifesterInfoDataTable
        Me.Tables.Add(Me.tableManifesterInfo)
        Me.tableManifesterClass = New ManifesterClassDataTable
        Me.Tables.Add(Me.tableManifesterClass)
        Me.tablePowerSaves = New PowerSavesDataTable
        Me.Tables.Add(Me.tablePowerSaves)
        Me.tablePowers = New PowersDataTable
        Me.Tables.Add(Me.tablePowers)
        Me.tableClassPowers = New ClassPowersDataTable
        Me.Tables.Add(Me.tableClassPowers)
        Me.tablePower = New PowerDataTable
        Me.Tables.Add(Me.tablePower)
        Me.tablePsionicSpecializations = New PsionicSpecializationsDataTable
        Me.Tables.Add(Me.tablePsionicSpecializations)
        Me.tablePsionicSpecialization = New PsionicSpecializationDataTable
        Me.Tables.Add(Me.tablePsionicSpecialization)
        Me.tablePsionicModifiers = New PsionicModifiersDataTable
        Me.Tables.Add(Me.tablePsionicModifiers)
        Me.tablePsionicModifier = New PsionicModifierDataTable
        Me.Tables.Add(Me.tablePsionicModifier)
        Me.tableArmorClass = New ArmorClassDataTable
        Me.Tables.Add(Me.tableArmorClass)
        Me.tableSavingThrows = New SavingThrowsDataTable
        Me.Tables.Add(Me.tableSavingThrows)
        Me.tableSavingThrow = New SavingThrowDataTable
        Me.Tables.Add(Me.tableSavingThrow)
        Me.tableAbilityScores = New AbilityScoresDataTable
        Me.Tables.Add(Me.tableAbilityScores)
        Me.tableAbilityScore = New AbilityScoreDataTable
        Me.Tables.Add(Me.tableAbilityScore)
        Me.tablePsiLikeAbilities = New PsiLikeAbilitiesDataTable
        Me.Tables.Add(Me.tablePsiLikeAbilities)
        Me.tablePsiLikeAbility = New PsiLikeAbilityDataTable
        Me.Tables.Add(Me.tablePsiLikeAbility)
        Me.tableAbilityPower = New AbilityPowerDataTable
        Me.Tables.Add(Me.tableAbilityPower)
        Me.tableSpellLikeAbilities = New SpellLikeAbilitiesDataTable
        Me.Tables.Add(Me.tableSpellLikeAbilities)
        Me.tableSpellLikeAbility = New SpellLikeAbilityDataTable
        Me.Tables.Add(Me.tableSpellLikeAbility)
        Me.tableAbilitySpell = New AbilitySpellDataTable
        Me.Tables.Add(Me.tableAbilitySpell)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Character_Subtypes", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSubtypes.Character_IdColumn})
        Me.tableSubtypes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Subtypes_Subtype", New DataColumn() {Me.tableSubtypes.Subtypes_IdColumn}, New DataColumn() {Me.tableSubtype.Subtypes_IdColumn})
        Me.tableSubtype.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Classes", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableClasses.Character_IdColumn})
        Me.tableClasses.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Classes_Class", New DataColumn() {Me.tableClasses.Classes_IdColumn}, New DataColumn() {Me.table_Class.Classes_IdColumn})
        Me.table_Class.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Resistances", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableResistances.Character_IdColumn})
        Me.tableResistances.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Resistances_Resistance", New DataColumn() {Me.tableResistances.Resistances_IdColumn}, New DataColumn() {Me.tableResistance.Resistances_IdColumn})
        Me.tableResistance.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Attacks", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableAttacks.Character_IdColumn})
        Me.tableAttacks.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Attacks_Attack", New DataColumn() {Me.tableAttacks.Attacks_IdColumn}, New DataColumn() {Me.tableAttack.Attacks_IdColumn})
        Me.tableAttack.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Attack_Primary", New DataColumn() {Me.tableAttack.Attack_IdColumn}, New DataColumn() {Me.tablePrimary.Attack_IdColumn})
        Me.tablePrimary.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Primary_PrimaryExtraDamage", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryExtraDamage.Primary_IdColumn})
        Me.tablePrimaryExtraDamage.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Primary_PrimaryAbility", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryAbility.Primary_IdColumn})
        Me.tablePrimaryAbility.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Primary_PrimaryModifier", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryModifier.Primary_IdColumn})
        Me.tablePrimaryModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Primary_PrimaryDamageResistance", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryDamageResistance.Primary_IdColumn})
        Me.tablePrimaryDamageResistance.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Primary_PrimaryCondition", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryCondition.Primary_IdColumn})
        Me.tablePrimaryCondition.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PrimaryCondition_PrimaryConditionalModifier", New DataColumn() {Me.tablePrimaryCondition.PrimaryCondition_IdColumn}, New DataColumn() {Me.tablePrimaryConditionalModifier.PrimaryCondition_IdColumn})
        Me.tablePrimaryConditionalModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PrimaryCondition_PrimaryConditionalExtraDamage", New DataColumn() {Me.tablePrimaryCondition.PrimaryCondition_IdColumn}, New DataColumn() {Me.tablePrimaryConditionalExtraDamage.PrimaryCondition_IdColumn})
        Me.tablePrimaryConditionalExtraDamage.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PrimaryCondition_PrimaryConditionalAbility", New DataColumn() {Me.tablePrimaryCondition.PrimaryCondition_IdColumn}, New DataColumn() {Me.tablePrimaryConditionalAbility.PrimaryCondition_IdColumn})
        Me.tablePrimaryConditionalAbility.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PrimaryCondition_PrimaryConditionalDamageResistance", New DataColumn() {Me.tablePrimaryCondition.PrimaryCondition_IdColumn}, New DataColumn() {Me.tablePrimaryConditionalDamageResistance.PrimaryCondition_IdColumn})
        Me.tablePrimaryConditionalDamageResistance.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Attack_Secondary", New DataColumn() {Me.tableAttack.Attack_IdColumn}, New DataColumn() {Me.tableSecondary.Attack_IdColumn})
        Me.tableSecondary.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Secondary_SecondaryExtraDamage", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryExtraDamage.Secondary_IdColumn})
        Me.tableSecondaryExtraDamage.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Secondary_SecondaryAbility", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryAbility.Secondary_IdColumn})
        Me.tableSecondaryAbility.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Secondary_SecondaryModifier", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryModifier.Secondary_IdColumn})
        Me.tableSecondaryModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Secondary_SecondaryDamageResistance", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryDamageResistance.Secondary_IdColumn})
        Me.tableSecondaryDamageResistance.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Secondary_SecondaryCondition", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryCondition.Secondary_IdColumn})
        Me.tableSecondaryCondition.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SecondaryCondition_SecondaryConditionalModifier", New DataColumn() {Me.tableSecondaryCondition.SecondaryCondition_IdColumn}, New DataColumn() {Me.tableSecondaryConditionalModifier.SecondaryCondition_IdColumn})
        Me.tableSecondaryConditionalModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SecondaryCondition_SecondaryConditionalExtraDamage", New DataColumn() {Me.tableSecondaryCondition.SecondaryCondition_IdColumn}, New DataColumn() {Me.tableSecondaryConditionalExtraDamage.SecondaryCondition_IdColumn})
        Me.tableSecondaryConditionalExtraDamage.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SecondaryCondition_SecondaryConditionalAbility", New DataColumn() {Me.tableSecondaryCondition.SecondaryCondition_IdColumn}, New DataColumn() {Me.tableSecondaryConditionalAbility.SecondaryCondition_IdColumn})
        Me.tableSecondaryConditionalAbility.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SecondaryCondition_SecondaryConditionalDamageResistance", New DataColumn() {Me.tableSecondaryCondition.SecondaryCondition_IdColumn}, New DataColumn() {Me.tableSecondaryConditionalDamageResistance.SecondaryCondition_IdColumn})
        Me.tableSecondaryConditionalDamageResistance.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Attack_Buckler", New DataColumn() {Me.tableAttack.Attack_IdColumn}, New DataColumn() {Me.tableBuckler.Attack_IdColumn})
        Me.tableBuckler.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Buckler_BucklerDamageResistance", New DataColumn() {Me.tableBuckler.Buckler_IdColumn}, New DataColumn() {Me.tableBucklerDamageResistance.Buckler_IdColumn})
        Me.tableBucklerDamageResistance.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Buckler_BucklerModifier", New DataColumn() {Me.tableBuckler.Buckler_IdColumn}, New DataColumn() {Me.tableBucklerModifier.Buckler_IdColumn})
        Me.tableBucklerModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Buckler_BucklerAbility", New DataColumn() {Me.tableBuckler.Buckler_IdColumn}, New DataColumn() {Me.tableBucklerAbility.Buckler_IdColumn})
        Me.tableBucklerAbility.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Skills", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSkills.Character_IdColumn})
        Me.tableSkills.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Skills_Skill", New DataColumn() {Me.tableSkills.Skills_IdColumn}, New DataColumn() {Me.tableSkill.Skills_IdColumn})
        Me.tableSkill.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Languages", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableLanguages.Character_IdColumn})
        Me.tableLanguages.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Languages_Language", New DataColumn() {Me.tableLanguages.Languages_IdColumn}, New DataColumn() {Me.tableLanguage.Languages_IdColumn})
        Me.tableLanguage.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_CoreModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableCoreModifiers.Character_IdColumn})
        Me.tableCoreModifiers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("CoreModifiers_CoreModifier", New DataColumn() {Me.tableCoreModifiers.CoreModifiers_IdColumn}, New DataColumn() {Me.tableCoreModifier.CoreModifiers_IdColumn})
        Me.tableCoreModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_AttackModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableAttackModifiers.Character_IdColumn})
        Me.tableAttackModifiers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AttackModifiers_AttackModifier", New DataColumn() {Me.tableAttackModifiers.AttackModifiers_IdColumn}, New DataColumn() {Me.tableAttackModifier.AttackModifiers_IdColumn})
        Me.tableAttackModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_DefenseModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableDefenseModifiers.Character_IdColumn})
        Me.tableDefenseModifiers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("DefenseModifiers_DefenseModifier", New DataColumn() {Me.tableDefenseModifiers.DefenseModifiers_IdColumn}, New DataColumn() {Me.tableDefenseModifier.DefenseModifiers_IdColumn})
        Me.tableDefenseModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_SkillModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSkillModifiers.Character_IdColumn})
        Me.tableSkillModifiers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SkillModifiers_SkillModifier", New DataColumn() {Me.tableSkillModifiers.SkillModifiers_IdColumn}, New DataColumn() {Me.tableSkillModifier.SkillModifiers_IdColumn})
        Me.tableSkillModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_MagicModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableMagicModifiers.Character_IdColumn})
        Me.tableMagicModifiers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("MagicModifiers_MagicModifier", New DataColumn() {Me.tableMagicModifiers.MagicModifiers_IdColumn}, New DataColumn() {Me.tableMagicModifier.MagicModifiers_IdColumn})
        Me.tableMagicModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Feats", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableFeats.Character_IdColumn})
        Me.tableFeats.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Feats_Feat", New DataColumn() {Me.tableFeats.Feats_IdColumn}, New DataColumn() {Me.tableFeat.Feats_IdColumn})
        Me.tableFeat.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Features", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableFeatures.Character_IdColumn})
        Me.tableFeatures.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Features_Feature", New DataColumn() {Me.tableFeatures.Features_IdColumn}, New DataColumn() {Me.tableFeature.Features_IdColumn})
        Me.tableFeature.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Inventory", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableInventory.Character_IdColumn})
        Me.tableInventory.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Inventory_InventoryItem", New DataColumn() {Me.tableInventory.Inventory_IdColumn}, New DataColumn() {Me.tableInventoryItem.Inventory_IdColumn})
        Me.tableInventoryItem.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Assets", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableAssets.Character_IdColumn})
        Me.tableAssets.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Assets_AssetItem", New DataColumn() {Me.tableAssets.Assets_IdColumn}, New DataColumn() {Me.tableAssetItem.Assets_IdColumn})
        Me.tableAssetItem.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_SpellCasterInfo", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSpellCasterInfo.Character_IdColumn})
        Me.tableSpellCasterInfo.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SpellCasterInfo_CasterClass", New DataColumn() {Me.tableSpellCasterInfo.SpellCasterInfo_IdColumn}, New DataColumn() {Me.tableCasterClass.SpellCasterInfo_IdColumn})
        Me.tableCasterClass.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("CasterClass_SpellsPerDay", New DataColumn() {Me.tableCasterClass.CasterClass_IdColumn}, New DataColumn() {Me.tableSpellsPerDay.CasterClass_IdColumn})
        Me.tableSpellsPerDay.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SpellsPerDay_ClassSPD", New DataColumn() {Me.tableSpellsPerDay.SpellsPerDay_IdColumn}, New DataColumn() {Me.tableClassSPD.SpellsPerDay_IdColumn})
        Me.tableClassSPD.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SpellsPerDay_SpecialistSPD", New DataColumn() {Me.tableSpellsPerDay.SpellsPerDay_IdColumn}, New DataColumn() {Me.tableSpecialistSPD.SpellsPerDay_IdColumn})
        Me.tableSpecialistSPD.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SpellsPerDay_DomainSPD", New DataColumn() {Me.tableSpellsPerDay.SpellsPerDay_IdColumn}, New DataColumn() {Me.tableDomainSPD.SpellsPerDay_IdColumn})
        Me.tableDomainSPD.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("CasterClass_SpellSaves", New DataColumn() {Me.tableCasterClass.CasterClass_IdColumn}, New DataColumn() {Me.tableSpellSaves.CasterClass_IdColumn})
        Me.tableSpellSaves.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("CasterClass_SpellsKnown", New DataColumn() {Me.tableCasterClass.CasterClass_IdColumn}, New DataColumn() {Me.tableSpellsKnown.CasterClass_IdColumn})
        Me.tableSpellsKnown.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("CasterClass_MemorizedSpells", New DataColumn() {Me.tableCasterClass.CasterClass_IdColumn}, New DataColumn() {Me.tableMemorizedSpells.CasterClass_IdColumn})
        Me.tableMemorizedSpells.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("MemorizedSpells_MemorizedSpell", New DataColumn() {Me.tableMemorizedSpells.MemorizedSpells_IdColumn}, New DataColumn() {Me.tableMemorizedSpell.MemorizedSpells_IdColumn})
        Me.tableMemorizedSpell.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Domains", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableDomains.Character_IdColumn})
        Me.tableDomains.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Domains_Domain", New DataColumn() {Me.tableDomains.Domains_IdColumn}, New DataColumn() {Me.tableDomain.Domains_IdColumn})
        Me.tableDomain.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_SpecialistSchools", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSpecialistSchools.Character_IdColumn})
        Me.tableSpecialistSchools.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SpecialistSchools_SpecialistSchool", New DataColumn() {Me.tableSpecialistSchools.SpecialistSchools_IdColumn}, New DataColumn() {Me.tableSpecialistSchool.SpecialistSchools_IdColumn})
        Me.tableSpecialistSchool.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_ProhibitedSchools", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableProhibitedSchools.Character_IdColumn})
        Me.tableProhibitedSchools.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ProhibitedSchools_ProhibitedSchool", New DataColumn() {Me.tableProhibitedSchools.ProhibitedSchools_IdColumn}, New DataColumn() {Me.tableProhibitedSchool.ProhibitedSchools_IdColumn})
        Me.tableProhibitedSchool.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Spells", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSpells.Character_IdColumn})
        Me.tableSpells.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Spells_ClassSpells", New DataColumn() {Me.tableSpells.Spells_IdColumn}, New DataColumn() {Me.tableClassSpells.Spells_IdColumn})
        Me.tableClassSpells.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ClassSpells_Spell", New DataColumn() {Me.tableClassSpells.ClassSpells_IdColumn}, New DataColumn() {Me.tableSpell.ClassSpells_IdColumn})
        Me.tableSpell.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_ManifesterInfo", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableManifesterInfo.Character_IdColumn})
        Me.tableManifesterInfo.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ManifesterInfo_ManifesterClass", New DataColumn() {Me.tableManifesterInfo.ManifesterInfo_IdColumn}, New DataColumn() {Me.tableManifesterClass.ManifesterInfo_IdColumn})
        Me.tableManifesterClass.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ManifesterClass_PowerSaves", New DataColumn() {Me.tableManifesterClass.ManifesterClass_IdColumn}, New DataColumn() {Me.tablePowerSaves.ManifesterClass_IdColumn})
        Me.tablePowerSaves.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_Powers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tablePowers.Character_IdColumn})
        Me.tablePowers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Powers_ClassPowers", New DataColumn() {Me.tablePowers.Powers_IdColumn}, New DataColumn() {Me.tableClassPowers.Powers_IdColumn})
        Me.tableClassPowers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ClassPowers_Power", New DataColumn() {Me.tableClassPowers.ClassPowers_IdColumn}, New DataColumn() {Me.tablePower.ClassPowers_IdColumn})
        Me.tablePower.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_PsionicSpecializations", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tablePsionicSpecializations.Character_IdColumn})
        Me.tablePsionicSpecializations.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PsionicSpecializations_PsionicSpecialization", New DataColumn() {Me.tablePsionicSpecializations.PsionicSpecializations_IdColumn}, New DataColumn() {Me.tablePsionicSpecialization.PsionicSpecializations_IdColumn})
        Me.tablePsionicSpecialization.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_PsionicModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tablePsionicModifiers.Character_IdColumn})
        Me.tablePsionicModifiers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PsionicModifiers_PsionicModifier", New DataColumn() {Me.tablePsionicModifiers.PsionicModifiers_IdColumn}, New DataColumn() {Me.tablePsionicModifier.PsionicModifiers_IdColumn})
        Me.tablePsionicModifier.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_ArmorClass", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableArmorClass.Character_IdColumn})
        Me.tableArmorClass.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_SavingThrows", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSavingThrows.Character_IdColumn})
        Me.tableSavingThrows.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SavingThrows_SavingThrow", New DataColumn() {Me.tableSavingThrows.SavingThrows_IdColumn}, New DataColumn() {Me.tableSavingThrow.SavingThrows_IdColumn})
        Me.tableSavingThrow.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_AbilityScores", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableAbilityScores.Character_IdColumn})
        Me.tableAbilityScores.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AbilityScores_AbilityScore", New DataColumn() {Me.tableAbilityScores.AbilityScores_IdColumn}, New DataColumn() {Me.tableAbilityScore.AbilityScores_IdColumn})
        Me.tableAbilityScore.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_PsiLikeAbilities", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tablePsiLikeAbilities.Character_IdColumn})
        Me.tablePsiLikeAbilities.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PsiLikeAbilities_PsiLikeAbility", New DataColumn() {Me.tablePsiLikeAbilities.PsiLikeAbilities_IdColumn}, New DataColumn() {Me.tablePsiLikeAbility.PsiLikeAbilities_IdColumn})
        Me.tablePsiLikeAbility.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PsiLikeAbility_AbilityPower", New DataColumn() {Me.tablePsiLikeAbility.PsiLikeAbility_IdColumn}, New DataColumn() {Me.tableAbilityPower.PsiLikeAbility_IdColumn})
        Me.tableAbilityPower.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Character_SpellLikeAbilities", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSpellLikeAbilities.Character_IdColumn})
        Me.tableSpellLikeAbilities.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SpellLikeAbilities_SpellLikeAbility", New DataColumn() {Me.tableSpellLikeAbilities.SpellLikeAbilities_IdColumn}, New DataColumn() {Me.tableSpellLikeAbility.SpellLikeAbilities_IdColumn})
        Me.tableSpellLikeAbility.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SpellLikeAbility_AbilitySpell", New DataColumn() {Me.tableSpellLikeAbility.SpellLikeAbility_IdColumn}, New DataColumn() {Me.tableAbilitySpell.SpellLikeAbility_IdColumn})
        Me.tableAbilitySpell.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationSubtypes_Subtype = New DataRelation("Subtypes_Subtype", New DataColumn() {Me.tableSubtypes.Subtypes_IdColumn}, New DataColumn() {Me.tableSubtype.Subtypes_IdColumn}, false)
        Me.relationSubtypes_Subtype.Nested = true
        Me.Relations.Add(Me.relationSubtypes_Subtype)
        Me.relationClasses_Class = New DataRelation("Classes_Class", New DataColumn() {Me.tableClasses.Classes_IdColumn}, New DataColumn() {Me.table_Class.Classes_IdColumn}, false)
        Me.relationClasses_Class.Nested = true
        Me.Relations.Add(Me.relationClasses_Class)
        Me.relationResistances_Resistance = New DataRelation("Resistances_Resistance", New DataColumn() {Me.tableResistances.Resistances_IdColumn}, New DataColumn() {Me.tableResistance.Resistances_IdColumn}, false)
        Me.relationResistances_Resistance.Nested = true
        Me.Relations.Add(Me.relationResistances_Resistance)
        Me.relationPrimaryCondition_PrimaryConditionalModifier = New DataRelation("PrimaryCondition_PrimaryConditionalModifier", New DataColumn() {Me.tablePrimaryCondition.PrimaryCondition_IdColumn}, New DataColumn() {Me.tablePrimaryConditionalModifier.PrimaryCondition_IdColumn}, false)
        Me.relationPrimaryCondition_PrimaryConditionalModifier.Nested = true
        Me.Relations.Add(Me.relationPrimaryCondition_PrimaryConditionalModifier)
        Me.relationPrimaryCondition_PrimaryConditionalExtraDamage = New DataRelation("PrimaryCondition_PrimaryConditionalExtraDamage", New DataColumn() {Me.tablePrimaryCondition.PrimaryCondition_IdColumn}, New DataColumn() {Me.tablePrimaryConditionalExtraDamage.PrimaryCondition_IdColumn}, false)
        Me.relationPrimaryCondition_PrimaryConditionalExtraDamage.Nested = true
        Me.Relations.Add(Me.relationPrimaryCondition_PrimaryConditionalExtraDamage)
        Me.relationPrimaryCondition_PrimaryConditionalAbility = New DataRelation("PrimaryCondition_PrimaryConditionalAbility", New DataColumn() {Me.tablePrimaryCondition.PrimaryCondition_IdColumn}, New DataColumn() {Me.tablePrimaryConditionalAbility.PrimaryCondition_IdColumn}, false)
        Me.relationPrimaryCondition_PrimaryConditionalAbility.Nested = true
        Me.Relations.Add(Me.relationPrimaryCondition_PrimaryConditionalAbility)
        Me.relationPrimaryCondition_PrimaryConditionalDamageResistance = New DataRelation("PrimaryCondition_PrimaryConditionalDamageResistance", New DataColumn() {Me.tablePrimaryCondition.PrimaryCondition_IdColumn}, New DataColumn() {Me.tablePrimaryConditionalDamageResistance.PrimaryCondition_IdColumn}, false)
        Me.relationPrimaryCondition_PrimaryConditionalDamageResistance.Nested = true
        Me.Relations.Add(Me.relationPrimaryCondition_PrimaryConditionalDamageResistance)
        Me.relationPrimary_PrimaryExtraDamage = New DataRelation("Primary_PrimaryExtraDamage", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryExtraDamage.Primary_IdColumn}, false)
        Me.relationPrimary_PrimaryExtraDamage.Nested = true
        Me.Relations.Add(Me.relationPrimary_PrimaryExtraDamage)
        Me.relationPrimary_PrimaryAbility = New DataRelation("Primary_PrimaryAbility", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryAbility.Primary_IdColumn}, false)
        Me.relationPrimary_PrimaryAbility.Nested = true
        Me.Relations.Add(Me.relationPrimary_PrimaryAbility)
        Me.relationPrimary_PrimaryModifier = New DataRelation("Primary_PrimaryModifier", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryModifier.Primary_IdColumn}, false)
        Me.relationPrimary_PrimaryModifier.Nested = true
        Me.Relations.Add(Me.relationPrimary_PrimaryModifier)
        Me.relationPrimary_PrimaryDamageResistance = New DataRelation("Primary_PrimaryDamageResistance", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryDamageResistance.Primary_IdColumn}, false)
        Me.relationPrimary_PrimaryDamageResistance.Nested = true
        Me.Relations.Add(Me.relationPrimary_PrimaryDamageResistance)
        Me.relationPrimary_PrimaryCondition = New DataRelation("Primary_PrimaryCondition", New DataColumn() {Me.tablePrimary.Primary_IdColumn}, New DataColumn() {Me.tablePrimaryCondition.Primary_IdColumn}, false)
        Me.relationPrimary_PrimaryCondition.Nested = true
        Me.Relations.Add(Me.relationPrimary_PrimaryCondition)
        Me.relationSecondaryCondition_SecondaryConditionalModifier = New DataRelation("SecondaryCondition_SecondaryConditionalModifier", New DataColumn() {Me.tableSecondaryCondition.SecondaryCondition_IdColumn}, New DataColumn() {Me.tableSecondaryConditionalModifier.SecondaryCondition_IdColumn}, false)
        Me.relationSecondaryCondition_SecondaryConditionalModifier.Nested = true
        Me.Relations.Add(Me.relationSecondaryCondition_SecondaryConditionalModifier)
        Me.relationSecondaryCondition_SecondaryConditionalExtraDamage = New DataRelation("SecondaryCondition_SecondaryConditionalExtraDamage", New DataColumn() {Me.tableSecondaryCondition.SecondaryCondition_IdColumn}, New DataColumn() {Me.tableSecondaryConditionalExtraDamage.SecondaryCondition_IdColumn}, false)
        Me.relationSecondaryCondition_SecondaryConditionalExtraDamage.Nested = true
        Me.Relations.Add(Me.relationSecondaryCondition_SecondaryConditionalExtraDamage)
        Me.relationSecondaryCondition_SecondaryConditionalAbility = New DataRelation("SecondaryCondition_SecondaryConditionalAbility", New DataColumn() {Me.tableSecondaryCondition.SecondaryCondition_IdColumn}, New DataColumn() {Me.tableSecondaryConditionalAbility.SecondaryCondition_IdColumn}, false)
        Me.relationSecondaryCondition_SecondaryConditionalAbility.Nested = true
        Me.Relations.Add(Me.relationSecondaryCondition_SecondaryConditionalAbility)
        Me.relationSecondaryCondition_SecondaryConditionalDamageResistance = New DataRelation("SecondaryCondition_SecondaryConditionalDamageResistance", New DataColumn() {Me.tableSecondaryCondition.SecondaryCondition_IdColumn}, New DataColumn() {Me.tableSecondaryConditionalDamageResistance.SecondaryCondition_IdColumn}, false)
        Me.relationSecondaryCondition_SecondaryConditionalDamageResistance.Nested = true
        Me.Relations.Add(Me.relationSecondaryCondition_SecondaryConditionalDamageResistance)
        Me.relationSecondary_SecondaryExtraDamage = New DataRelation("Secondary_SecondaryExtraDamage", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryExtraDamage.Secondary_IdColumn}, false)
        Me.relationSecondary_SecondaryExtraDamage.Nested = true
        Me.Relations.Add(Me.relationSecondary_SecondaryExtraDamage)
        Me.relationSecondary_SecondaryAbility = New DataRelation("Secondary_SecondaryAbility", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryAbility.Secondary_IdColumn}, false)
        Me.relationSecondary_SecondaryAbility.Nested = true
        Me.Relations.Add(Me.relationSecondary_SecondaryAbility)
        Me.relationSecondary_SecondaryModifier = New DataRelation("Secondary_SecondaryModifier", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryModifier.Secondary_IdColumn}, false)
        Me.relationSecondary_SecondaryModifier.Nested = true
        Me.Relations.Add(Me.relationSecondary_SecondaryModifier)
        Me.relationSecondary_SecondaryDamageResistance = New DataRelation("Secondary_SecondaryDamageResistance", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryDamageResistance.Secondary_IdColumn}, false)
        Me.relationSecondary_SecondaryDamageResistance.Nested = true
        Me.Relations.Add(Me.relationSecondary_SecondaryDamageResistance)
        Me.relationSecondary_SecondaryCondition = New DataRelation("Secondary_SecondaryCondition", New DataColumn() {Me.tableSecondary.Secondary_IdColumn}, New DataColumn() {Me.tableSecondaryCondition.Secondary_IdColumn}, false)
        Me.relationSecondary_SecondaryCondition.Nested = true
        Me.Relations.Add(Me.relationSecondary_SecondaryCondition)
        Me.relationBuckler_BucklerDamageResistance = New DataRelation("Buckler_BucklerDamageResistance", New DataColumn() {Me.tableBuckler.Buckler_IdColumn}, New DataColumn() {Me.tableBucklerDamageResistance.Buckler_IdColumn}, false)
        Me.relationBuckler_BucklerDamageResistance.Nested = true
        Me.Relations.Add(Me.relationBuckler_BucklerDamageResistance)
        Me.relationBuckler_BucklerModifier = New DataRelation("Buckler_BucklerModifier", New DataColumn() {Me.tableBuckler.Buckler_IdColumn}, New DataColumn() {Me.tableBucklerModifier.Buckler_IdColumn}, false)
        Me.relationBuckler_BucklerModifier.Nested = true
        Me.Relations.Add(Me.relationBuckler_BucklerModifier)
        Me.relationBuckler_BucklerAbility = New DataRelation("Buckler_BucklerAbility", New DataColumn() {Me.tableBuckler.Buckler_IdColumn}, New DataColumn() {Me.tableBucklerAbility.Buckler_IdColumn}, false)
        Me.relationBuckler_BucklerAbility.Nested = true
        Me.Relations.Add(Me.relationBuckler_BucklerAbility)
        Me.relationAttack_Primary = New DataRelation("Attack_Primary", New DataColumn() {Me.tableAttack.Attack_IdColumn}, New DataColumn() {Me.tablePrimary.Attack_IdColumn}, false)
        Me.relationAttack_Primary.Nested = true
        Me.Relations.Add(Me.relationAttack_Primary)
        Me.relationAttack_Secondary = New DataRelation("Attack_Secondary", New DataColumn() {Me.tableAttack.Attack_IdColumn}, New DataColumn() {Me.tableSecondary.Attack_IdColumn}, false)
        Me.relationAttack_Secondary.Nested = true
        Me.Relations.Add(Me.relationAttack_Secondary)
        Me.relationAttack_Buckler = New DataRelation("Attack_Buckler", New DataColumn() {Me.tableAttack.Attack_IdColumn}, New DataColumn() {Me.tableBuckler.Attack_IdColumn}, false)
        Me.relationAttack_Buckler.Nested = true
        Me.Relations.Add(Me.relationAttack_Buckler)
        Me.relationAttacks_Attack = New DataRelation("Attacks_Attack", New DataColumn() {Me.tableAttacks.Attacks_IdColumn}, New DataColumn() {Me.tableAttack.Attacks_IdColumn}, false)
        Me.relationAttacks_Attack.Nested = true
        Me.Relations.Add(Me.relationAttacks_Attack)
        Me.relationSkills_Skill = New DataRelation("Skills_Skill", New DataColumn() {Me.tableSkills.Skills_IdColumn}, New DataColumn() {Me.tableSkill.Skills_IdColumn}, false)
        Me.relationSkills_Skill.Nested = true
        Me.Relations.Add(Me.relationSkills_Skill)
        Me.relationLanguages_Language = New DataRelation("Languages_Language", New DataColumn() {Me.tableLanguages.Languages_IdColumn}, New DataColumn() {Me.tableLanguage.Languages_IdColumn}, false)
        Me.relationLanguages_Language.Nested = true
        Me.Relations.Add(Me.relationLanguages_Language)
        Me.relationCoreModifiers_CoreModifier = New DataRelation("CoreModifiers_CoreModifier", New DataColumn() {Me.tableCoreModifiers.CoreModifiers_IdColumn}, New DataColumn() {Me.tableCoreModifier.CoreModifiers_IdColumn}, false)
        Me.relationCoreModifiers_CoreModifier.Nested = true
        Me.Relations.Add(Me.relationCoreModifiers_CoreModifier)
        Me.relationAttackModifiers_AttackModifier = New DataRelation("AttackModifiers_AttackModifier", New DataColumn() {Me.tableAttackModifiers.AttackModifiers_IdColumn}, New DataColumn() {Me.tableAttackModifier.AttackModifiers_IdColumn}, false)
        Me.relationAttackModifiers_AttackModifier.Nested = true
        Me.Relations.Add(Me.relationAttackModifiers_AttackModifier)
        Me.relationDefenseModifiers_DefenseModifier = New DataRelation("DefenseModifiers_DefenseModifier", New DataColumn() {Me.tableDefenseModifiers.DefenseModifiers_IdColumn}, New DataColumn() {Me.tableDefenseModifier.DefenseModifiers_IdColumn}, false)
        Me.relationDefenseModifiers_DefenseModifier.Nested = true
        Me.Relations.Add(Me.relationDefenseModifiers_DefenseModifier)
        Me.relationSkillModifiers_SkillModifier = New DataRelation("SkillModifiers_SkillModifier", New DataColumn() {Me.tableSkillModifiers.SkillModifiers_IdColumn}, New DataColumn() {Me.tableSkillModifier.SkillModifiers_IdColumn}, false)
        Me.relationSkillModifiers_SkillModifier.Nested = true
        Me.Relations.Add(Me.relationSkillModifiers_SkillModifier)
        Me.relationMagicModifiers_MagicModifier = New DataRelation("MagicModifiers_MagicModifier", New DataColumn() {Me.tableMagicModifiers.MagicModifiers_IdColumn}, New DataColumn() {Me.tableMagicModifier.MagicModifiers_IdColumn}, false)
        Me.relationMagicModifiers_MagicModifier.Nested = true
        Me.Relations.Add(Me.relationMagicModifiers_MagicModifier)
        Me.relationFeats_Feat = New DataRelation("Feats_Feat", New DataColumn() {Me.tableFeats.Feats_IdColumn}, New DataColumn() {Me.tableFeat.Feats_IdColumn}, false)
        Me.relationFeats_Feat.Nested = true
        Me.Relations.Add(Me.relationFeats_Feat)
        Me.relationFeatures_Feature = New DataRelation("Features_Feature", New DataColumn() {Me.tableFeatures.Features_IdColumn}, New DataColumn() {Me.tableFeature.Features_IdColumn}, false)
        Me.relationFeatures_Feature.Nested = true
        Me.Relations.Add(Me.relationFeatures_Feature)
        Me.relationInventory_InventoryItem = New DataRelation("Inventory_InventoryItem", New DataColumn() {Me.tableInventory.Inventory_IdColumn}, New DataColumn() {Me.tableInventoryItem.Inventory_IdColumn}, false)
        Me.relationInventory_InventoryItem.Nested = true
        Me.Relations.Add(Me.relationInventory_InventoryItem)
        Me.relationAssets_AssetItem = New DataRelation("Assets_AssetItem", New DataColumn() {Me.tableAssets.Assets_IdColumn}, New DataColumn() {Me.tableAssetItem.Assets_IdColumn}, false)
        Me.relationAssets_AssetItem.Nested = true
        Me.Relations.Add(Me.relationAssets_AssetItem)
        Me.relationSpellsPerDay_ClassSPD = New DataRelation("SpellsPerDay_ClassSPD", New DataColumn() {Me.tableSpellsPerDay.SpellsPerDay_IdColumn}, New DataColumn() {Me.tableClassSPD.SpellsPerDay_IdColumn}, false)
        Me.relationSpellsPerDay_ClassSPD.Nested = true
        Me.Relations.Add(Me.relationSpellsPerDay_ClassSPD)
        Me.relationSpellsPerDay_SpecialistSPD = New DataRelation("SpellsPerDay_SpecialistSPD", New DataColumn() {Me.tableSpellsPerDay.SpellsPerDay_IdColumn}, New DataColumn() {Me.tableSpecialistSPD.SpellsPerDay_IdColumn}, false)
        Me.relationSpellsPerDay_SpecialistSPD.Nested = true
        Me.Relations.Add(Me.relationSpellsPerDay_SpecialistSPD)
        Me.relationSpellsPerDay_DomainSPD = New DataRelation("SpellsPerDay_DomainSPD", New DataColumn() {Me.tableSpellsPerDay.SpellsPerDay_IdColumn}, New DataColumn() {Me.tableDomainSPD.SpellsPerDay_IdColumn}, false)
        Me.relationSpellsPerDay_DomainSPD.Nested = true
        Me.Relations.Add(Me.relationSpellsPerDay_DomainSPD)
        Me.relationMemorizedSpells_MemorizedSpell = New DataRelation("MemorizedSpells_MemorizedSpell", New DataColumn() {Me.tableMemorizedSpells.MemorizedSpells_IdColumn}, New DataColumn() {Me.tableMemorizedSpell.MemorizedSpells_IdColumn}, false)
        Me.relationMemorizedSpells_MemorizedSpell.Nested = true
        Me.Relations.Add(Me.relationMemorizedSpells_MemorizedSpell)
        Me.relationCasterClass_SpellsPerDay = New DataRelation("CasterClass_SpellsPerDay", New DataColumn() {Me.tableCasterClass.CasterClass_IdColumn}, New DataColumn() {Me.tableSpellsPerDay.CasterClass_IdColumn}, false)
        Me.relationCasterClass_SpellsPerDay.Nested = true
        Me.Relations.Add(Me.relationCasterClass_SpellsPerDay)
        Me.relationCasterClass_SpellSaves = New DataRelation("CasterClass_SpellSaves", New DataColumn() {Me.tableCasterClass.CasterClass_IdColumn}, New DataColumn() {Me.tableSpellSaves.CasterClass_IdColumn}, false)
        Me.relationCasterClass_SpellSaves.Nested = true
        Me.Relations.Add(Me.relationCasterClass_SpellSaves)
        Me.relationCasterClass_SpellsKnown = New DataRelation("CasterClass_SpellsKnown", New DataColumn() {Me.tableCasterClass.CasterClass_IdColumn}, New DataColumn() {Me.tableSpellsKnown.CasterClass_IdColumn}, false)
        Me.relationCasterClass_SpellsKnown.Nested = true
        Me.Relations.Add(Me.relationCasterClass_SpellsKnown)
        Me.relationCasterClass_MemorizedSpells = New DataRelation("CasterClass_MemorizedSpells", New DataColumn() {Me.tableCasterClass.CasterClass_IdColumn}, New DataColumn() {Me.tableMemorizedSpells.CasterClass_IdColumn}, false)
        Me.relationCasterClass_MemorizedSpells.Nested = true
        Me.Relations.Add(Me.relationCasterClass_MemorizedSpells)
        Me.relationSpellCasterInfo_CasterClass = New DataRelation("SpellCasterInfo_CasterClass", New DataColumn() {Me.tableSpellCasterInfo.SpellCasterInfo_IdColumn}, New DataColumn() {Me.tableCasterClass.SpellCasterInfo_IdColumn}, false)
        Me.relationSpellCasterInfo_CasterClass.Nested = true
        Me.Relations.Add(Me.relationSpellCasterInfo_CasterClass)
        Me.relationDomains_Domain = New DataRelation("Domains_Domain", New DataColumn() {Me.tableDomains.Domains_IdColumn}, New DataColumn() {Me.tableDomain.Domains_IdColumn}, false)
        Me.relationDomains_Domain.Nested = true
        Me.Relations.Add(Me.relationDomains_Domain)
        Me.relationSpecialistSchools_SpecialistSchool = New DataRelation("SpecialistSchools_SpecialistSchool", New DataColumn() {Me.tableSpecialistSchools.SpecialistSchools_IdColumn}, New DataColumn() {Me.tableSpecialistSchool.SpecialistSchools_IdColumn}, false)
        Me.relationSpecialistSchools_SpecialistSchool.Nested = true
        Me.Relations.Add(Me.relationSpecialistSchools_SpecialistSchool)
        Me.relationProhibitedSchools_ProhibitedSchool = New DataRelation("ProhibitedSchools_ProhibitedSchool", New DataColumn() {Me.tableProhibitedSchools.ProhibitedSchools_IdColumn}, New DataColumn() {Me.tableProhibitedSchool.ProhibitedSchools_IdColumn}, false)
        Me.relationProhibitedSchools_ProhibitedSchool.Nested = true
        Me.Relations.Add(Me.relationProhibitedSchools_ProhibitedSchool)
        Me.relationClassSpells_Spell = New DataRelation("ClassSpells_Spell", New DataColumn() {Me.tableClassSpells.ClassSpells_IdColumn}, New DataColumn() {Me.tableSpell.ClassSpells_IdColumn}, false)
        Me.relationClassSpells_Spell.Nested = true
        Me.Relations.Add(Me.relationClassSpells_Spell)
        Me.relationSpells_ClassSpells = New DataRelation("Spells_ClassSpells", New DataColumn() {Me.tableSpells.Spells_IdColumn}, New DataColumn() {Me.tableClassSpells.Spells_IdColumn}, false)
        Me.relationSpells_ClassSpells.Nested = true
        Me.Relations.Add(Me.relationSpells_ClassSpells)
        Me.relationManifesterClass_PowerSaves = New DataRelation("ManifesterClass_PowerSaves", New DataColumn() {Me.tableManifesterClass.ManifesterClass_IdColumn}, New DataColumn() {Me.tablePowerSaves.ManifesterClass_IdColumn}, false)
        Me.relationManifesterClass_PowerSaves.Nested = true
        Me.Relations.Add(Me.relationManifesterClass_PowerSaves)
        Me.relationManifesterInfo_ManifesterClass = New DataRelation("ManifesterInfo_ManifesterClass", New DataColumn() {Me.tableManifesterInfo.ManifesterInfo_IdColumn}, New DataColumn() {Me.tableManifesterClass.ManifesterInfo_IdColumn}, false)
        Me.relationManifesterInfo_ManifesterClass.Nested = true
        Me.Relations.Add(Me.relationManifesterInfo_ManifesterClass)
        Me.relationClassPowers_Power = New DataRelation("ClassPowers_Power", New DataColumn() {Me.tableClassPowers.ClassPowers_IdColumn}, New DataColumn() {Me.tablePower.ClassPowers_IdColumn}, false)
        Me.relationClassPowers_Power.Nested = true
        Me.Relations.Add(Me.relationClassPowers_Power)
        Me.relationPowers_ClassPowers = New DataRelation("Powers_ClassPowers", New DataColumn() {Me.tablePowers.Powers_IdColumn}, New DataColumn() {Me.tableClassPowers.Powers_IdColumn}, false)
        Me.relationPowers_ClassPowers.Nested = true
        Me.Relations.Add(Me.relationPowers_ClassPowers)
        Me.relationPsionicSpecializations_PsionicSpecialization = New DataRelation("PsionicSpecializations_PsionicSpecialization", New DataColumn() {Me.tablePsionicSpecializations.PsionicSpecializations_IdColumn}, New DataColumn() {Me.tablePsionicSpecialization.PsionicSpecializations_IdColumn}, false)
        Me.relationPsionicSpecializations_PsionicSpecialization.Nested = true
        Me.Relations.Add(Me.relationPsionicSpecializations_PsionicSpecialization)
        Me.relationPsionicModifiers_PsionicModifier = New DataRelation("PsionicModifiers_PsionicModifier", New DataColumn() {Me.tablePsionicModifiers.PsionicModifiers_IdColumn}, New DataColumn() {Me.tablePsionicModifier.PsionicModifiers_IdColumn}, false)
        Me.relationPsionicModifiers_PsionicModifier.Nested = true
        Me.Relations.Add(Me.relationPsionicModifiers_PsionicModifier)
        Me.relationSavingThrows_SavingThrow = New DataRelation("SavingThrows_SavingThrow", New DataColumn() {Me.tableSavingThrows.SavingThrows_IdColumn}, New DataColumn() {Me.tableSavingThrow.SavingThrows_IdColumn}, false)
        Me.relationSavingThrows_SavingThrow.Nested = true
        Me.Relations.Add(Me.relationSavingThrows_SavingThrow)
        Me.relationAbilityScores_AbilityScore = New DataRelation("AbilityScores_AbilityScore", New DataColumn() {Me.tableAbilityScores.AbilityScores_IdColumn}, New DataColumn() {Me.tableAbilityScore.AbilityScores_IdColumn}, false)
        Me.relationAbilityScores_AbilityScore.Nested = true
        Me.Relations.Add(Me.relationAbilityScores_AbilityScore)
        Me.relationPsiLikeAbility_AbilityPower = New DataRelation("PsiLikeAbility_AbilityPower", New DataColumn() {Me.tablePsiLikeAbility.PsiLikeAbility_IdColumn}, New DataColumn() {Me.tableAbilityPower.PsiLikeAbility_IdColumn}, false)
        Me.relationPsiLikeAbility_AbilityPower.Nested = true
        Me.Relations.Add(Me.relationPsiLikeAbility_AbilityPower)
        Me.relationPsiLikeAbilities_PsiLikeAbility = New DataRelation("PsiLikeAbilities_PsiLikeAbility", New DataColumn() {Me.tablePsiLikeAbilities.PsiLikeAbilities_IdColumn}, New DataColumn() {Me.tablePsiLikeAbility.PsiLikeAbilities_IdColumn}, false)
        Me.relationPsiLikeAbilities_PsiLikeAbility.Nested = true
        Me.Relations.Add(Me.relationPsiLikeAbilities_PsiLikeAbility)
        Me.relationSpellLikeAbility_AbilitySpell = New DataRelation("SpellLikeAbility_AbilitySpell", New DataColumn() {Me.tableSpellLikeAbility.SpellLikeAbility_IdColumn}, New DataColumn() {Me.tableAbilitySpell.SpellLikeAbility_IdColumn}, false)
        Me.relationSpellLikeAbility_AbilitySpell.Nested = true
        Me.Relations.Add(Me.relationSpellLikeAbility_AbilitySpell)
        Me.relationSpellLikeAbilities_SpellLikeAbility = New DataRelation("SpellLikeAbilities_SpellLikeAbility", New DataColumn() {Me.tableSpellLikeAbilities.SpellLikeAbilities_IdColumn}, New DataColumn() {Me.tableSpellLikeAbility.SpellLikeAbilities_IdColumn}, false)
        Me.relationSpellLikeAbilities_SpellLikeAbility.Nested = true
        Me.Relations.Add(Me.relationSpellLikeAbilities_SpellLikeAbility)
        Me.relationCharacter_Subtypes = New DataRelation("Character_Subtypes", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSubtypes.Character_IdColumn}, false)
        Me.relationCharacter_Subtypes.Nested = true
        Me.Relations.Add(Me.relationCharacter_Subtypes)
        Me.relationCharacter_Classes = New DataRelation("Character_Classes", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableClasses.Character_IdColumn}, false)
        Me.relationCharacter_Classes.Nested = true
        Me.Relations.Add(Me.relationCharacter_Classes)
        Me.relationCharacter_Resistances = New DataRelation("Character_Resistances", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableResistances.Character_IdColumn}, false)
        Me.relationCharacter_Resistances.Nested = true
        Me.Relations.Add(Me.relationCharacter_Resistances)
        Me.relationCharacter_Attacks = New DataRelation("Character_Attacks", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableAttacks.Character_IdColumn}, false)
        Me.relationCharacter_Attacks.Nested = true
        Me.Relations.Add(Me.relationCharacter_Attacks)
        Me.relationCharacter_Skills = New DataRelation("Character_Skills", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSkills.Character_IdColumn}, false)
        Me.relationCharacter_Skills.Nested = true
        Me.Relations.Add(Me.relationCharacter_Skills)
        Me.relationCharacter_Languages = New DataRelation("Character_Languages", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableLanguages.Character_IdColumn}, false)
        Me.relationCharacter_Languages.Nested = true
        Me.Relations.Add(Me.relationCharacter_Languages)
        Me.relationCharacter_CoreModifiers = New DataRelation("Character_CoreModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableCoreModifiers.Character_IdColumn}, false)
        Me.relationCharacter_CoreModifiers.Nested = true
        Me.Relations.Add(Me.relationCharacter_CoreModifiers)
        Me.relationCharacter_AttackModifiers = New DataRelation("Character_AttackModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableAttackModifiers.Character_IdColumn}, false)
        Me.relationCharacter_AttackModifiers.Nested = true
        Me.Relations.Add(Me.relationCharacter_AttackModifiers)
        Me.relationCharacter_DefenseModifiers = New DataRelation("Character_DefenseModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableDefenseModifiers.Character_IdColumn}, false)
        Me.relationCharacter_DefenseModifiers.Nested = true
        Me.Relations.Add(Me.relationCharacter_DefenseModifiers)
        Me.relationCharacter_SkillModifiers = New DataRelation("Character_SkillModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSkillModifiers.Character_IdColumn}, false)
        Me.relationCharacter_SkillModifiers.Nested = true
        Me.Relations.Add(Me.relationCharacter_SkillModifiers)
        Me.relationCharacter_MagicModifiers = New DataRelation("Character_MagicModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableMagicModifiers.Character_IdColumn}, false)
        Me.relationCharacter_MagicModifiers.Nested = true
        Me.Relations.Add(Me.relationCharacter_MagicModifiers)
        Me.relationCharacter_Feats = New DataRelation("Character_Feats", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableFeats.Character_IdColumn}, false)
        Me.relationCharacter_Feats.Nested = true
        Me.Relations.Add(Me.relationCharacter_Feats)
        Me.relationCharacter_Features = New DataRelation("Character_Features", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableFeatures.Character_IdColumn}, false)
        Me.relationCharacter_Features.Nested = true
        Me.Relations.Add(Me.relationCharacter_Features)
        Me.relationCharacter_Inventory = New DataRelation("Character_Inventory", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableInventory.Character_IdColumn}, false)
        Me.relationCharacter_Inventory.Nested = true
        Me.Relations.Add(Me.relationCharacter_Inventory)
        Me.relationCharacter_Assets = New DataRelation("Character_Assets", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableAssets.Character_IdColumn}, false)
        Me.relationCharacter_Assets.Nested = true
        Me.Relations.Add(Me.relationCharacter_Assets)
        Me.relationCharacter_SpellCasterInfo = New DataRelation("Character_SpellCasterInfo", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSpellCasterInfo.Character_IdColumn}, false)
        Me.relationCharacter_SpellCasterInfo.Nested = true
        Me.Relations.Add(Me.relationCharacter_SpellCasterInfo)
        Me.relationCharacter_Domains = New DataRelation("Character_Domains", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableDomains.Character_IdColumn}, false)
        Me.relationCharacter_Domains.Nested = true
        Me.Relations.Add(Me.relationCharacter_Domains)
        Me.relationCharacter_SpecialistSchools = New DataRelation("Character_SpecialistSchools", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSpecialistSchools.Character_IdColumn}, false)
        Me.relationCharacter_SpecialistSchools.Nested = true
        Me.Relations.Add(Me.relationCharacter_SpecialistSchools)
        Me.relationCharacter_ProhibitedSchools = New DataRelation("Character_ProhibitedSchools", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableProhibitedSchools.Character_IdColumn}, false)
        Me.relationCharacter_ProhibitedSchools.Nested = true
        Me.Relations.Add(Me.relationCharacter_ProhibitedSchools)
        Me.relationCharacter_Spells = New DataRelation("Character_Spells", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSpells.Character_IdColumn}, false)
        Me.relationCharacter_Spells.Nested = true
        Me.Relations.Add(Me.relationCharacter_Spells)
        Me.relationCharacter_ManifesterInfo = New DataRelation("Character_ManifesterInfo", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableManifesterInfo.Character_IdColumn}, false)
        Me.relationCharacter_ManifesterInfo.Nested = true
        Me.Relations.Add(Me.relationCharacter_ManifesterInfo)
        Me.relationCharacter_Powers = New DataRelation("Character_Powers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tablePowers.Character_IdColumn}, false)
        Me.relationCharacter_Powers.Nested = true
        Me.Relations.Add(Me.relationCharacter_Powers)
        Me.relationCharacter_PsionicSpecializations = New DataRelation("Character_PsionicSpecializations", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tablePsionicSpecializations.Character_IdColumn}, false)
        Me.relationCharacter_PsionicSpecializations.Nested = true
        Me.Relations.Add(Me.relationCharacter_PsionicSpecializations)
        Me.relationCharacter_PsionicModifiers = New DataRelation("Character_PsionicModifiers", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tablePsionicModifiers.Character_IdColumn}, false)
        Me.relationCharacter_PsionicModifiers.Nested = true
        Me.Relations.Add(Me.relationCharacter_PsionicModifiers)
        Me.relationCharacter_ArmorClass = New DataRelation("Character_ArmorClass", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableArmorClass.Character_IdColumn}, false)
        Me.relationCharacter_ArmorClass.Nested = true
        Me.Relations.Add(Me.relationCharacter_ArmorClass)
        Me.relationCharacter_SavingThrows = New DataRelation("Character_SavingThrows", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSavingThrows.Character_IdColumn}, false)
        Me.relationCharacter_SavingThrows.Nested = true
        Me.Relations.Add(Me.relationCharacter_SavingThrows)
        Me.relationCharacter_AbilityScores = New DataRelation("Character_AbilityScores", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableAbilityScores.Character_IdColumn}, false)
        Me.relationCharacter_AbilityScores.Nested = true
        Me.Relations.Add(Me.relationCharacter_AbilityScores)
        Me.relationCharacter_PsiLikeAbilities = New DataRelation("Character_PsiLikeAbilities", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tablePsiLikeAbilities.Character_IdColumn}, false)
        Me.relationCharacter_PsiLikeAbilities.Nested = true
        Me.Relations.Add(Me.relationCharacter_PsiLikeAbilities)
        Me.relationCharacter_SpellLikeAbilities = New DataRelation("Character_SpellLikeAbilities", New DataColumn() {Me.tableCharacter.Character_IdColumn}, New DataColumn() {Me.tableSpellLikeAbilities.Character_IdColumn}, false)
        Me.relationCharacter_SpellLikeAbilities.Nested = true
        Me.Relations.Add(Me.relationCharacter_SpellLikeAbilities)
    End Sub
    
    Private Function ShouldSerializeCharacter() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSubtypes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSubtype() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeClasses() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_Class() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeResistances() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeResistance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAttacks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAttack() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryExtraDamage() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryAbility() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryDamageResistance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryCondition() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryConditionalModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryConditionalExtraDamage() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryConditionalAbility() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePrimaryConditionalDamageResistance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryExtraDamage() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryAbility() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryDamageResistance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryCondition() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryConditionalModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryConditionalExtraDamage() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryConditionalAbility() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSecondaryConditionalDamageResistance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBuckler() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBucklerDamageResistance() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBucklerModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBucklerAbility() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSkills() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSkill() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLanguages() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLanguage() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCoreModifiers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCoreModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAttackModifiers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAttackModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDefenseModifiers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDefenseModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSkillModifiers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSkillModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMagicModifiers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMagicModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFeats() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFeat() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFeatures() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFeature() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInventory() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInventoryItem() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAssets() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAssetItem() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpellCasterInfo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCasterClass() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpellsPerDay() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeClassSPD() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpecialistSPD() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDomainSPD() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpellSaves() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpellsKnown() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMemorizedSpells() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMemorizedSpell() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDomains() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDomain() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpecialistSchools() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpecialistSchool() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProhibitedSchools() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProhibitedSchool() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpells() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeClassSpells() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpell() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeManifesterInfo() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeManifesterClass() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePowerSaves() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePowers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeClassPowers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePower() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePsionicSpecializations() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePsionicSpecialization() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePsionicModifiers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePsionicModifier() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeArmorClass() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSavingThrows() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSavingThrow() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAbilityScores() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAbilityScore() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePsiLikeAbilities() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePsiLikeAbility() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAbilityPower() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpellLikeAbilities() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSpellLikeAbility() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAbilitySpell() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CharacterRowChangeEventHandler(ByVal sender As Object, ByVal e As CharacterRowChangeEvent)
    
    Public Delegate Sub SubtypesRowChangeEventHandler(ByVal sender As Object, ByVal e As SubtypesRowChangeEvent)
    
    Public Delegate Sub SubtypeRowChangeEventHandler(ByVal sender As Object, ByVal e As SubtypeRowChangeEvent)
    
    Public Delegate Sub ClassesRowChangeEventHandler(ByVal sender As Object, ByVal e As ClassesRowChangeEvent)
    
    Public Delegate Sub _ClassRowChangeEventHandler(ByVal sender As Object, ByVal e As _ClassRowChangeEvent)
    
    Public Delegate Sub ResistancesRowChangeEventHandler(ByVal sender As Object, ByVal e As ResistancesRowChangeEvent)
    
    Public Delegate Sub ResistanceRowChangeEventHandler(ByVal sender As Object, ByVal e As ResistanceRowChangeEvent)
    
    Public Delegate Sub AttacksRowChangeEventHandler(ByVal sender As Object, ByVal e As AttacksRowChangeEvent)
    
    Public Delegate Sub AttackRowChangeEventHandler(ByVal sender As Object, ByVal e As AttackRowChangeEvent)
    
    Public Delegate Sub PrimaryRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryRowChangeEvent)
    
    Public Delegate Sub PrimaryExtraDamageRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryExtraDamageRowChangeEvent)
    
    Public Delegate Sub PrimaryAbilityRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryAbilityRowChangeEvent)
    
    Public Delegate Sub PrimaryModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryModifierRowChangeEvent)
    
    Public Delegate Sub PrimaryDamageResistanceRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryDamageResistanceRowChangeEvent)
    
    Public Delegate Sub PrimaryConditionRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryConditionRowChangeEvent)
    
    Public Delegate Sub PrimaryConditionalModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryConditionalModifierRowChangeEvent)
    
    Public Delegate Sub PrimaryConditionalExtraDamageRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryConditionalExtraDamageRowChangeEvent)
    
    Public Delegate Sub PrimaryConditionalAbilityRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryConditionalAbilityRowChangeEvent)
    
    Public Delegate Sub PrimaryConditionalDamageResistanceRowChangeEventHandler(ByVal sender As Object, ByVal e As PrimaryConditionalDamageResistanceRowChangeEvent)
    
    Public Delegate Sub SecondaryRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryRowChangeEvent)
    
    Public Delegate Sub SecondaryExtraDamageRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryExtraDamageRowChangeEvent)
    
    Public Delegate Sub SecondaryAbilityRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryAbilityRowChangeEvent)
    
    Public Delegate Sub SecondaryModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryModifierRowChangeEvent)
    
    Public Delegate Sub SecondaryDamageResistanceRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryDamageResistanceRowChangeEvent)
    
    Public Delegate Sub SecondaryConditionRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryConditionRowChangeEvent)
    
    Public Delegate Sub SecondaryConditionalModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryConditionalModifierRowChangeEvent)
    
    Public Delegate Sub SecondaryConditionalExtraDamageRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryConditionalExtraDamageRowChangeEvent)
    
    Public Delegate Sub SecondaryConditionalAbilityRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryConditionalAbilityRowChangeEvent)
    
    Public Delegate Sub SecondaryConditionalDamageResistanceRowChangeEventHandler(ByVal sender As Object, ByVal e As SecondaryConditionalDamageResistanceRowChangeEvent)
    
    Public Delegate Sub BucklerRowChangeEventHandler(ByVal sender As Object, ByVal e As BucklerRowChangeEvent)
    
    Public Delegate Sub BucklerDamageResistanceRowChangeEventHandler(ByVal sender As Object, ByVal e As BucklerDamageResistanceRowChangeEvent)
    
    Public Delegate Sub BucklerModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As BucklerModifierRowChangeEvent)
    
    Public Delegate Sub BucklerAbilityRowChangeEventHandler(ByVal sender As Object, ByVal e As BucklerAbilityRowChangeEvent)
    
    Public Delegate Sub SkillsRowChangeEventHandler(ByVal sender As Object, ByVal e As SkillsRowChangeEvent)
    
    Public Delegate Sub SkillRowChangeEventHandler(ByVal sender As Object, ByVal e As SkillRowChangeEvent)
    
    Public Delegate Sub LanguagesRowChangeEventHandler(ByVal sender As Object, ByVal e As LanguagesRowChangeEvent)
    
    Public Delegate Sub LanguageRowChangeEventHandler(ByVal sender As Object, ByVal e As LanguageRowChangeEvent)
    
    Public Delegate Sub CoreModifiersRowChangeEventHandler(ByVal sender As Object, ByVal e As CoreModifiersRowChangeEvent)
    
    Public Delegate Sub CoreModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As CoreModifierRowChangeEvent)
    
    Public Delegate Sub AttackModifiersRowChangeEventHandler(ByVal sender As Object, ByVal e As AttackModifiersRowChangeEvent)
    
    Public Delegate Sub AttackModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As AttackModifierRowChangeEvent)
    
    Public Delegate Sub DefenseModifiersRowChangeEventHandler(ByVal sender As Object, ByVal e As DefenseModifiersRowChangeEvent)
    
    Public Delegate Sub DefenseModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As DefenseModifierRowChangeEvent)
    
    Public Delegate Sub SkillModifiersRowChangeEventHandler(ByVal sender As Object, ByVal e As SkillModifiersRowChangeEvent)
    
    Public Delegate Sub SkillModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As SkillModifierRowChangeEvent)
    
    Public Delegate Sub MagicModifiersRowChangeEventHandler(ByVal sender As Object, ByVal e As MagicModifiersRowChangeEvent)
    
    Public Delegate Sub MagicModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As MagicModifierRowChangeEvent)
    
    Public Delegate Sub FeatsRowChangeEventHandler(ByVal sender As Object, ByVal e As FeatsRowChangeEvent)
    
    Public Delegate Sub FeatRowChangeEventHandler(ByVal sender As Object, ByVal e As FeatRowChangeEvent)
    
    Public Delegate Sub FeaturesRowChangeEventHandler(ByVal sender As Object, ByVal e As FeaturesRowChangeEvent)
    
    Public Delegate Sub FeatureRowChangeEventHandler(ByVal sender As Object, ByVal e As FeatureRowChangeEvent)
    
    Public Delegate Sub InventoryRowChangeEventHandler(ByVal sender As Object, ByVal e As InventoryRowChangeEvent)
    
    Public Delegate Sub InventoryItemRowChangeEventHandler(ByVal sender As Object, ByVal e As InventoryItemRowChangeEvent)
    
    Public Delegate Sub AssetsRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetsRowChangeEvent)
    
    Public Delegate Sub AssetItemRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetItemRowChangeEvent)
    
    Public Delegate Sub SpellCasterInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellCasterInfoRowChangeEvent)
    
    Public Delegate Sub CasterClassRowChangeEventHandler(ByVal sender As Object, ByVal e As CasterClassRowChangeEvent)
    
    Public Delegate Sub SpellsPerDayRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellsPerDayRowChangeEvent)
    
    Public Delegate Sub ClassSPDRowChangeEventHandler(ByVal sender As Object, ByVal e As ClassSPDRowChangeEvent)
    
    Public Delegate Sub SpecialistSPDRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecialistSPDRowChangeEvent)
    
    Public Delegate Sub DomainSPDRowChangeEventHandler(ByVal sender As Object, ByVal e As DomainSPDRowChangeEvent)
    
    Public Delegate Sub SpellSavesRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellSavesRowChangeEvent)
    
    Public Delegate Sub SpellsKnownRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellsKnownRowChangeEvent)
    
    Public Delegate Sub MemorizedSpellsRowChangeEventHandler(ByVal sender As Object, ByVal e As MemorizedSpellsRowChangeEvent)
    
    Public Delegate Sub MemorizedSpellRowChangeEventHandler(ByVal sender As Object, ByVal e As MemorizedSpellRowChangeEvent)
    
    Public Delegate Sub DomainsRowChangeEventHandler(ByVal sender As Object, ByVal e As DomainsRowChangeEvent)
    
    Public Delegate Sub DomainRowChangeEventHandler(ByVal sender As Object, ByVal e As DomainRowChangeEvent)
    
    Public Delegate Sub SpecialistSchoolsRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecialistSchoolsRowChangeEvent)
    
    Public Delegate Sub SpecialistSchoolRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecialistSchoolRowChangeEvent)
    
    Public Delegate Sub ProhibitedSchoolsRowChangeEventHandler(ByVal sender As Object, ByVal e As ProhibitedSchoolsRowChangeEvent)
    
    Public Delegate Sub ProhibitedSchoolRowChangeEventHandler(ByVal sender As Object, ByVal e As ProhibitedSchoolRowChangeEvent)
    
    Public Delegate Sub SpellsRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellsRowChangeEvent)
    
    Public Delegate Sub ClassSpellsRowChangeEventHandler(ByVal sender As Object, ByVal e As ClassSpellsRowChangeEvent)
    
    Public Delegate Sub SpellRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellRowChangeEvent)
    
    Public Delegate Sub ManifesterInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As ManifesterInfoRowChangeEvent)
    
    Public Delegate Sub ManifesterClassRowChangeEventHandler(ByVal sender As Object, ByVal e As ManifesterClassRowChangeEvent)
    
    Public Delegate Sub PowerSavesRowChangeEventHandler(ByVal sender As Object, ByVal e As PowerSavesRowChangeEvent)
    
    Public Delegate Sub PowersRowChangeEventHandler(ByVal sender As Object, ByVal e As PowersRowChangeEvent)
    
    Public Delegate Sub ClassPowersRowChangeEventHandler(ByVal sender As Object, ByVal e As ClassPowersRowChangeEvent)
    
    Public Delegate Sub PowerRowChangeEventHandler(ByVal sender As Object, ByVal e As PowerRowChangeEvent)
    
    Public Delegate Sub PsionicSpecializationsRowChangeEventHandler(ByVal sender As Object, ByVal e As PsionicSpecializationsRowChangeEvent)
    
    Public Delegate Sub PsionicSpecializationRowChangeEventHandler(ByVal sender As Object, ByVal e As PsionicSpecializationRowChangeEvent)
    
    Public Delegate Sub PsionicModifiersRowChangeEventHandler(ByVal sender As Object, ByVal e As PsionicModifiersRowChangeEvent)
    
    Public Delegate Sub PsionicModifierRowChangeEventHandler(ByVal sender As Object, ByVal e As PsionicModifierRowChangeEvent)
    
    Public Delegate Sub ArmorClassRowChangeEventHandler(ByVal sender As Object, ByVal e As ArmorClassRowChangeEvent)
    
    Public Delegate Sub SavingThrowsRowChangeEventHandler(ByVal sender As Object, ByVal e As SavingThrowsRowChangeEvent)
    
    Public Delegate Sub SavingThrowRowChangeEventHandler(ByVal sender As Object, ByVal e As SavingThrowRowChangeEvent)
    
    Public Delegate Sub AbilityScoresRowChangeEventHandler(ByVal sender As Object, ByVal e As AbilityScoresRowChangeEvent)
    
    Public Delegate Sub AbilityScoreRowChangeEventHandler(ByVal sender As Object, ByVal e As AbilityScoreRowChangeEvent)
    
    Public Delegate Sub PsiLikeAbilitiesRowChangeEventHandler(ByVal sender As Object, ByVal e As PsiLikeAbilitiesRowChangeEvent)
    
    Public Delegate Sub PsiLikeAbilityRowChangeEventHandler(ByVal sender As Object, ByVal e As PsiLikeAbilityRowChangeEvent)
    
    Public Delegate Sub AbilityPowerRowChangeEventHandler(ByVal sender As Object, ByVal e As AbilityPowerRowChangeEvent)
    
    Public Delegate Sub SpellLikeAbilitiesRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellLikeAbilitiesRowChangeEvent)
    
    Public Delegate Sub SpellLikeAbilityRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellLikeAbilityRowChangeEvent)
    
    Public Delegate Sub AbilitySpellRowChangeEventHandler(ByVal sender As Object, ByVal e As AbilitySpellRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CharacterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCharacterName As DataColumn
        
        Private columnPlayerName As DataColumn
        
        Private columnPortrait As DataColumn
        
        Private columnRace As DataColumn
        
        Private columnType As DataColumn
        
        Private columnFullType As DataColumn
        
        Private columnAlignment As DataColumn
        
        Private columnLevel As DataColumn
        
        Private columnXP As DataColumn
        
        Private columnNextLevel As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnAge As DataColumn
        
        Private columnHeight As DataColumn
        
        Private columnWeight As DataColumn
        
        Private columnSize As DataColumn
        
        Private columnSpace As DataColumn
        
        Private columnReach As DataColumn
        
        Private columnDeity As DataColumn
        
        Private columnSTR As DataColumn
        
        Private columnSTRMod As DataColumn
        
        Private columnDEX As DataColumn
        
        Private columnDEXMod As DataColumn
        
        Private columnCON As DataColumn
        
        Private columnCONMod As DataColumn
        
        Private columnINT As DataColumn
        
        Private columnINTMod As DataColumn
        
        Private columnWIS As DataColumn
        
        Private columnWISMod As DataColumn
        
        Private columnCHA As DataColumn
        
        Private columnCHAMod As DataColumn
        
        Private columnFortitude As DataColumn
        
        Private columnReflex As DataColumn
        
        Private columnWill As DataColumn
        
        Private columnSpeed As DataColumn
        
        Private columnRunMultiplier As DataColumn
        
        Private columnBaseSpeed As DataColumn
        
        Private columnBaseRunMultiplier As DataColumn
        
        Private columnFly As DataColumn
        
        Private columnClimb As DataColumn
        
        Private columnSwim As DataColumn
        
        Private columnBurrow As DataColumn
        
        Private columnAC As DataColumn
        
        Private columnACTouch As DataColumn
        
        Private columnACFlatfooted As DataColumn
        
        Private columnACHelpless As DataColumn
        
        Private columnArmor As DataColumn
        
        Private columnShield As DataColumn
        
        Private columnArmorMaxDex As DataColumn
        
        Private columnShieldMaxDex As DataColumn
        
        Private columnArmorCheckPenalty As DataColumn
        
        Private columnShieldCheckPenalty As DataColumn
        
        Private columnEncumbranceCheckPenalty As DataColumn
        
        Private columnSpellFailureArmor As DataColumn
        
        Private columnSpellFailureShield As DataColumn
        
        Private columnSR As DataColumn
        
        Private columnPR As DataColumn
        
        Private columnDR As DataColumn
        
        Private columnHP As DataColumn
        
        Private columnCurrentHP As DataColumn
        
        Private columnBAB1 As DataColumn
        
        Private columnBAB2 As DataColumn
        
        Private columnBAB3 As DataColumn
        
        Private columnBAB4 As DataColumn
        
        Private columnMelee As DataColumn
        
        Private columnRanged As DataColumn
        
        Private columnGrapple As DataColumn
        
        Private columnInitiative As DataColumn
        
        Private columnMoney As DataColumn
        
        Private columnAssetsValue As DataColumn
        
        Private columnInventoryWeight As DataColumn
        
        Private columnCurrentLoad As DataColumn
        
        Private columnLoadInfo As DataColumn
        
        Private columnLightLoadInfo As DataColumn
        
        Private columnMediumLoadInfo As DataColumn
        
        Private columnHeavyLoadInfo As DataColumn
        
        Private columnMediumLoadMaxDex As DataColumn
        
        Private columnMediumLoadCheckPenalty As DataColumn
        
        Private columnMediumLoadSpeed As DataColumn
        
        Private columnMediumLoadRun As DataColumn
        
        Private columnHeavyLoadMaxDex As DataColumn
        
        Private columnHeavyLoadCheckPenalty As DataColumn
        
        Private columnHeavyLoadSpeed As DataColumn
        
        Private columnHeavyLoadRun As DataColumn
        
        Private columnNotes As DataColumn
        
        Private columnBackground As DataColumn
        
        Private columnCoinWeight As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Character")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property CharacterNameColumn As DataColumn
            Get
                Return Me.columnCharacterName
            End Get
        End Property
        
        Public ReadOnly Property PlayerNameColumn As DataColumn
            Get
                Return Me.columnPlayerName
            End Get
        End Property
        
        Public ReadOnly Property PortraitColumn As DataColumn
            Get
                Return Me.columnPortrait
            End Get
        End Property
        
        Public ReadOnly Property RaceColumn As DataColumn
            Get
                Return Me.columnRace
            End Get
        End Property
        
        Public ReadOnly Property TypeColumn As DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        Public ReadOnly Property FullTypeColumn As DataColumn
            Get
                Return Me.columnFullType
            End Get
        End Property
        
        Public ReadOnly Property AlignmentColumn As DataColumn
            Get
                Return Me.columnAlignment
            End Get
        End Property
        
        Public ReadOnly Property LevelColumn As DataColumn
            Get
                Return Me.columnLevel
            End Get
        End Property
        
        Public ReadOnly Property XPColumn As DataColumn
            Get
                Return Me.columnXP
            End Get
        End Property
        
        Public ReadOnly Property NextLevelColumn As DataColumn
            Get
                Return Me.columnNextLevel
            End Get
        End Property
        
        Public ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Public ReadOnly Property AgeColumn As DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        Public ReadOnly Property HeightColumn As DataColumn
            Get
                Return Me.columnHeight
            End Get
        End Property
        
        Public ReadOnly Property WeightColumn As DataColumn
            Get
                Return Me.columnWeight
            End Get
        End Property
        
        Public ReadOnly Property SizeColumn As DataColumn
            Get
                Return Me.columnSize
            End Get
        End Property
        
        Public ReadOnly Property SpaceColumn As DataColumn
            Get
                Return Me.columnSpace
            End Get
        End Property
        
        Public ReadOnly Property ReachColumn As DataColumn
            Get
                Return Me.columnReach
            End Get
        End Property
        
        Public ReadOnly Property DeityColumn As DataColumn
            Get
                Return Me.columnDeity
            End Get
        End Property
        
        Public ReadOnly Property STRColumn As DataColumn
            Get
                Return Me.columnSTR
            End Get
        End Property
        
        Public ReadOnly Property STRModColumn As DataColumn
            Get
                Return Me.columnSTRMod
            End Get
        End Property
        
        Public ReadOnly Property DEXColumn As DataColumn
            Get
                Return Me.columnDEX
            End Get
        End Property
        
        Public ReadOnly Property DEXModColumn As DataColumn
            Get
                Return Me.columnDEXMod
            End Get
        End Property
        
        Public ReadOnly Property CONColumn As DataColumn
            Get
                Return Me.columnCON
            End Get
        End Property
        
        Public ReadOnly Property CONModColumn As DataColumn
            Get
                Return Me.columnCONMod
            End Get
        End Property
        
        Public ReadOnly Property INTColumn As DataColumn
            Get
                Return Me.columnINT
            End Get
        End Property
        
        Public ReadOnly Property INTModColumn As DataColumn
            Get
                Return Me.columnINTMod
            End Get
        End Property
        
        Public ReadOnly Property WISColumn As DataColumn
            Get
                Return Me.columnWIS
            End Get
        End Property
        
        Public ReadOnly Property WISModColumn As DataColumn
            Get
                Return Me.columnWISMod
            End Get
        End Property
        
        Public ReadOnly Property CHAColumn As DataColumn
            Get
                Return Me.columnCHA
            End Get
        End Property
        
        Public ReadOnly Property CHAModColumn As DataColumn
            Get
                Return Me.columnCHAMod
            End Get
        End Property
        
        Public ReadOnly Property FortitudeColumn As DataColumn
            Get
                Return Me.columnFortitude
            End Get
        End Property
        
        Public ReadOnly Property ReflexColumn As DataColumn
            Get
                Return Me.columnReflex
            End Get
        End Property
        
        Public ReadOnly Property WillColumn As DataColumn
            Get
                Return Me.columnWill
            End Get
        End Property
        
        Public ReadOnly Property SpeedColumn As DataColumn
            Get
                Return Me.columnSpeed
            End Get
        End Property
        
        Public ReadOnly Property RunMultiplierColumn As DataColumn
            Get
                Return Me.columnRunMultiplier
            End Get
        End Property
        
        Public ReadOnly Property BaseSpeedColumn As DataColumn
            Get
                Return Me.columnBaseSpeed
            End Get
        End Property
        
        Public ReadOnly Property BaseRunMultiplierColumn As DataColumn
            Get
                Return Me.columnBaseRunMultiplier
            End Get
        End Property
        
        Public ReadOnly Property FlyColumn As DataColumn
            Get
                Return Me.columnFly
            End Get
        End Property
        
        Public ReadOnly Property ClimbColumn As DataColumn
            Get
                Return Me.columnClimb
            End Get
        End Property
        
        Public ReadOnly Property SwimColumn As DataColumn
            Get
                Return Me.columnSwim
            End Get
        End Property
        
        Public ReadOnly Property BurrowColumn As DataColumn
            Get
                Return Me.columnBurrow
            End Get
        End Property
        
        Public ReadOnly Property ACColumn As DataColumn
            Get
                Return Me.columnAC
            End Get
        End Property
        
        Public ReadOnly Property ACTouchColumn As DataColumn
            Get
                Return Me.columnACTouch
            End Get
        End Property
        
        Public ReadOnly Property ACFlatfootedColumn As DataColumn
            Get
                Return Me.columnACFlatfooted
            End Get
        End Property
        
        Public ReadOnly Property ACHelplessColumn As DataColumn
            Get
                Return Me.columnACHelpless
            End Get
        End Property
        
        Public ReadOnly Property ArmorColumn As DataColumn
            Get
                Return Me.columnArmor
            End Get
        End Property
        
        Public ReadOnly Property ShieldColumn As DataColumn
            Get
                Return Me.columnShield
            End Get
        End Property
        
        Public ReadOnly Property ArmorMaxDexColumn As DataColumn
            Get
                Return Me.columnArmorMaxDex
            End Get
        End Property
        
        Public ReadOnly Property ShieldMaxDexColumn As DataColumn
            Get
                Return Me.columnShieldMaxDex
            End Get
        End Property
        
        Public ReadOnly Property ArmorCheckPenaltyColumn As DataColumn
            Get
                Return Me.columnArmorCheckPenalty
            End Get
        End Property
        
        Public ReadOnly Property ShieldCheckPenaltyColumn As DataColumn
            Get
                Return Me.columnShieldCheckPenalty
            End Get
        End Property
        
        Public ReadOnly Property EncumbranceCheckPenaltyColumn As DataColumn
            Get
                Return Me.columnEncumbranceCheckPenalty
            End Get
        End Property
        
        Public ReadOnly Property SpellFailureArmorColumn As DataColumn
            Get
                Return Me.columnSpellFailureArmor
            End Get
        End Property
        
        Public ReadOnly Property SpellFailureShieldColumn As DataColumn
            Get
                Return Me.columnSpellFailureShield
            End Get
        End Property
        
        Public ReadOnly Property SRColumn As DataColumn
            Get
                Return Me.columnSR
            End Get
        End Property
        
        Public ReadOnly Property PRColumn As DataColumn
            Get
                Return Me.columnPR
            End Get
        End Property
        
        Public ReadOnly Property DRColumn As DataColumn
            Get
                Return Me.columnDR
            End Get
        End Property
        
        Public ReadOnly Property HPColumn As DataColumn
            Get
                Return Me.columnHP
            End Get
        End Property
        
        Public ReadOnly Property CurrentHPColumn As DataColumn
            Get
                Return Me.columnCurrentHP
            End Get
        End Property
        
        Public ReadOnly Property BAB1Column As DataColumn
            Get
                Return Me.columnBAB1
            End Get
        End Property
        
        Public ReadOnly Property BAB2Column As DataColumn
            Get
                Return Me.columnBAB2
            End Get
        End Property
        
        Public ReadOnly Property BAB3Column As DataColumn
            Get
                Return Me.columnBAB3
            End Get
        End Property
        
        Public ReadOnly Property BAB4Column As DataColumn
            Get
                Return Me.columnBAB4
            End Get
        End Property
        
        Public ReadOnly Property MeleeColumn As DataColumn
            Get
                Return Me.columnMelee
            End Get
        End Property
        
        Public ReadOnly Property RangedColumn As DataColumn
            Get
                Return Me.columnRanged
            End Get
        End Property
        
        Public ReadOnly Property GrappleColumn As DataColumn
            Get
                Return Me.columnGrapple
            End Get
        End Property
        
        Public ReadOnly Property InitiativeColumn As DataColumn
            Get
                Return Me.columnInitiative
            End Get
        End Property
        
        Public ReadOnly Property MoneyColumn As DataColumn
            Get
                Return Me.columnMoney
            End Get
        End Property
        
        Public ReadOnly Property AssetsValueColumn As DataColumn
            Get
                Return Me.columnAssetsValue
            End Get
        End Property
        
        Public ReadOnly Property InventoryWeightColumn As DataColumn
            Get
                Return Me.columnInventoryWeight
            End Get
        End Property
        
        Public ReadOnly Property CurrentLoadColumn As DataColumn
            Get
                Return Me.columnCurrentLoad
            End Get
        End Property
        
        Public ReadOnly Property LoadInfoColumn As DataColumn
            Get
                Return Me.columnLoadInfo
            End Get
        End Property
        
        Public ReadOnly Property LightLoadInfoColumn As DataColumn
            Get
                Return Me.columnLightLoadInfo
            End Get
        End Property
        
        Public ReadOnly Property MediumLoadInfoColumn As DataColumn
            Get
                Return Me.columnMediumLoadInfo
            End Get
        End Property
        
        Public ReadOnly Property HeavyLoadInfoColumn As DataColumn
            Get
                Return Me.columnHeavyLoadInfo
            End Get
        End Property
        
        Public ReadOnly Property MediumLoadMaxDexColumn As DataColumn
            Get
                Return Me.columnMediumLoadMaxDex
            End Get
        End Property
        
        Public ReadOnly Property MediumLoadCheckPenaltyColumn As DataColumn
            Get
                Return Me.columnMediumLoadCheckPenalty
            End Get
        End Property
        
        Public ReadOnly Property MediumLoadSpeedColumn As DataColumn
            Get
                Return Me.columnMediumLoadSpeed
            End Get
        End Property
        
        Public ReadOnly Property MediumLoadRunColumn As DataColumn
            Get
                Return Me.columnMediumLoadRun
            End Get
        End Property
        
        Public ReadOnly Property HeavyLoadMaxDexColumn As DataColumn
            Get
                Return Me.columnHeavyLoadMaxDex
            End Get
        End Property
        
        Public ReadOnly Property HeavyLoadCheckPenaltyColumn As DataColumn
            Get
                Return Me.columnHeavyLoadCheckPenalty
            End Get
        End Property
        
        Public ReadOnly Property HeavyLoadSpeedColumn As DataColumn
            Get
                Return Me.columnHeavyLoadSpeed
            End Get
        End Property
        
        Public ReadOnly Property HeavyLoadRunColumn As DataColumn
            Get
                Return Me.columnHeavyLoadRun
            End Get
        End Property
        
        Public ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Public ReadOnly Property BackgroundColumn As DataColumn
            Get
                Return Me.columnBackground
            End Get
        End Property
        
        Public ReadOnly Property CoinWeightColumn As DataColumn
            Get
                Return Me.columnCoinWeight
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CharacterRow
            Get
                Return CType(Me.Rows(index),CharacterRow)
            End Get
        End Property
        
        Public Event CharacterRowChanged As CharacterRowChangeEventHandler
        
        Public Event CharacterRowChanging As CharacterRowChangeEventHandler
        
        Public Event CharacterRowDeleted As CharacterRowChangeEventHandler
        
        Public Event CharacterRowDeleting As CharacterRowChangeEventHandler
        
        Public Overloads Sub AddCharacterRow(ByVal row As CharacterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCharacterRow( _
                    ByVal CharacterName As String,  _
                    ByVal PlayerName As String,  _
                    ByVal Portrait As String,  _
                    ByVal Race As String,  _
                    ByVal Type As String,  _
                    ByVal FullType As String,  _
                    ByVal Alignment As String,  _
                    ByVal Level As String,  _
                    ByVal XP As String,  _
                    ByVal NextLevel As String,  _
                    ByVal Gender As String,  _
                    ByVal Age As String,  _
                    ByVal Height As String,  _
                    ByVal Weight As String,  _
                    ByVal Size As String,  _
                    ByVal Space As String,  _
                    ByVal Reach As String,  _
                    ByVal Deity As String,  _
                    ByVal STR As String,  _
                    ByVal STRMod As String,  _
                    ByVal DEX As String,  _
                    ByVal DEXMod As String,  _
                    ByVal CON As String,  _
                    ByVal CONMod As String,  _
                    ByVal INT As String,  _
                    ByVal INTMod As String,  _
                    ByVal WIS As String,  _
                    ByVal WISMod As String,  _
                    ByVal CHA As String,  _
                    ByVal CHAMod As String,  _
                    ByVal Fortitude As String,  _
                    ByVal Reflex As String,  _
                    ByVal Will As String,  _
                    ByVal Speed As String,  _
                    ByVal RunMultiplier As String,  _
                    ByVal BaseSpeed As String,  _
                    ByVal BaseRunMultiplier As String,  _
                    ByVal Fly As String,  _
                    ByVal Climb As String,  _
                    ByVal Swim As String,  _
                    ByVal Burrow As String,  _
                    ByVal AC As String,  _
                    ByVal ACTouch As String,  _
                    ByVal ACFlatfooted As String,  _
                    ByVal ACHelpless As String,  _
                    ByVal Armor As String,  _
                    ByVal Shield As String,  _
                    ByVal ArmorMaxDex As String,  _
                    ByVal ShieldMaxDex As String,  _
                    ByVal ArmorCheckPenalty As String,  _
                    ByVal ShieldCheckPenalty As String,  _
                    ByVal EncumbranceCheckPenalty As String,  _
                    ByVal SpellFailureArmor As String,  _
                    ByVal SpellFailureShield As String,  _
                    ByVal SR As String,  _
                    ByVal PR As String,  _
                    ByVal DR As String,  _
                    ByVal HP As String,  _
                    ByVal CurrentHP As String,  _
                    ByVal BAB1 As String,  _
                    ByVal BAB2 As String,  _
                    ByVal BAB3 As String,  _
                    ByVal BAB4 As String,  _
                    ByVal Melee As String,  _
                    ByVal Ranged As String,  _
                    ByVal Grapple As String,  _
                    ByVal Initiative As String,  _
                    ByVal Money As String,  _
                    ByVal AssetsValue As String,  _
                    ByVal InventoryWeight As String,  _
                    ByVal CurrentLoad As String,  _
                    ByVal LoadInfo As String,  _
                    ByVal LightLoadInfo As String,  _
                    ByVal MediumLoadInfo As String,  _
                    ByVal HeavyLoadInfo As String,  _
                    ByVal MediumLoadMaxDex As String,  _
                    ByVal MediumLoadCheckPenalty As String,  _
                    ByVal MediumLoadSpeed As String,  _
                    ByVal MediumLoadRun As String,  _
                    ByVal HeavyLoadMaxDex As String,  _
                    ByVal HeavyLoadCheckPenalty As String,  _
                    ByVal HeavyLoadSpeed As String,  _
                    ByVal HeavyLoadRun As String,  _
                    ByVal Notes As String,  _
                    ByVal Background As String,  _
                    ByVal CoinWeight As String) As CharacterRow
            Dim rowCharacterRow As CharacterRow = CType(Me.NewRow,CharacterRow)
            rowCharacterRow.ItemArray = New Object() {CharacterName, PlayerName, Portrait, Race, Type, FullType, Alignment, Level, XP, NextLevel, Gender, Age, Height, Weight, Size, Space, Reach, Deity, STR, STRMod, DEX, DEXMod, CON, CONMod, INT, INTMod, WIS, WISMod, CHA, CHAMod, Fortitude, Reflex, Will, Speed, RunMultiplier, BaseSpeed, BaseRunMultiplier, Fly, Climb, Swim, Burrow, AC, ACTouch, ACFlatfooted, ACHelpless, Armor, Shield, ArmorMaxDex, ShieldMaxDex, ArmorCheckPenalty, ShieldCheckPenalty, EncumbranceCheckPenalty, SpellFailureArmor, SpellFailureShield, SR, PR, DR, HP, CurrentHP, BAB1, BAB2, BAB3, BAB4, Melee, Ranged, Grapple, Initiative, Money, AssetsValue, InventoryWeight, CurrentLoad, LoadInfo, LightLoadInfo, MediumLoadInfo, HeavyLoadInfo, MediumLoadMaxDex, MediumLoadCheckPenalty, MediumLoadSpeed, MediumLoadRun, HeavyLoadMaxDex, HeavyLoadCheckPenalty, HeavyLoadSpeed, HeavyLoadRun, Notes, Background, CoinWeight, Nothing}
            Me.Rows.Add(rowCharacterRow)
            Return rowCharacterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CharacterDataTable = CType(MyBase.Clone,CharacterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CharacterDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnCharacterName = Me.Columns("CharacterName")
            Me.columnPlayerName = Me.Columns("PlayerName")
            Me.columnPortrait = Me.Columns("Portrait")
            Me.columnRace = Me.Columns("Race")
            Me.columnType = Me.Columns("Type")
            Me.columnFullType = Me.Columns("FullType")
            Me.columnAlignment = Me.Columns("Alignment")
            Me.columnLevel = Me.Columns("Level")
            Me.columnXP = Me.Columns("XP")
            Me.columnNextLevel = Me.Columns("NextLevel")
            Me.columnGender = Me.Columns("Gender")
            Me.columnAge = Me.Columns("Age")
            Me.columnHeight = Me.Columns("Height")
            Me.columnWeight = Me.Columns("Weight")
            Me.columnSize = Me.Columns("Size")
            Me.columnSpace = Me.Columns("Space")
            Me.columnReach = Me.Columns("Reach")
            Me.columnDeity = Me.Columns("Deity")
            Me.columnSTR = Me.Columns("STR")
            Me.columnSTRMod = Me.Columns("STRMod")
            Me.columnDEX = Me.Columns("DEX")
            Me.columnDEXMod = Me.Columns("DEXMod")
            Me.columnCON = Me.Columns("CON")
            Me.columnCONMod = Me.Columns("CONMod")
            Me.columnINT = Me.Columns("INT")
            Me.columnINTMod = Me.Columns("INTMod")
            Me.columnWIS = Me.Columns("WIS")
            Me.columnWISMod = Me.Columns("WISMod")
            Me.columnCHA = Me.Columns("CHA")
            Me.columnCHAMod = Me.Columns("CHAMod")
            Me.columnFortitude = Me.Columns("Fortitude")
            Me.columnReflex = Me.Columns("Reflex")
            Me.columnWill = Me.Columns("Will")
            Me.columnSpeed = Me.Columns("Speed")
            Me.columnRunMultiplier = Me.Columns("RunMultiplier")
            Me.columnBaseSpeed = Me.Columns("BaseSpeed")
            Me.columnBaseRunMultiplier = Me.Columns("BaseRunMultiplier")
            Me.columnFly = Me.Columns("Fly")
            Me.columnClimb = Me.Columns("Climb")
            Me.columnSwim = Me.Columns("Swim")
            Me.columnBurrow = Me.Columns("Burrow")
            Me.columnAC = Me.Columns("AC")
            Me.columnACTouch = Me.Columns("ACTouch")
            Me.columnACFlatfooted = Me.Columns("ACFlatfooted")
            Me.columnACHelpless = Me.Columns("ACHelpless")
            Me.columnArmor = Me.Columns("Armor")
            Me.columnShield = Me.Columns("Shield")
            Me.columnArmorMaxDex = Me.Columns("ArmorMaxDex")
            Me.columnShieldMaxDex = Me.Columns("ShieldMaxDex")
            Me.columnArmorCheckPenalty = Me.Columns("ArmorCheckPenalty")
            Me.columnShieldCheckPenalty = Me.Columns("ShieldCheckPenalty")
            Me.columnEncumbranceCheckPenalty = Me.Columns("EncumbranceCheckPenalty")
            Me.columnSpellFailureArmor = Me.Columns("SpellFailureArmor")
            Me.columnSpellFailureShield = Me.Columns("SpellFailureShield")
            Me.columnSR = Me.Columns("SR")
            Me.columnPR = Me.Columns("PR")
            Me.columnDR = Me.Columns("DR")
            Me.columnHP = Me.Columns("HP")
            Me.columnCurrentHP = Me.Columns("CurrentHP")
            Me.columnBAB1 = Me.Columns("BAB1")
            Me.columnBAB2 = Me.Columns("BAB2")
            Me.columnBAB3 = Me.Columns("BAB3")
            Me.columnBAB4 = Me.Columns("BAB4")
            Me.columnMelee = Me.Columns("Melee")
            Me.columnRanged = Me.Columns("Ranged")
            Me.columnGrapple = Me.Columns("Grapple")
            Me.columnInitiative = Me.Columns("Initiative")
            Me.columnMoney = Me.Columns("Money")
            Me.columnAssetsValue = Me.Columns("AssetsValue")
            Me.columnInventoryWeight = Me.Columns("InventoryWeight")
            Me.columnCurrentLoad = Me.Columns("CurrentLoad")
            Me.columnLoadInfo = Me.Columns("LoadInfo")
            Me.columnLightLoadInfo = Me.Columns("LightLoadInfo")
            Me.columnMediumLoadInfo = Me.Columns("MediumLoadInfo")
            Me.columnHeavyLoadInfo = Me.Columns("HeavyLoadInfo")
            Me.columnMediumLoadMaxDex = Me.Columns("MediumLoadMaxDex")
            Me.columnMediumLoadCheckPenalty = Me.Columns("MediumLoadCheckPenalty")
            Me.columnMediumLoadSpeed = Me.Columns("MediumLoadSpeed")
            Me.columnMediumLoadRun = Me.Columns("MediumLoadRun")
            Me.columnHeavyLoadMaxDex = Me.Columns("HeavyLoadMaxDex")
            Me.columnHeavyLoadCheckPenalty = Me.Columns("HeavyLoadCheckPenalty")
            Me.columnHeavyLoadSpeed = Me.Columns("HeavyLoadSpeed")
            Me.columnHeavyLoadRun = Me.Columns("HeavyLoadRun")
            Me.columnNotes = Me.Columns("Notes")
            Me.columnBackground = Me.Columns("Background")
            Me.columnCoinWeight = Me.Columns("CoinWeight")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCharacterName = New DataColumn("CharacterName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharacterName)
            Me.columnPlayerName = New DataColumn("PlayerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlayerName)
            Me.columnPortrait = New DataColumn("Portrait", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPortrait)
            Me.columnRace = New DataColumn("Race", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRace)
            Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnType)
            Me.columnFullType = New DataColumn("FullType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullType)
            Me.columnAlignment = New DataColumn("Alignment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlignment)
            Me.columnLevel = New DataColumn("Level", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLevel)
            Me.columnXP = New DataColumn("XP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnXP)
            Me.columnNextLevel = New DataColumn("NextLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNextLevel)
            Me.columnGender = New DataColumn("Gender", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnAge = New DataColumn("Age", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAge)
            Me.columnHeight = New DataColumn("Height", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHeight)
            Me.columnWeight = New DataColumn("Weight", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeight)
            Me.columnSize = New DataColumn("Size", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSize)
            Me.columnSpace = New DataColumn("Space", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpace)
            Me.columnReach = New DataColumn("Reach", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReach)
            Me.columnDeity = New DataColumn("Deity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeity)
            Me.columnSTR = New DataColumn("STR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTR)
            Me.columnSTRMod = New DataColumn("STRMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTRMod)
            Me.columnDEX = New DataColumn("DEX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEX)
            Me.columnDEXMod = New DataColumn("DEXMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDEXMod)
            Me.columnCON = New DataColumn("CON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCON)
            Me.columnCONMod = New DataColumn("CONMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONMod)
            Me.columnINT = New DataColumn("INT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINT)
            Me.columnINTMod = New DataColumn("INTMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINTMod)
            Me.columnWIS = New DataColumn("WIS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWIS)
            Me.columnWISMod = New DataColumn("WISMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWISMod)
            Me.columnCHA = New DataColumn("CHA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHA)
            Me.columnCHAMod = New DataColumn("CHAMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHAMod)
            Me.columnFortitude = New DataColumn("Fortitude", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFortitude)
            Me.columnReflex = New DataColumn("Reflex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReflex)
            Me.columnWill = New DataColumn("Will", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWill)
            Me.columnSpeed = New DataColumn("Speed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpeed)
            Me.columnRunMultiplier = New DataColumn("RunMultiplier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRunMultiplier)
            Me.columnBaseSpeed = New DataColumn("BaseSpeed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseSpeed)
            Me.columnBaseRunMultiplier = New DataColumn("BaseRunMultiplier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseRunMultiplier)
            Me.columnFly = New DataColumn("Fly", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFly)
            Me.columnClimb = New DataColumn("Climb", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClimb)
            Me.columnSwim = New DataColumn("Swim", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSwim)
            Me.columnBurrow = New DataColumn("Burrow", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBurrow)
            Me.columnAC = New DataColumn("AC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAC)
            Me.columnACTouch = New DataColumn("ACTouch", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACTouch)
            Me.columnACFlatfooted = New DataColumn("ACFlatfooted", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACFlatfooted)
            Me.columnACHelpless = New DataColumn("ACHelpless", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACHelpless)
            Me.columnArmor = New DataColumn("Armor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmor)
            Me.columnShield = New DataColumn("Shield", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShield)
            Me.columnArmorMaxDex = New DataColumn("ArmorMaxDex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmorMaxDex)
            Me.columnShieldMaxDex = New DataColumn("ShieldMaxDex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShieldMaxDex)
            Me.columnArmorCheckPenalty = New DataColumn("ArmorCheckPenalty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmorCheckPenalty)
            Me.columnShieldCheckPenalty = New DataColumn("ShieldCheckPenalty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShieldCheckPenalty)
            Me.columnEncumbranceCheckPenalty = New DataColumn("EncumbranceCheckPenalty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEncumbranceCheckPenalty)
            Me.columnSpellFailureArmor = New DataColumn("SpellFailureArmor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellFailureArmor)
            Me.columnSpellFailureShield = New DataColumn("SpellFailureShield", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellFailureShield)
            Me.columnSR = New DataColumn("SR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSR)
            Me.columnPR = New DataColumn("PR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPR)
            Me.columnDR = New DataColumn("DR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDR)
            Me.columnHP = New DataColumn("HP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHP)
            Me.columnCurrentHP = New DataColumn("CurrentHP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurrentHP)
            Me.columnBAB1 = New DataColumn("BAB1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAB1)
            Me.columnBAB2 = New DataColumn("BAB2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAB2)
            Me.columnBAB3 = New DataColumn("BAB3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAB3)
            Me.columnBAB4 = New DataColumn("BAB4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBAB4)
            Me.columnMelee = New DataColumn("Melee", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMelee)
            Me.columnRanged = New DataColumn("Ranged", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRanged)
            Me.columnGrapple = New DataColumn("Grapple", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrapple)
            Me.columnInitiative = New DataColumn("Initiative", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInitiative)
            Me.columnMoney = New DataColumn("Money", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMoney)
            Me.columnAssetsValue = New DataColumn("AssetsValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssetsValue)
            Me.columnInventoryWeight = New DataColumn("InventoryWeight", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInventoryWeight)
            Me.columnCurrentLoad = New DataColumn("CurrentLoad", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurrentLoad)
            Me.columnLoadInfo = New DataColumn("LoadInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoadInfo)
            Me.columnLightLoadInfo = New DataColumn("LightLoadInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLightLoadInfo)
            Me.columnMediumLoadInfo = New DataColumn("MediumLoadInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMediumLoadInfo)
            Me.columnHeavyLoadInfo = New DataColumn("HeavyLoadInfo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHeavyLoadInfo)
            Me.columnMediumLoadMaxDex = New DataColumn("MediumLoadMaxDex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMediumLoadMaxDex)
            Me.columnMediumLoadCheckPenalty = New DataColumn("MediumLoadCheckPenalty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMediumLoadCheckPenalty)
            Me.columnMediumLoadSpeed = New DataColumn("MediumLoadSpeed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMediumLoadSpeed)
            Me.columnMediumLoadRun = New DataColumn("MediumLoadRun", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMediumLoadRun)
            Me.columnHeavyLoadMaxDex = New DataColumn("HeavyLoadMaxDex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHeavyLoadMaxDex)
            Me.columnHeavyLoadCheckPenalty = New DataColumn("HeavyLoadCheckPenalty", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHeavyLoadCheckPenalty)
            Me.columnHeavyLoadSpeed = New DataColumn("HeavyLoadSpeed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHeavyLoadSpeed)
            Me.columnHeavyLoadRun = New DataColumn("HeavyLoadRun", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHeavyLoadRun)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnBackground = New DataColumn("Background", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBackground)
            Me.columnCoinWeight = New DataColumn("CoinWeight", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCoinWeight)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCharacter_Id}, true))
            Me.columnCharacter_Id.AutoIncrement = true
            Me.columnCharacter_Id.AllowDBNull = false
            Me.columnCharacter_Id.Unique = true
        End Sub
        
        Public Function NewCharacterRow() As CharacterRow
            Return CType(Me.NewRow,CharacterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CharacterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CharacterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CharacterRowChangedEvent) Is Nothing) Then
                RaiseEvent CharacterRowChanged(Me, New CharacterRowChangeEvent(CType(e.Row,CharacterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CharacterRowChangingEvent) Is Nothing) Then
                RaiseEvent CharacterRowChanging(Me, New CharacterRowChangeEvent(CType(e.Row,CharacterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CharacterRowDeletedEvent) Is Nothing) Then
                RaiseEvent CharacterRowDeleted(Me, New CharacterRowChangeEvent(CType(e.Row,CharacterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CharacterRowDeletingEvent) Is Nothing) Then
                RaiseEvent CharacterRowDeleting(Me, New CharacterRowChangeEvent(CType(e.Row,CharacterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCharacterRow(ByVal row As CharacterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CharacterRow
        Inherits DataRow
        
        Private tableCharacter As CharacterDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCharacter = CType(Me.Table,CharacterDataTable)
        End Sub
        
        Public Property CharacterName As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.CharacterNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.CharacterNameColumn) = value
            End Set
        End Property
        
        Public Property PlayerName As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.PlayerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.PlayerNameColumn) = value
            End Set
        End Property
        
        Public Property Portrait As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.PortraitColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.PortraitColumn) = value
            End Set
        End Property
        
        Public Property Race As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.RaceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.RaceColumn) = value
            End Set
        End Property
        
        Public Property Type As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.TypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.TypeColumn) = value
            End Set
        End Property
        
        Public Property FullType As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.FullTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.FullTypeColumn) = value
            End Set
        End Property
        
        Public Property Alignment As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.AlignmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.AlignmentColumn) = value
            End Set
        End Property
        
        Public Property Level As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.LevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.LevelColumn) = value
            End Set
        End Property
        
        Public Property XP As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.XPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.XPColumn) = value
            End Set
        End Property
        
        Public Property NextLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.NextLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.NextLevelColumn) = value
            End Set
        End Property
        
        Public Property Gender As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.GenderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.GenderColumn) = value
            End Set
        End Property
        
        Public Property Age As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.AgeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.AgeColumn) = value
            End Set
        End Property
        
        Public Property Height As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.HeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.HeightColumn) = value
            End Set
        End Property
        
        Public Property Weight As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.WeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.WeightColumn) = value
            End Set
        End Property
        
        Public Property Size As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.SizeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.SizeColumn) = value
            End Set
        End Property
        
        Public Property Space As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.SpaceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.SpaceColumn) = value
            End Set
        End Property
        
        Public Property Reach As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ReachColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ReachColumn) = value
            End Set
        End Property
        
        Public Property Deity As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.DeityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.DeityColumn) = value
            End Set
        End Property
        
        Public Property STR As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.STRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.STRColumn) = value
            End Set
        End Property
        
        Public Property STRMod As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.STRModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.STRModColumn) = value
            End Set
        End Property
        
        Public Property DEX As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.DEXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.DEXColumn) = value
            End Set
        End Property
        
        Public Property DEXMod As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.DEXModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.DEXModColumn) = value
            End Set
        End Property
        
        Public Property CON As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.CONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.CONColumn) = value
            End Set
        End Property
        
        Public Property CONMod As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.CONModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.CONModColumn) = value
            End Set
        End Property
        
        Public Property INT As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.INTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.INTColumn) = value
            End Set
        End Property
        
        Public Property INTMod As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.INTModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.INTModColumn) = value
            End Set
        End Property
        
        Public Property WIS As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.WISColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.WISColumn) = value
            End Set
        End Property
        
        Public Property WISMod As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.WISModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.WISModColumn) = value
            End Set
        End Property
        
        Public Property CHA As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.CHAColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.CHAColumn) = value
            End Set
        End Property
        
        Public Property CHAMod As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.CHAModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.CHAModColumn) = value
            End Set
        End Property
        
        Public Property Fortitude As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.FortitudeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.FortitudeColumn) = value
            End Set
        End Property
        
        Public Property Reflex As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ReflexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ReflexColumn) = value
            End Set
        End Property
        
        Public Property Will As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.WillColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.WillColumn) = value
            End Set
        End Property
        
        Public Property Speed As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.SpeedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.SpeedColumn) = value
            End Set
        End Property
        
        Public Property RunMultiplier As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.RunMultiplierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.RunMultiplierColumn) = value
            End Set
        End Property
        
        Public Property BaseSpeed As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.BaseSpeedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.BaseSpeedColumn) = value
            End Set
        End Property
        
        Public Property BaseRunMultiplier As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.BaseRunMultiplierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.BaseRunMultiplierColumn) = value
            End Set
        End Property
        
        Public Property Fly As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.FlyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.FlyColumn) = value
            End Set
        End Property
        
        Public Property Climb As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ClimbColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ClimbColumn) = value
            End Set
        End Property
        
        Public Property Swim As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.SwimColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.SwimColumn) = value
            End Set
        End Property
        
        Public Property Burrow As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.BurrowColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.BurrowColumn) = value
            End Set
        End Property
        
        Public Property AC As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ACColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ACColumn) = value
            End Set
        End Property
        
        Public Property ACTouch As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ACTouchColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ACTouchColumn) = value
            End Set
        End Property
        
        Public Property ACFlatfooted As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ACFlatfootedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ACFlatfootedColumn) = value
            End Set
        End Property
        
        Public Property ACHelpless As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ACHelplessColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ACHelplessColumn) = value
            End Set
        End Property
        
        Public Property Armor As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ArmorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ArmorColumn) = value
            End Set
        End Property
        
        Public Property Shield As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ShieldColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ShieldColumn) = value
            End Set
        End Property
        
        Public Property ArmorMaxDex As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ArmorMaxDexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ArmorMaxDexColumn) = value
            End Set
        End Property
        
        Public Property ShieldMaxDex As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ShieldMaxDexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ShieldMaxDexColumn) = value
            End Set
        End Property
        
        Public Property ArmorCheckPenalty As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ArmorCheckPenaltyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ArmorCheckPenaltyColumn) = value
            End Set
        End Property
        
        Public Property ShieldCheckPenalty As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.ShieldCheckPenaltyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.ShieldCheckPenaltyColumn) = value
            End Set
        End Property
        
        Public Property EncumbranceCheckPenalty As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.EncumbranceCheckPenaltyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.EncumbranceCheckPenaltyColumn) = value
            End Set
        End Property
        
        Public Property SpellFailureArmor As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.SpellFailureArmorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.SpellFailureArmorColumn) = value
            End Set
        End Property
        
        Public Property SpellFailureShield As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.SpellFailureShieldColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.SpellFailureShieldColumn) = value
            End Set
        End Property
        
        Public Property SR As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.SRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.SRColumn) = value
            End Set
        End Property
        
        Public Property PR As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.PRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.PRColumn) = value
            End Set
        End Property
        
        Public Property DR As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.DRColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.DRColumn) = value
            End Set
        End Property
        
        Public Property HP As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.HPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.HPColumn) = value
            End Set
        End Property
        
        Public Property CurrentHP As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.CurrentHPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.CurrentHPColumn) = value
            End Set
        End Property
        
        Public Property BAB1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.BAB1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.BAB1Column) = value
            End Set
        End Property
        
        Public Property BAB2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.BAB2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.BAB2Column) = value
            End Set
        End Property
        
        Public Property BAB3 As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.BAB3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.BAB3Column) = value
            End Set
        End Property
        
        Public Property BAB4 As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.BAB4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.BAB4Column) = value
            End Set
        End Property
        
        Public Property Melee As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.MeleeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.MeleeColumn) = value
            End Set
        End Property
        
        Public Property Ranged As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.RangedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.RangedColumn) = value
            End Set
        End Property
        
        Public Property Grapple As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.GrappleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.GrappleColumn) = value
            End Set
        End Property
        
        Public Property Initiative As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.InitiativeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.InitiativeColumn) = value
            End Set
        End Property
        
        Public Property Money As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.MoneyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.MoneyColumn) = value
            End Set
        End Property
        
        Public Property AssetsValue As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.AssetsValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.AssetsValueColumn) = value
            End Set
        End Property
        
        Public Property InventoryWeight As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.InventoryWeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.InventoryWeightColumn) = value
            End Set
        End Property
        
        Public Property CurrentLoad As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.CurrentLoadColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.CurrentLoadColumn) = value
            End Set
        End Property
        
        Public Property LoadInfo As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.LoadInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.LoadInfoColumn) = value
            End Set
        End Property
        
        Public Property LightLoadInfo As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.LightLoadInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.LightLoadInfoColumn) = value
            End Set
        End Property
        
        Public Property MediumLoadInfo As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.MediumLoadInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.MediumLoadInfoColumn) = value
            End Set
        End Property
        
        Public Property HeavyLoadInfo As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.HeavyLoadInfoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.HeavyLoadInfoColumn) = value
            End Set
        End Property
        
        Public Property MediumLoadMaxDex As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.MediumLoadMaxDexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.MediumLoadMaxDexColumn) = value
            End Set
        End Property
        
        Public Property MediumLoadCheckPenalty As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.MediumLoadCheckPenaltyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.MediumLoadCheckPenaltyColumn) = value
            End Set
        End Property
        
        Public Property MediumLoadSpeed As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.MediumLoadSpeedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.MediumLoadSpeedColumn) = value
            End Set
        End Property
        
        Public Property MediumLoadRun As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.MediumLoadRunColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.MediumLoadRunColumn) = value
            End Set
        End Property
        
        Public Property HeavyLoadMaxDex As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.HeavyLoadMaxDexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.HeavyLoadMaxDexColumn) = value
            End Set
        End Property
        
        Public Property HeavyLoadCheckPenalty As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.HeavyLoadCheckPenaltyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.HeavyLoadCheckPenaltyColumn) = value
            End Set
        End Property
        
        Public Property HeavyLoadSpeed As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.HeavyLoadSpeedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.HeavyLoadSpeedColumn) = value
            End Set
        End Property
        
        Public Property HeavyLoadRun As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.HeavyLoadRunColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.HeavyLoadRunColumn) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.NotesColumn) = value
            End Set
        End Property
        
        Public Property Background As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.BackgroundColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.BackgroundColumn) = value
            End Set
        End Property
        
        Public Property CoinWeight As String
            Get
                Try 
                    Return CType(Me(Me.tableCharacter.CoinWeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCharacter.CoinWeightColumn) = value
            End Set
        End Property
        
        Public Function IsCharacterNameNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.CharacterNameColumn)
        End Function
        
        Public Sub SetCharacterNameNull()
            Me(Me.tableCharacter.CharacterNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlayerNameNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.PlayerNameColumn)
        End Function
        
        Public Sub SetPlayerNameNull()
            Me(Me.tableCharacter.PlayerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPortraitNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.PortraitColumn)
        End Function
        
        Public Sub SetPortraitNull()
            Me(Me.tableCharacter.PortraitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRaceNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.RaceColumn)
        End Function
        
        Public Sub SetRaceNull()
            Me(Me.tableCharacter.RaceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.TypeColumn)
        End Function
        
        Public Sub SetTypeNull()
            Me(Me.tableCharacter.TypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullTypeNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.FullTypeColumn)
        End Function
        
        Public Sub SetFullTypeNull()
            Me(Me.tableCharacter.FullTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlignmentNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.AlignmentColumn)
        End Function
        
        Public Sub SetAlignmentNull()
            Me(Me.tableCharacter.AlignmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLevelNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.LevelColumn)
        End Function
        
        Public Sub SetLevelNull()
            Me(Me.tableCharacter.LevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXPNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.XPColumn)
        End Function
        
        Public Sub SetXPNull()
            Me(Me.tableCharacter.XPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNextLevelNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.NextLevelColumn)
        End Function
        
        Public Sub SetNextLevelNull()
            Me(Me.tableCharacter.NextLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.GenderColumn)
        End Function
        
        Public Sub SetGenderNull()
            Me(Me.tableCharacter.GenderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.AgeColumn)
        End Function
        
        Public Sub SetAgeNull()
            Me(Me.tableCharacter.AgeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHeightNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.HeightColumn)
        End Function
        
        Public Sub SetHeightNull()
            Me(Me.tableCharacter.HeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeightNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.WeightColumn)
        End Function
        
        Public Sub SetWeightNull()
            Me(Me.tableCharacter.WeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSizeNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.SizeColumn)
        End Function
        
        Public Sub SetSizeNull()
            Me(Me.tableCharacter.SizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpaceNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.SpaceColumn)
        End Function
        
        Public Sub SetSpaceNull()
            Me(Me.tableCharacter.SpaceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReachNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ReachColumn)
        End Function
        
        Public Sub SetReachNull()
            Me(Me.tableCharacter.ReachColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeityNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.DeityColumn)
        End Function
        
        Public Sub SetDeityNull()
            Me(Me.tableCharacter.DeityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTRNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.STRColumn)
        End Function
        
        Public Sub SetSTRNull()
            Me(Me.tableCharacter.STRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTRModNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.STRModColumn)
        End Function
        
        Public Sub SetSTRModNull()
            Me(Me.tableCharacter.STRModColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEXNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.DEXColumn)
        End Function
        
        Public Sub SetDEXNull()
            Me(Me.tableCharacter.DEXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDEXModNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.DEXModColumn)
        End Function
        
        Public Sub SetDEXModNull()
            Me(Me.tableCharacter.DEXModColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.CONColumn)
        End Function
        
        Public Sub SetCONNull()
            Me(Me.tableCharacter.CONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONModNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.CONModColumn)
        End Function
        
        Public Sub SetCONModNull()
            Me(Me.tableCharacter.CONModColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINTNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.INTColumn)
        End Function
        
        Public Sub SetINTNull()
            Me(Me.tableCharacter.INTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINTModNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.INTModColumn)
        End Function
        
        Public Sub SetINTModNull()
            Me(Me.tableCharacter.INTModColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWISNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.WISColumn)
        End Function
        
        Public Sub SetWISNull()
            Me(Me.tableCharacter.WISColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWISModNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.WISModColumn)
        End Function
        
        Public Sub SetWISModNull()
            Me(Me.tableCharacter.WISModColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHANull() As Boolean
            Return Me.IsNull(Me.tableCharacter.CHAColumn)
        End Function
        
        Public Sub SetCHANull()
            Me(Me.tableCharacter.CHAColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHAModNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.CHAModColumn)
        End Function
        
        Public Sub SetCHAModNull()
            Me(Me.tableCharacter.CHAModColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFortitudeNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.FortitudeColumn)
        End Function
        
        Public Sub SetFortitudeNull()
            Me(Me.tableCharacter.FortitudeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReflexNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ReflexColumn)
        End Function
        
        Public Sub SetReflexNull()
            Me(Me.tableCharacter.ReflexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWillNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.WillColumn)
        End Function
        
        Public Sub SetWillNull()
            Me(Me.tableCharacter.WillColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpeedNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.SpeedColumn)
        End Function
        
        Public Sub SetSpeedNull()
            Me(Me.tableCharacter.SpeedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRunMultiplierNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.RunMultiplierColumn)
        End Function
        
        Public Sub SetRunMultiplierNull()
            Me(Me.tableCharacter.RunMultiplierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseSpeedNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.BaseSpeedColumn)
        End Function
        
        Public Sub SetBaseSpeedNull()
            Me(Me.tableCharacter.BaseSpeedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseRunMultiplierNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.BaseRunMultiplierColumn)
        End Function
        
        Public Sub SetBaseRunMultiplierNull()
            Me(Me.tableCharacter.BaseRunMultiplierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFlyNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.FlyColumn)
        End Function
        
        Public Sub SetFlyNull()
            Me(Me.tableCharacter.FlyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClimbNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ClimbColumn)
        End Function
        
        Public Sub SetClimbNull()
            Me(Me.tableCharacter.ClimbColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSwimNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.SwimColumn)
        End Function
        
        Public Sub SetSwimNull()
            Me(Me.tableCharacter.SwimColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBurrowNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.BurrowColumn)
        End Function
        
        Public Sub SetBurrowNull()
            Me(Me.tableCharacter.BurrowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ACColumn)
        End Function
        
        Public Sub SetACNull()
            Me(Me.tableCharacter.ACColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACTouchNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ACTouchColumn)
        End Function
        
        Public Sub SetACTouchNull()
            Me(Me.tableCharacter.ACTouchColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACFlatfootedNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ACFlatfootedColumn)
        End Function
        
        Public Sub SetACFlatfootedNull()
            Me(Me.tableCharacter.ACFlatfootedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACHelplessNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ACHelplessColumn)
        End Function
        
        Public Sub SetACHelplessNull()
            Me(Me.tableCharacter.ACHelplessColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArmorNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ArmorColumn)
        End Function
        
        Public Sub SetArmorNull()
            Me(Me.tableCharacter.ArmorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShieldNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ShieldColumn)
        End Function
        
        Public Sub SetShieldNull()
            Me(Me.tableCharacter.ShieldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArmorMaxDexNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ArmorMaxDexColumn)
        End Function
        
        Public Sub SetArmorMaxDexNull()
            Me(Me.tableCharacter.ArmorMaxDexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShieldMaxDexNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ShieldMaxDexColumn)
        End Function
        
        Public Sub SetShieldMaxDexNull()
            Me(Me.tableCharacter.ShieldMaxDexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArmorCheckPenaltyNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ArmorCheckPenaltyColumn)
        End Function
        
        Public Sub SetArmorCheckPenaltyNull()
            Me(Me.tableCharacter.ArmorCheckPenaltyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShieldCheckPenaltyNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.ShieldCheckPenaltyColumn)
        End Function
        
        Public Sub SetShieldCheckPenaltyNull()
            Me(Me.tableCharacter.ShieldCheckPenaltyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEncumbranceCheckPenaltyNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.EncumbranceCheckPenaltyColumn)
        End Function
        
        Public Sub SetEncumbranceCheckPenaltyNull()
            Me(Me.tableCharacter.EncumbranceCheckPenaltyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellFailureArmorNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.SpellFailureArmorColumn)
        End Function
        
        Public Sub SetSpellFailureArmorNull()
            Me(Me.tableCharacter.SpellFailureArmorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellFailureShieldNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.SpellFailureShieldColumn)
        End Function
        
        Public Sub SetSpellFailureShieldNull()
            Me(Me.tableCharacter.SpellFailureShieldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSRNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.SRColumn)
        End Function
        
        Public Sub SetSRNull()
            Me(Me.tableCharacter.SRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.PRColumn)
        End Function
        
        Public Sub SetPRNull()
            Me(Me.tableCharacter.PRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.DRColumn)
        End Function
        
        Public Sub SetDRNull()
            Me(Me.tableCharacter.DRColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHPNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.HPColumn)
        End Function
        
        Public Sub SetHPNull()
            Me(Me.tableCharacter.HPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurrentHPNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.CurrentHPColumn)
        End Function
        
        Public Sub SetCurrentHPNull()
            Me(Me.tableCharacter.CurrentHPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBAB1Null() As Boolean
            Return Me.IsNull(Me.tableCharacter.BAB1Column)
        End Function
        
        Public Sub SetBAB1Null()
            Me(Me.tableCharacter.BAB1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBAB2Null() As Boolean
            Return Me.IsNull(Me.tableCharacter.BAB2Column)
        End Function
        
        Public Sub SetBAB2Null()
            Me(Me.tableCharacter.BAB2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBAB3Null() As Boolean
            Return Me.IsNull(Me.tableCharacter.BAB3Column)
        End Function
        
        Public Sub SetBAB3Null()
            Me(Me.tableCharacter.BAB3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBAB4Null() As Boolean
            Return Me.IsNull(Me.tableCharacter.BAB4Column)
        End Function
        
        Public Sub SetBAB4Null()
            Me(Me.tableCharacter.BAB4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsMeleeNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.MeleeColumn)
        End Function
        
        Public Sub SetMeleeNull()
            Me(Me.tableCharacter.MeleeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRangedNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.RangedColumn)
        End Function
        
        Public Sub SetRangedNull()
            Me(Me.tableCharacter.RangedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGrappleNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.GrappleColumn)
        End Function
        
        Public Sub SetGrappleNull()
            Me(Me.tableCharacter.GrappleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInitiativeNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.InitiativeColumn)
        End Function
        
        Public Sub SetInitiativeNull()
            Me(Me.tableCharacter.InitiativeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMoneyNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.MoneyColumn)
        End Function
        
        Public Sub SetMoneyNull()
            Me(Me.tableCharacter.MoneyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAssetsValueNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.AssetsValueColumn)
        End Function
        
        Public Sub SetAssetsValueNull()
            Me(Me.tableCharacter.AssetsValueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInventoryWeightNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.InventoryWeightColumn)
        End Function
        
        Public Sub SetInventoryWeightNull()
            Me(Me.tableCharacter.InventoryWeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurrentLoadNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.CurrentLoadColumn)
        End Function
        
        Public Sub SetCurrentLoadNull()
            Me(Me.tableCharacter.CurrentLoadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoadInfoNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.LoadInfoColumn)
        End Function
        
        Public Sub SetLoadInfoNull()
            Me(Me.tableCharacter.LoadInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLightLoadInfoNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.LightLoadInfoColumn)
        End Function
        
        Public Sub SetLightLoadInfoNull()
            Me(Me.tableCharacter.LightLoadInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMediumLoadInfoNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.MediumLoadInfoColumn)
        End Function
        
        Public Sub SetMediumLoadInfoNull()
            Me(Me.tableCharacter.MediumLoadInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHeavyLoadInfoNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.HeavyLoadInfoColumn)
        End Function
        
        Public Sub SetHeavyLoadInfoNull()
            Me(Me.tableCharacter.HeavyLoadInfoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMediumLoadMaxDexNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.MediumLoadMaxDexColumn)
        End Function
        
        Public Sub SetMediumLoadMaxDexNull()
            Me(Me.tableCharacter.MediumLoadMaxDexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMediumLoadCheckPenaltyNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.MediumLoadCheckPenaltyColumn)
        End Function
        
        Public Sub SetMediumLoadCheckPenaltyNull()
            Me(Me.tableCharacter.MediumLoadCheckPenaltyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMediumLoadSpeedNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.MediumLoadSpeedColumn)
        End Function
        
        Public Sub SetMediumLoadSpeedNull()
            Me(Me.tableCharacter.MediumLoadSpeedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMediumLoadRunNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.MediumLoadRunColumn)
        End Function
        
        Public Sub SetMediumLoadRunNull()
            Me(Me.tableCharacter.MediumLoadRunColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHeavyLoadMaxDexNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.HeavyLoadMaxDexColumn)
        End Function
        
        Public Sub SetHeavyLoadMaxDexNull()
            Me(Me.tableCharacter.HeavyLoadMaxDexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHeavyLoadCheckPenaltyNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.HeavyLoadCheckPenaltyColumn)
        End Function
        
        Public Sub SetHeavyLoadCheckPenaltyNull()
            Me(Me.tableCharacter.HeavyLoadCheckPenaltyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHeavyLoadSpeedNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.HeavyLoadSpeedColumn)
        End Function
        
        Public Sub SetHeavyLoadSpeedNull()
            Me(Me.tableCharacter.HeavyLoadSpeedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHeavyLoadRunNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.HeavyLoadRunColumn)
        End Function
        
        Public Sub SetHeavyLoadRunNull()
            Me(Me.tableCharacter.HeavyLoadRunColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableCharacter.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBackgroundNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.BackgroundColumn)
        End Function
        
        Public Sub SetBackgroundNull()
            Me(Me.tableCharacter.BackgroundColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCoinWeightNull() As Boolean
            Return Me.IsNull(Me.tableCharacter.CoinWeightColumn)
        End Function
        
        Public Sub SetCoinWeightNull()
            Me(Me.tableCharacter.CoinWeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSubtypesRows() As SubtypesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Subtypes")),SubtypesRow())
        End Function
        
        Public Function GetClassesRows() As ClassesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Classes")),ClassesRow())
        End Function
        
        Public Function GetResistancesRows() As ResistancesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Resistances")),ResistancesRow())
        End Function
        
        Public Function GetAttacksRows() As AttacksRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Attacks")),AttacksRow())
        End Function
        
        Public Function GetSkillsRows() As SkillsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Skills")),SkillsRow())
        End Function
        
        Public Function GetLanguagesRows() As LanguagesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Languages")),LanguagesRow())
        End Function
        
        Public Function GetCoreModifiersRows() As CoreModifiersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_CoreModifiers")),CoreModifiersRow())
        End Function
        
        Public Function GetAttackModifiersRows() As AttackModifiersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_AttackModifiers")),AttackModifiersRow())
        End Function
        
        Public Function GetDefenseModifiersRows() As DefenseModifiersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_DefenseModifiers")),DefenseModifiersRow())
        End Function
        
        Public Function GetSkillModifiersRows() As SkillModifiersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_SkillModifiers")),SkillModifiersRow())
        End Function
        
        Public Function GetMagicModifiersRows() As MagicModifiersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_MagicModifiers")),MagicModifiersRow())
        End Function
        
        Public Function GetFeatsRows() As FeatsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Feats")),FeatsRow())
        End Function
        
        Public Function GetFeaturesRows() As FeaturesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Features")),FeaturesRow())
        End Function
        
        Public Function GetInventoryRows() As InventoryRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Inventory")),InventoryRow())
        End Function
        
        Public Function GetAssetsRows() As AssetsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Assets")),AssetsRow())
        End Function
        
        Public Function GetSpellCasterInfoRows() As SpellCasterInfoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_SpellCasterInfo")),SpellCasterInfoRow())
        End Function
        
        Public Function GetDomainsRows() As DomainsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Domains")),DomainsRow())
        End Function
        
        Public Function GetSpecialistSchoolsRows() As SpecialistSchoolsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_SpecialistSchools")),SpecialistSchoolsRow())
        End Function
        
        Public Function GetProhibitedSchoolsRows() As ProhibitedSchoolsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_ProhibitedSchools")),ProhibitedSchoolsRow())
        End Function
        
        Public Function GetSpellsRows() As SpellsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Spells")),SpellsRow())
        End Function
        
        Public Function GetManifesterInfoRows() As ManifesterInfoRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_ManifesterInfo")),ManifesterInfoRow())
        End Function
        
        Public Function GetPowersRows() As PowersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_Powers")),PowersRow())
        End Function
        
        Public Function GetPsionicSpecializationsRows() As PsionicSpecializationsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_PsionicSpecializations")),PsionicSpecializationsRow())
        End Function
        
        Public Function GetPsionicModifiersRows() As PsionicModifiersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_PsionicModifiers")),PsionicModifiersRow())
        End Function
        
        Public Function GetArmorClassRows() As ArmorClassRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_ArmorClass")),ArmorClassRow())
        End Function
        
        Public Function GetSavingThrowsRows() As SavingThrowsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_SavingThrows")),SavingThrowsRow())
        End Function
        
        Public Function GetAbilityScoresRows() As AbilityScoresRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_AbilityScores")),AbilityScoresRow())
        End Function
        
        Public Function GetPsiLikeAbilitiesRows() As PsiLikeAbilitiesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_PsiLikeAbilities")),PsiLikeAbilitiesRow())
        End Function
        
        Public Function GetSpellLikeAbilitiesRows() As SpellLikeAbilitiesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Character_SpellLikeAbilities")),SpellLikeAbilitiesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CharacterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CharacterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CharacterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CharacterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubtypesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSubtypes_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Subtypes")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Subtypes_IdColumn As DataColumn
            Get
                Return Me.columnSubtypes_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubtypesRow
            Get
                Return CType(Me.Rows(index),SubtypesRow)
            End Get
        End Property
        
        Public Event SubtypesRowChanged As SubtypesRowChangeEventHandler
        
        Public Event SubtypesRowChanging As SubtypesRowChangeEventHandler
        
        Public Event SubtypesRowDeleted As SubtypesRowChangeEventHandler
        
        Public Event SubtypesRowDeleting As SubtypesRowChangeEventHandler
        
        Public Overloads Sub AddSubtypesRow(ByVal row As SubtypesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSubtypesRow(ByVal parentCharacterRowByCharacter_Subtypes As CharacterRow) As SubtypesRow
            Dim rowSubtypesRow As SubtypesRow = CType(Me.NewRow,SubtypesRow)
            rowSubtypesRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Subtypes(86)}
            Me.Rows.Add(rowSubtypesRow)
            Return rowSubtypesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SubtypesDataTable = CType(MyBase.Clone,SubtypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SubtypesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSubtypes_Id = Me.Columns("Subtypes_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSubtypes_Id = New DataColumn("Subtypes_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSubtypes_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSubtypes_Id}, true))
            Me.columnSubtypes_Id.AutoIncrement = true
            Me.columnSubtypes_Id.AllowDBNull = false
            Me.columnSubtypes_Id.Unique = true
        End Sub
        
        Public Function NewSubtypesRow() As SubtypesRow
            Return CType(Me.NewRow,SubtypesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SubtypesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SubtypesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubtypesRowChangedEvent) Is Nothing) Then
                RaiseEvent SubtypesRowChanged(Me, New SubtypesRowChangeEvent(CType(e.Row,SubtypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubtypesRowChangingEvent) Is Nothing) Then
                RaiseEvent SubtypesRowChanging(Me, New SubtypesRowChangeEvent(CType(e.Row,SubtypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubtypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubtypesRowDeleted(Me, New SubtypesRowChangeEvent(CType(e.Row,SubtypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubtypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubtypesRowDeleting(Me, New SubtypesRowChangeEvent(CType(e.Row,SubtypesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSubtypesRow(ByVal row As SubtypesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubtypesRow
        Inherits DataRow
        
        Private tableSubtypes As SubtypesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubtypes = CType(Me.Table,SubtypesDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Subtypes")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Subtypes"))
            End Set
        End Property
        
        Public Function GetSubtypeRows() As SubtypeRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Subtypes_Subtype")),SubtypeRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubtypesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SubtypesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SubtypesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SubtypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubtypeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSubtypeName As DataColumn
        
        Private columnSubtypes_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Subtype")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SubtypeNameColumn As DataColumn
            Get
                Return Me.columnSubtypeName
            End Get
        End Property
        
        Public ReadOnly Property Subtypes_IdColumn As DataColumn
            Get
                Return Me.columnSubtypes_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SubtypeRow
            Get
                Return CType(Me.Rows(index),SubtypeRow)
            End Get
        End Property
        
        Public Event SubtypeRowChanged As SubtypeRowChangeEventHandler
        
        Public Event SubtypeRowChanging As SubtypeRowChangeEventHandler
        
        Public Event SubtypeRowDeleted As SubtypeRowChangeEventHandler
        
        Public Event SubtypeRowDeleting As SubtypeRowChangeEventHandler
        
        Public Overloads Sub AddSubtypeRow(ByVal row As SubtypeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSubtypeRow(ByVal SubtypeName As String, ByVal parentSubtypesRowBySubtypes_Subtype As SubtypesRow) As SubtypeRow
            Dim rowSubtypeRow As SubtypeRow = CType(Me.NewRow,SubtypeRow)
            rowSubtypeRow.ItemArray = New Object() {SubtypeName, parentSubtypesRowBySubtypes_Subtype(0)}
            Me.Rows.Add(rowSubtypeRow)
            Return rowSubtypeRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SubtypeDataTable = CType(MyBase.Clone,SubtypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SubtypeDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSubtypeName = Me.Columns("SubtypeName")
            Me.columnSubtypes_Id = Me.Columns("Subtypes_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSubtypeName = New DataColumn("SubtypeName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubtypeName)
            Me.columnSubtypes_Id = New DataColumn("Subtypes_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSubtypes_Id)
        End Sub
        
        Public Function NewSubtypeRow() As SubtypeRow
            Return CType(Me.NewRow,SubtypeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SubtypeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SubtypeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SubtypeRowChangedEvent) Is Nothing) Then
                RaiseEvent SubtypeRowChanged(Me, New SubtypeRowChangeEvent(CType(e.Row,SubtypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SubtypeRowChangingEvent) Is Nothing) Then
                RaiseEvent SubtypeRowChanging(Me, New SubtypeRowChangeEvent(CType(e.Row,SubtypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SubtypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent SubtypeRowDeleted(Me, New SubtypeRowChangeEvent(CType(e.Row,SubtypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SubtypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent SubtypeRowDeleting(Me, New SubtypeRowChangeEvent(CType(e.Row,SubtypeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSubtypeRow(ByVal row As SubtypeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubtypeRow
        Inherits DataRow
        
        Private tableSubtype As SubtypeDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSubtype = CType(Me.Table,SubtypeDataTable)
        End Sub
        
        Public Property SubtypeName As String
            Get
                Try 
                    Return CType(Me(Me.tableSubtype.SubtypeNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSubtype.SubtypeNameColumn) = value
            End Set
        End Property
        
        Public Property SubtypesRow As SubtypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Subtypes_Subtype")),SubtypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Subtypes_Subtype"))
            End Set
        End Property
        
        Public Function IsSubtypeNameNull() As Boolean
            Return Me.IsNull(Me.tableSubtype.SubtypeNameColumn)
        End Function
        
        Public Sub SetSubtypeNameNull()
            Me(Me.tableSubtype.SubtypeNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SubtypeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SubtypeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SubtypeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SubtypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnClasses_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Classes")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Classes_IdColumn As DataColumn
            Get
                Return Me.columnClasses_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClassesRow
            Get
                Return CType(Me.Rows(index),ClassesRow)
            End Get
        End Property
        
        Public Event ClassesRowChanged As ClassesRowChangeEventHandler
        
        Public Event ClassesRowChanging As ClassesRowChangeEventHandler
        
        Public Event ClassesRowDeleted As ClassesRowChangeEventHandler
        
        Public Event ClassesRowDeleting As ClassesRowChangeEventHandler
        
        Public Overloads Sub AddClassesRow(ByVal row As ClassesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClassesRow(ByVal parentCharacterRowByCharacter_Classes As CharacterRow) As ClassesRow
            Dim rowClassesRow As ClassesRow = CType(Me.NewRow,ClassesRow)
            rowClassesRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Classes(86)}
            Me.Rows.Add(rowClassesRow)
            Return rowClassesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClassesDataTable = CType(MyBase.Clone,ClassesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClassesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnClasses_Id = Me.Columns("Classes_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnClasses_Id = New DataColumn("Classes_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClasses_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnClasses_Id}, true))
            Me.columnClasses_Id.AutoIncrement = true
            Me.columnClasses_Id.AllowDBNull = false
            Me.columnClasses_Id.Unique = true
        End Sub
        
        Public Function NewClassesRow() As ClassesRow
            Return CType(Me.NewRow,ClassesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClassesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClassesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClassesRowChangedEvent) Is Nothing) Then
                RaiseEvent ClassesRowChanged(Me, New ClassesRowChangeEvent(CType(e.Row,ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClassesRowChangingEvent) Is Nothing) Then
                RaiseEvent ClassesRowChanging(Me, New ClassesRowChangeEvent(CType(e.Row,ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClassesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClassesRowDeleted(Me, New ClassesRowChangeEvent(CType(e.Row,ClassesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClassesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClassesRowDeleting(Me, New ClassesRowChangeEvent(CType(e.Row,ClassesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClassesRow(ByVal row As ClassesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassesRow
        Inherits DataRow
        
        Private tableClasses As ClassesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClasses = CType(Me.Table,ClassesDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Classes")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Classes"))
            End Set
        End Property
        
        Public Function GetClassRows() As _ClassRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Classes_Class")),_ClassRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClassesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClassesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClassesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ClassDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnClassName As DataColumn
        
        Private columnClassAbrv As DataColumn
        
        Private columnClassLevel As DataColumn
        
        Private columnHitDice As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnClasses_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Class")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property ClassAbrvColumn As DataColumn
            Get
                Return Me.columnClassAbrv
            End Get
        End Property
        
        Public ReadOnly Property ClassLevelColumn As DataColumn
            Get
                Return Me.columnClassLevel
            End Get
        End Property
        
        Public ReadOnly Property HitDiceColumn As DataColumn
            Get
                Return Me.columnHitDice
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property Classes_IdColumn As DataColumn
            Get
                Return Me.columnClasses_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ClassRow
            Get
                Return CType(Me.Rows(index),_ClassRow)
            End Get
        End Property
        
        Public Event _ClassRowChanged As _ClassRowChangeEventHandler
        
        Public Event _ClassRowChanging As _ClassRowChangeEventHandler
        
        Public Event _ClassRowDeleted As _ClassRowChangeEventHandler
        
        Public Event _ClassRowDeleting As _ClassRowChangeEventHandler
        
        Public Overloads Sub Add_ClassRow(ByVal row As _ClassRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_ClassRow(ByVal ClassName As String, ByVal ClassAbrv As String, ByVal ClassLevel As String, ByVal HitDice As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentClassesRowByClasses_Class As ClassesRow) As _ClassRow
            Dim row_ClassRow As _ClassRow = CType(Me.NewRow,_ClassRow)
            row_ClassRow.ItemArray = New Object() {ClassName, ClassAbrv, ClassLevel, HitDice, License, Sourcebook, Tags, PageNo, HelpPage, parentClassesRowByClasses_Class(0)}
            Me.Rows.Add(row_ClassRow)
            Return row_ClassRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _ClassDataTable = CType(MyBase.Clone,_ClassDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _ClassDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnClassAbrv = Me.Columns("ClassAbrv")
            Me.columnClassLevel = Me.Columns("ClassLevel")
            Me.columnHitDice = Me.Columns("HitDice")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnClasses_Id = Me.Columns("Classes_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnClassAbrv = New DataColumn("ClassAbrv", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassAbrv)
            Me.columnClassLevel = New DataColumn("ClassLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassLevel)
            Me.columnHitDice = New DataColumn("HitDice", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHitDice)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnClasses_Id = New DataColumn("Classes_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClasses_Id)
        End Sub
        
        Public Function New_ClassRow() As _ClassRow
            Return CType(Me.NewRow,_ClassRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _ClassRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_ClassRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ClassRowChangedEvent) Is Nothing) Then
                RaiseEvent _ClassRowChanged(Me, New _ClassRowChangeEvent(CType(e.Row,_ClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ClassRowChangingEvent) Is Nothing) Then
                RaiseEvent _ClassRowChanging(Me, New _ClassRowChangeEvent(CType(e.Row,_ClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ClassRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ClassRowDeleted(Me, New _ClassRowChangeEvent(CType(e.Row,_ClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ClassRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ClassRowDeleting(Me, New _ClassRowChangeEvent(CType(e.Row,_ClassRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_ClassRow(ByVal row As _ClassRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ClassRow
        Inherits DataRow
        
        Private table_Class As _ClassDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_Class = CType(Me.Table,_ClassDataTable)
        End Sub
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property ClassAbrv As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.ClassAbrvColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.ClassAbrvColumn) = value
            End Set
        End Property
        
        Public Property ClassLevel As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.ClassLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.ClassLevelColumn) = value
            End Set
        End Property
        
        Public Property HitDice As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.HitDiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.HitDiceColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.table_Class.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Class.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property ClassesRow As ClassesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Classes_Class")),ClassesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Classes_Class"))
            End Set
        End Property
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.table_Class.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.table_Class.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassAbrvNull() As Boolean
            Return Me.IsNull(Me.table_Class.ClassAbrvColumn)
        End Function
        
        Public Sub SetClassAbrvNull()
            Me(Me.table_Class.ClassAbrvColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassLevelNull() As Boolean
            Return Me.IsNull(Me.table_Class.ClassLevelColumn)
        End Function
        
        Public Sub SetClassLevelNull()
            Me(Me.table_Class.ClassLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHitDiceNull() As Boolean
            Return Me.IsNull(Me.table_Class.HitDiceColumn)
        End Function
        
        Public Sub SetHitDiceNull()
            Me(Me.table_Class.HitDiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.table_Class.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.table_Class.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.table_Class.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.table_Class.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.table_Class.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.table_Class.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.table_Class.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.table_Class.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.table_Class.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.table_Class.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ClassRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _ClassRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _ClassRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _ClassRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResistancesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnResistances_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Resistances")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Resistances_IdColumn As DataColumn
            Get
                Return Me.columnResistances_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ResistancesRow
            Get
                Return CType(Me.Rows(index),ResistancesRow)
            End Get
        End Property
        
        Public Event ResistancesRowChanged As ResistancesRowChangeEventHandler
        
        Public Event ResistancesRowChanging As ResistancesRowChangeEventHandler
        
        Public Event ResistancesRowDeleted As ResistancesRowChangeEventHandler
        
        Public Event ResistancesRowDeleting As ResistancesRowChangeEventHandler
        
        Public Overloads Sub AddResistancesRow(ByVal row As ResistancesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddResistancesRow(ByVal parentCharacterRowByCharacter_Resistances As CharacterRow) As ResistancesRow
            Dim rowResistancesRow As ResistancesRow = CType(Me.NewRow,ResistancesRow)
            rowResistancesRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Resistances(86)}
            Me.Rows.Add(rowResistancesRow)
            Return rowResistancesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ResistancesDataTable = CType(MyBase.Clone,ResistancesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ResistancesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnResistances_Id = Me.Columns("Resistances_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnResistances_Id = New DataColumn("Resistances_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnResistances_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnResistances_Id}, true))
            Me.columnResistances_Id.AutoIncrement = true
            Me.columnResistances_Id.AllowDBNull = false
            Me.columnResistances_Id.Unique = true
        End Sub
        
        Public Function NewResistancesRow() As ResistancesRow
            Return CType(Me.NewRow,ResistancesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ResistancesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ResistancesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ResistancesRowChangedEvent) Is Nothing) Then
                RaiseEvent ResistancesRowChanged(Me, New ResistancesRowChangeEvent(CType(e.Row,ResistancesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ResistancesRowChangingEvent) Is Nothing) Then
                RaiseEvent ResistancesRowChanging(Me, New ResistancesRowChangeEvent(CType(e.Row,ResistancesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ResistancesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ResistancesRowDeleted(Me, New ResistancesRowChangeEvent(CType(e.Row,ResistancesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ResistancesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ResistancesRowDeleting(Me, New ResistancesRowChangeEvent(CType(e.Row,ResistancesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveResistancesRow(ByVal row As ResistancesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResistancesRow
        Inherits DataRow
        
        Private tableResistances As ResistancesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableResistances = CType(Me.Table,ResistancesDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Resistances")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Resistances"))
            End Set
        End Property
        
        Public Function GetResistanceRows() As ResistanceRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Resistances_Resistance")),ResistanceRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResistancesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ResistancesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ResistancesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ResistancesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResistanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnResistanceName As DataColumn
        
        Private columnResistances_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Resistance")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ResistanceNameColumn As DataColumn
            Get
                Return Me.columnResistanceName
            End Get
        End Property
        
        Public ReadOnly Property Resistances_IdColumn As DataColumn
            Get
                Return Me.columnResistances_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ResistanceRow
            Get
                Return CType(Me.Rows(index),ResistanceRow)
            End Get
        End Property
        
        Public Event ResistanceRowChanged As ResistanceRowChangeEventHandler
        
        Public Event ResistanceRowChanging As ResistanceRowChangeEventHandler
        
        Public Event ResistanceRowDeleted As ResistanceRowChangeEventHandler
        
        Public Event ResistanceRowDeleting As ResistanceRowChangeEventHandler
        
        Public Overloads Sub AddResistanceRow(ByVal row As ResistanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddResistanceRow(ByVal ResistanceName As String, ByVal parentResistancesRowByResistances_Resistance As ResistancesRow) As ResistanceRow
            Dim rowResistanceRow As ResistanceRow = CType(Me.NewRow,ResistanceRow)
            rowResistanceRow.ItemArray = New Object() {ResistanceName, parentResistancesRowByResistances_Resistance(0)}
            Me.Rows.Add(rowResistanceRow)
            Return rowResistanceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ResistanceDataTable = CType(MyBase.Clone,ResistanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ResistanceDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnResistanceName = Me.Columns("ResistanceName")
            Me.columnResistances_Id = Me.Columns("Resistances_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnResistanceName = New DataColumn("ResistanceName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResistanceName)
            Me.columnResistances_Id = New DataColumn("Resistances_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnResistances_Id)
        End Sub
        
        Public Function NewResistanceRow() As ResistanceRow
            Return CType(Me.NewRow,ResistanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ResistanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ResistanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ResistanceRowChangedEvent) Is Nothing) Then
                RaiseEvent ResistanceRowChanged(Me, New ResistanceRowChangeEvent(CType(e.Row,ResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ResistanceRowChangingEvent) Is Nothing) Then
                RaiseEvent ResistanceRowChanging(Me, New ResistanceRowChangeEvent(CType(e.Row,ResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ResistanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent ResistanceRowDeleted(Me, New ResistanceRowChangeEvent(CType(e.Row,ResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ResistanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent ResistanceRowDeleting(Me, New ResistanceRowChangeEvent(CType(e.Row,ResistanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveResistanceRow(ByVal row As ResistanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResistanceRow
        Inherits DataRow
        
        Private tableResistance As ResistanceDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableResistance = CType(Me.Table,ResistanceDataTable)
        End Sub
        
        Public Property ResistanceName As String
            Get
                Try 
                    Return CType(Me(Me.tableResistance.ResistanceNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResistance.ResistanceNameColumn) = value
            End Set
        End Property
        
        Public Property ResistancesRow As ResistancesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Resistances_Resistance")),ResistancesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Resistances_Resistance"))
            End Set
        End Property
        
        Public Function IsResistanceNameNull() As Boolean
            Return Me.IsNull(Me.tableResistance.ResistanceNameColumn)
        End Function
        
        Public Sub SetResistanceNameNull()
            Me(Me.tableResistance.ResistanceNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ResistanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ResistanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ResistanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ResistanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttacksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAttacks_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Attacks")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Attacks_IdColumn As DataColumn
            Get
                Return Me.columnAttacks_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AttacksRow
            Get
                Return CType(Me.Rows(index),AttacksRow)
            End Get
        End Property
        
        Public Event AttacksRowChanged As AttacksRowChangeEventHandler
        
        Public Event AttacksRowChanging As AttacksRowChangeEventHandler
        
        Public Event AttacksRowDeleted As AttacksRowChangeEventHandler
        
        Public Event AttacksRowDeleting As AttacksRowChangeEventHandler
        
        Public Overloads Sub AddAttacksRow(ByVal row As AttacksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAttacksRow(ByVal parentCharacterRowByCharacter_Attacks As CharacterRow) As AttacksRow
            Dim rowAttacksRow As AttacksRow = CType(Me.NewRow,AttacksRow)
            rowAttacksRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Attacks(86)}
            Me.Rows.Add(rowAttacksRow)
            Return rowAttacksRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AttacksDataTable = CType(MyBase.Clone,AttacksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AttacksDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAttacks_Id = Me.Columns("Attacks_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAttacks_Id = New DataColumn("Attacks_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAttacks_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAttacks_Id}, true))
            Me.columnAttacks_Id.AutoIncrement = true
            Me.columnAttacks_Id.AllowDBNull = false
            Me.columnAttacks_Id.Unique = true
        End Sub
        
        Public Function NewAttacksRow() As AttacksRow
            Return CType(Me.NewRow,AttacksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AttacksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AttacksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AttacksRowChangedEvent) Is Nothing) Then
                RaiseEvent AttacksRowChanged(Me, New AttacksRowChangeEvent(CType(e.Row,AttacksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AttacksRowChangingEvent) Is Nothing) Then
                RaiseEvent AttacksRowChanging(Me, New AttacksRowChangeEvent(CType(e.Row,AttacksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AttacksRowDeletedEvent) Is Nothing) Then
                RaiseEvent AttacksRowDeleted(Me, New AttacksRowChangeEvent(CType(e.Row,AttacksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AttacksRowDeletingEvent) Is Nothing) Then
                RaiseEvent AttacksRowDeleting(Me, New AttacksRowChangeEvent(CType(e.Row,AttacksRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAttacksRow(ByVal row As AttacksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttacksRow
        Inherits DataRow
        
        Private tableAttacks As AttacksDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAttacks = CType(Me.Table,AttacksDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Attacks")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Attacks"))
            End Set
        End Property
        
        Public Function GetAttackRows() As AttackRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Attacks_Attack")),AttackRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttacksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AttacksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AttacksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AttacksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAttack_Id As DataColumn
        
        Private columnAttacks_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Attack")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Attack_IdColumn As DataColumn
            Get
                Return Me.columnAttack_Id
            End Get
        End Property
        
        Public ReadOnly Property Attacks_IdColumn As DataColumn
            Get
                Return Me.columnAttacks_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AttackRow
            Get
                Return CType(Me.Rows(index),AttackRow)
            End Get
        End Property
        
        Public Event AttackRowChanged As AttackRowChangeEventHandler
        
        Public Event AttackRowChanging As AttackRowChangeEventHandler
        
        Public Event AttackRowDeleted As AttackRowChangeEventHandler
        
        Public Event AttackRowDeleting As AttackRowChangeEventHandler
        
        Public Overloads Sub AddAttackRow(ByVal row As AttackRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAttackRow(ByVal parentAttacksRowByAttacks_Attack As AttacksRow) As AttackRow
            Dim rowAttackRow As AttackRow = CType(Me.NewRow,AttackRow)
            rowAttackRow.ItemArray = New Object() {Nothing, parentAttacksRowByAttacks_Attack(0)}
            Me.Rows.Add(rowAttackRow)
            Return rowAttackRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AttackDataTable = CType(MyBase.Clone,AttackDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AttackDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAttack_Id = Me.Columns("Attack_Id")
            Me.columnAttacks_Id = Me.Columns("Attacks_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAttack_Id = New DataColumn("Attack_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAttack_Id)
            Me.columnAttacks_Id = New DataColumn("Attacks_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAttacks_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAttack_Id}, true))
            Me.columnAttack_Id.AutoIncrement = true
            Me.columnAttack_Id.AllowDBNull = false
            Me.columnAttack_Id.Unique = true
        End Sub
        
        Public Function NewAttackRow() As AttackRow
            Return CType(Me.NewRow,AttackRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AttackRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AttackRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AttackRowChangedEvent) Is Nothing) Then
                RaiseEvent AttackRowChanged(Me, New AttackRowChangeEvent(CType(e.Row,AttackRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AttackRowChangingEvent) Is Nothing) Then
                RaiseEvent AttackRowChanging(Me, New AttackRowChangeEvent(CType(e.Row,AttackRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AttackRowDeletedEvent) Is Nothing) Then
                RaiseEvent AttackRowDeleted(Me, New AttackRowChangeEvent(CType(e.Row,AttackRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AttackRowDeletingEvent) Is Nothing) Then
                RaiseEvent AttackRowDeleting(Me, New AttackRowChangeEvent(CType(e.Row,AttackRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAttackRow(ByVal row As AttackRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackRow
        Inherits DataRow
        
        Private tableAttack As AttackDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAttack = CType(Me.Table,AttackDataTable)
        End Sub
        
        Public Property AttacksRow As AttacksRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Attacks_Attack")),AttacksRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Attacks_Attack"))
            End Set
        End Property
        
        Public Function GetPrimaryRows() As PrimaryRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Attack_Primary")),PrimaryRow())
        End Function
        
        Public Function GetSecondaryRows() As SecondaryRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Attack_Secondary")),SecondaryRow())
        End Function
        
        Public Function GetBucklerRows() As BucklerRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Attack_Buckler")),BucklerRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AttackRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AttackRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AttackRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBaseName As DataColumn
        
        Private columnFullName As DataColumn
        
        Private columnAttacks As DataColumn
        
        Private columnWield As DataColumn
        
        Private columnWeaponType As DataColumn
        
        Private columnCriticalRange As DataColumn
        
        Private columnCriticalMultiplier As DataColumn
        
        Private columnBaseDamageType As DataColumn
        
        Private columnBaseDamageLethality As DataColumn
        
        Private columnBaseDamage As DataColumn
        
        Private columnEnhancement As DataColumn
        
        Private columnRange As DataColumn
        
        Private columnReachRange As DataColumn
        
        Private columnAlignment As DataColumn
        
        Private columnAttackNumber As DataColumn
        
        Private columnIsNatural As DataColumn
        
        Private columnIncrements As DataColumn
        
        Private columnPrimary_Id As DataColumn
        
        Private columnAttack_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Primary")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property BaseNameColumn As DataColumn
            Get
                Return Me.columnBaseName
            End Get
        End Property
        
        Public ReadOnly Property FullNameColumn As DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        Public ReadOnly Property AttacksColumn As DataColumn
            Get
                Return Me.columnAttacks
            End Get
        End Property
        
        Public ReadOnly Property WieldColumn As DataColumn
            Get
                Return Me.columnWield
            End Get
        End Property
        
        Public ReadOnly Property WeaponTypeColumn As DataColumn
            Get
                Return Me.columnWeaponType
            End Get
        End Property
        
        Public ReadOnly Property CriticalRangeColumn As DataColumn
            Get
                Return Me.columnCriticalRange
            End Get
        End Property
        
        Public ReadOnly Property CriticalMultiplierColumn As DataColumn
            Get
                Return Me.columnCriticalMultiplier
            End Get
        End Property
        
        Public ReadOnly Property BaseDamageTypeColumn As DataColumn
            Get
                Return Me.columnBaseDamageType
            End Get
        End Property
        
        Public ReadOnly Property BaseDamageLethalityColumn As DataColumn
            Get
                Return Me.columnBaseDamageLethality
            End Get
        End Property
        
        Public ReadOnly Property BaseDamageColumn As DataColumn
            Get
                Return Me.columnBaseDamage
            End Get
        End Property
        
        Public ReadOnly Property EnhancementColumn As DataColumn
            Get
                Return Me.columnEnhancement
            End Get
        End Property
        
        Public ReadOnly Property RangeColumn As DataColumn
            Get
                Return Me.columnRange
            End Get
        End Property
        
        Public ReadOnly Property ReachRangeColumn As DataColumn
            Get
                Return Me.columnReachRange
            End Get
        End Property
        
        Public ReadOnly Property AlignmentColumn As DataColumn
            Get
                Return Me.columnAlignment
            End Get
        End Property
        
        Public ReadOnly Property AttackNumberColumn As DataColumn
            Get
                Return Me.columnAttackNumber
            End Get
        End Property
        
        Public ReadOnly Property IsNaturalColumn As DataColumn
            Get
                Return Me.columnIsNatural
            End Get
        End Property
        
        Public ReadOnly Property IncrementsColumn As DataColumn
            Get
                Return Me.columnIncrements
            End Get
        End Property
        
        Public ReadOnly Property Primary_IdColumn As DataColumn
            Get
                Return Me.columnPrimary_Id
            End Get
        End Property
        
        Public ReadOnly Property Attack_IdColumn As DataColumn
            Get
                Return Me.columnAttack_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryRow
            Get
                Return CType(Me.Rows(index),PrimaryRow)
            End Get
        End Property
        
        Public Event PrimaryRowChanged As PrimaryRowChangeEventHandler
        
        Public Event PrimaryRowChanging As PrimaryRowChangeEventHandler
        
        Public Event PrimaryRowDeleted As PrimaryRowChangeEventHandler
        
        Public Event PrimaryRowDeleting As PrimaryRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryRow(ByVal row As PrimaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryRow( _
                    ByVal BaseName As String,  _
                    ByVal FullName As String,  _
                    ByVal Attacks As String,  _
                    ByVal Wield As String,  _
                    ByVal WeaponType As String,  _
                    ByVal CriticalRange As String,  _
                    ByVal CriticalMultiplier As String,  _
                    ByVal BaseDamageType As String,  _
                    ByVal BaseDamageLethality As String,  _
                    ByVal BaseDamage As String,  _
                    ByVal Enhancement As String,  _
                    ByVal Range As String,  _
                    ByVal ReachRange As String,  _
                    ByVal Alignment As String,  _
                    ByVal AttackNumber As String,  _
                    ByVal IsNatural As String,  _
                    ByVal Increments As String,  _
                    ByVal parentAttackRowByAttack_Primary As AttackRow) As PrimaryRow
            Dim rowPrimaryRow As PrimaryRow = CType(Me.NewRow,PrimaryRow)
            rowPrimaryRow.ItemArray = New Object() {BaseName, FullName, Attacks, Wield, WeaponType, CriticalRange, CriticalMultiplier, BaseDamageType, BaseDamageLethality, BaseDamage, Enhancement, Range, ReachRange, Alignment, AttackNumber, IsNatural, Increments, Nothing, parentAttackRowByAttack_Primary(0)}
            Me.Rows.Add(rowPrimaryRow)
            Return rowPrimaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryDataTable = CType(MyBase.Clone,PrimaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnBaseName = Me.Columns("BaseName")
            Me.columnFullName = Me.Columns("FullName")
            Me.columnAttacks = Me.Columns("Attacks")
            Me.columnWield = Me.Columns("Wield")
            Me.columnWeaponType = Me.Columns("WeaponType")
            Me.columnCriticalRange = Me.Columns("CriticalRange")
            Me.columnCriticalMultiplier = Me.Columns("CriticalMultiplier")
            Me.columnBaseDamageType = Me.Columns("BaseDamageType")
            Me.columnBaseDamageLethality = Me.Columns("BaseDamageLethality")
            Me.columnBaseDamage = Me.Columns("BaseDamage")
            Me.columnEnhancement = Me.Columns("Enhancement")
            Me.columnRange = Me.Columns("Range")
            Me.columnReachRange = Me.Columns("ReachRange")
            Me.columnAlignment = Me.Columns("Alignment")
            Me.columnAttackNumber = Me.Columns("AttackNumber")
            Me.columnIsNatural = Me.Columns("IsNatural")
            Me.columnIncrements = Me.Columns("Increments")
            Me.columnPrimary_Id = Me.Columns("Primary_Id")
            Me.columnAttack_Id = Me.Columns("Attack_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnBaseName = New DataColumn("BaseName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseName)
            Me.columnFullName = New DataColumn("FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullName)
            Me.columnAttacks = New DataColumn("Attacks", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAttacks)
            Me.columnWield = New DataColumn("Wield", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWield)
            Me.columnWeaponType = New DataColumn("WeaponType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeaponType)
            Me.columnCriticalRange = New DataColumn("CriticalRange", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriticalRange)
            Me.columnCriticalMultiplier = New DataColumn("CriticalMultiplier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriticalMultiplier)
            Me.columnBaseDamageType = New DataColumn("BaseDamageType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseDamageType)
            Me.columnBaseDamageLethality = New DataColumn("BaseDamageLethality", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseDamageLethality)
            Me.columnBaseDamage = New DataColumn("BaseDamage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseDamage)
            Me.columnEnhancement = New DataColumn("Enhancement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnhancement)
            Me.columnRange = New DataColumn("Range", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRange)
            Me.columnReachRange = New DataColumn("ReachRange", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReachRange)
            Me.columnAlignment = New DataColumn("Alignment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlignment)
            Me.columnAttackNumber = New DataColumn("AttackNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAttackNumber)
            Me.columnIsNatural = New DataColumn("IsNatural", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsNatural)
            Me.columnIncrements = New DataColumn("Increments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIncrements)
            Me.columnPrimary_Id = New DataColumn("Primary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimary_Id)
            Me.columnAttack_Id = New DataColumn("Attack_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAttack_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPrimary_Id}, true))
            Me.columnPrimary_Id.AutoIncrement = true
            Me.columnPrimary_Id.AllowDBNull = false
            Me.columnPrimary_Id.Unique = true
        End Sub
        
        Public Function NewPrimaryRow() As PrimaryRow
            Return CType(Me.NewRow,PrimaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryRowChanged(Me, New PrimaryRowChangeEvent(CType(e.Row,PrimaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryRowChanging(Me, New PrimaryRowChangeEvent(CType(e.Row,PrimaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryRowDeleted(Me, New PrimaryRowChangeEvent(CType(e.Row,PrimaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryRowDeleting(Me, New PrimaryRowChangeEvent(CType(e.Row,PrimaryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryRow(ByVal row As PrimaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryRow
        Inherits DataRow
        
        Private tablePrimary As PrimaryDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimary = CType(Me.Table,PrimaryDataTable)
        End Sub
        
        Public Property BaseName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.BaseNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.BaseNameColumn) = value
            End Set
        End Property
        
        Public Property FullName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.FullNameColumn) = value
            End Set
        End Property
        
        Public Property Attacks As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.AttacksColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.AttacksColumn) = value
            End Set
        End Property
        
        Public Property Wield As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.WieldColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.WieldColumn) = value
            End Set
        End Property
        
        Public Property WeaponType As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.WeaponTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.WeaponTypeColumn) = value
            End Set
        End Property
        
        Public Property CriticalRange As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.CriticalRangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.CriticalRangeColumn) = value
            End Set
        End Property
        
        Public Property CriticalMultiplier As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.CriticalMultiplierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.CriticalMultiplierColumn) = value
            End Set
        End Property
        
        Public Property BaseDamageType As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.BaseDamageTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.BaseDamageTypeColumn) = value
            End Set
        End Property
        
        Public Property BaseDamageLethality As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.BaseDamageLethalityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.BaseDamageLethalityColumn) = value
            End Set
        End Property
        
        Public Property BaseDamage As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.BaseDamageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.BaseDamageColumn) = value
            End Set
        End Property
        
        Public Property Enhancement As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.EnhancementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.EnhancementColumn) = value
            End Set
        End Property
        
        Public Property Range As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.RangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.RangeColumn) = value
            End Set
        End Property
        
        Public Property ReachRange As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.ReachRangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.ReachRangeColumn) = value
            End Set
        End Property
        
        Public Property Alignment As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.AlignmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.AlignmentColumn) = value
            End Set
        End Property
        
        Public Property AttackNumber As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.AttackNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.AttackNumberColumn) = value
            End Set
        End Property
        
        Public Property IsNatural As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.IsNaturalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.IsNaturalColumn) = value
            End Set
        End Property
        
        Public Property Increments As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimary.IncrementsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimary.IncrementsColumn) = value
            End Set
        End Property
        
        Public Property AttackRow As AttackRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Attack_Primary")),AttackRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Attack_Primary"))
            End Set
        End Property
        
        Public Function IsBaseNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.BaseNameColumn)
        End Function
        
        Public Sub SetBaseNameNull()
            Me(Me.tablePrimary.BaseNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.FullNameColumn)
        End Function
        
        Public Sub SetFullNameNull()
            Me(Me.tablePrimary.FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAttacksNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.AttacksColumn)
        End Function
        
        Public Sub SetAttacksNull()
            Me(Me.tablePrimary.AttacksColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWieldNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.WieldColumn)
        End Function
        
        Public Sub SetWieldNull()
            Me(Me.tablePrimary.WieldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeaponTypeNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.WeaponTypeColumn)
        End Function
        
        Public Sub SetWeaponTypeNull()
            Me(Me.tablePrimary.WeaponTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriticalRangeNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.CriticalRangeColumn)
        End Function
        
        Public Sub SetCriticalRangeNull()
            Me(Me.tablePrimary.CriticalRangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriticalMultiplierNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.CriticalMultiplierColumn)
        End Function
        
        Public Sub SetCriticalMultiplierNull()
            Me(Me.tablePrimary.CriticalMultiplierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseDamageTypeNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.BaseDamageTypeColumn)
        End Function
        
        Public Sub SetBaseDamageTypeNull()
            Me(Me.tablePrimary.BaseDamageTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseDamageLethalityNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.BaseDamageLethalityColumn)
        End Function
        
        Public Sub SetBaseDamageLethalityNull()
            Me(Me.tablePrimary.BaseDamageLethalityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseDamageNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.BaseDamageColumn)
        End Function
        
        Public Sub SetBaseDamageNull()
            Me(Me.tablePrimary.BaseDamageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnhancementNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.EnhancementColumn)
        End Function
        
        Public Sub SetEnhancementNull()
            Me(Me.tablePrimary.EnhancementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRangeNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.RangeColumn)
        End Function
        
        Public Sub SetRangeNull()
            Me(Me.tablePrimary.RangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReachRangeNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.ReachRangeColumn)
        End Function
        
        Public Sub SetReachRangeNull()
            Me(Me.tablePrimary.ReachRangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlignmentNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.AlignmentColumn)
        End Function
        
        Public Sub SetAlignmentNull()
            Me(Me.tablePrimary.AlignmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAttackNumberNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.AttackNumberColumn)
        End Function
        
        Public Sub SetAttackNumberNull()
            Me(Me.tablePrimary.AttackNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsNaturalNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.IsNaturalColumn)
        End Function
        
        Public Sub SetIsNaturalNull()
            Me(Me.tablePrimary.IsNaturalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIncrementsNull() As Boolean
            Return Me.IsNull(Me.tablePrimary.IncrementsColumn)
        End Function
        
        Public Sub SetIncrementsNull()
            Me(Me.tablePrimary.IncrementsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPrimaryExtraDamageRows() As PrimaryExtraDamageRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Primary_PrimaryExtraDamage")),PrimaryExtraDamageRow())
        End Function
        
        Public Function GetPrimaryAbilityRows() As PrimaryAbilityRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Primary_PrimaryAbility")),PrimaryAbilityRow())
        End Function
        
        Public Function GetPrimaryModifierRows() As PrimaryModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Primary_PrimaryModifier")),PrimaryModifierRow())
        End Function
        
        Public Function GetPrimaryDamageResistanceRows() As PrimaryDamageResistanceRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Primary_PrimaryDamageResistance")),PrimaryDamageResistanceRow())
        End Function
        
        Public Function GetPrimaryConditionRows() As PrimaryConditionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Primary_PrimaryCondition")),PrimaryConditionRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryExtraDamageDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDamageName As DataColumn
        
        Private columnPrimary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryExtraDamage")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property DamageNameColumn As DataColumn
            Get
                Return Me.columnDamageName
            End Get
        End Property
        
        Public ReadOnly Property Primary_IdColumn As DataColumn
            Get
                Return Me.columnPrimary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryExtraDamageRow
            Get
                Return CType(Me.Rows(index),PrimaryExtraDamageRow)
            End Get
        End Property
        
        Public Event PrimaryExtraDamageRowChanged As PrimaryExtraDamageRowChangeEventHandler
        
        Public Event PrimaryExtraDamageRowChanging As PrimaryExtraDamageRowChangeEventHandler
        
        Public Event PrimaryExtraDamageRowDeleted As PrimaryExtraDamageRowChangeEventHandler
        
        Public Event PrimaryExtraDamageRowDeleting As PrimaryExtraDamageRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryExtraDamageRow(ByVal row As PrimaryExtraDamageRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryExtraDamageRow(ByVal DamageName As String, ByVal parentPrimaryRowByPrimary_PrimaryExtraDamage As PrimaryRow) As PrimaryExtraDamageRow
            Dim rowPrimaryExtraDamageRow As PrimaryExtraDamageRow = CType(Me.NewRow,PrimaryExtraDamageRow)
            rowPrimaryExtraDamageRow.ItemArray = New Object() {DamageName, parentPrimaryRowByPrimary_PrimaryExtraDamage(17)}
            Me.Rows.Add(rowPrimaryExtraDamageRow)
            Return rowPrimaryExtraDamageRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryExtraDamageDataTable = CType(MyBase.Clone,PrimaryExtraDamageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryExtraDamageDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnDamageName = Me.Columns("DamageName")
            Me.columnPrimary_Id = Me.Columns("Primary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDamageName = New DataColumn("DamageName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDamageName)
            Me.columnPrimary_Id = New DataColumn("Primary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimary_Id)
        End Sub
        
        Public Function NewPrimaryExtraDamageRow() As PrimaryExtraDamageRow
            Return CType(Me.NewRow,PrimaryExtraDamageRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryExtraDamageRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryExtraDamageRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryExtraDamageRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryExtraDamageRowChanged(Me, New PrimaryExtraDamageRowChangeEvent(CType(e.Row,PrimaryExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryExtraDamageRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryExtraDamageRowChanging(Me, New PrimaryExtraDamageRowChangeEvent(CType(e.Row,PrimaryExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryExtraDamageRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryExtraDamageRowDeleted(Me, New PrimaryExtraDamageRowChangeEvent(CType(e.Row,PrimaryExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryExtraDamageRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryExtraDamageRowDeleting(Me, New PrimaryExtraDamageRowChangeEvent(CType(e.Row,PrimaryExtraDamageRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryExtraDamageRow(ByVal row As PrimaryExtraDamageRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryExtraDamageRow
        Inherits DataRow
        
        Private tablePrimaryExtraDamage As PrimaryExtraDamageDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryExtraDamage = CType(Me.Table,PrimaryExtraDamageDataTable)
        End Sub
        
        Public Property DamageName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryExtraDamage.DamageNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryExtraDamage.DamageNameColumn) = value
            End Set
        End Property
        
        Public Property PrimaryRow As PrimaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Primary_PrimaryExtraDamage")),PrimaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Primary_PrimaryExtraDamage"))
            End Set
        End Property
        
        Public Function IsDamageNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryExtraDamage.DamageNameColumn)
        End Function
        
        Public Sub SetDamageNameNull()
            Me(Me.tablePrimaryExtraDamage.DamageNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryExtraDamageRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryExtraDamageRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryExtraDamageRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryExtraDamageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryAbilityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAbilityName As DataColumn
        
        Private columnPrimary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryAbility")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property AbilityNameColumn As DataColumn
            Get
                Return Me.columnAbilityName
            End Get
        End Property
        
        Public ReadOnly Property Primary_IdColumn As DataColumn
            Get
                Return Me.columnPrimary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryAbilityRow
            Get
                Return CType(Me.Rows(index),PrimaryAbilityRow)
            End Get
        End Property
        
        Public Event PrimaryAbilityRowChanged As PrimaryAbilityRowChangeEventHandler
        
        Public Event PrimaryAbilityRowChanging As PrimaryAbilityRowChangeEventHandler
        
        Public Event PrimaryAbilityRowDeleted As PrimaryAbilityRowChangeEventHandler
        
        Public Event PrimaryAbilityRowDeleting As PrimaryAbilityRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryAbilityRow(ByVal row As PrimaryAbilityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryAbilityRow(ByVal AbilityName As String, ByVal parentPrimaryRowByPrimary_PrimaryAbility As PrimaryRow) As PrimaryAbilityRow
            Dim rowPrimaryAbilityRow As PrimaryAbilityRow = CType(Me.NewRow,PrimaryAbilityRow)
            rowPrimaryAbilityRow.ItemArray = New Object() {AbilityName, parentPrimaryRowByPrimary_PrimaryAbility(17)}
            Me.Rows.Add(rowPrimaryAbilityRow)
            Return rowPrimaryAbilityRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryAbilityDataTable = CType(MyBase.Clone,PrimaryAbilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryAbilityDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAbilityName = Me.Columns("AbilityName")
            Me.columnPrimary_Id = Me.Columns("Primary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAbilityName = New DataColumn("AbilityName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilityName)
            Me.columnPrimary_Id = New DataColumn("Primary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimary_Id)
        End Sub
        
        Public Function NewPrimaryAbilityRow() As PrimaryAbilityRow
            Return CType(Me.NewRow,PrimaryAbilityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryAbilityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryAbilityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryAbilityRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryAbilityRowChanged(Me, New PrimaryAbilityRowChangeEvent(CType(e.Row,PrimaryAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryAbilityRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryAbilityRowChanging(Me, New PrimaryAbilityRowChangeEvent(CType(e.Row,PrimaryAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryAbilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryAbilityRowDeleted(Me, New PrimaryAbilityRowChangeEvent(CType(e.Row,PrimaryAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryAbilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryAbilityRowDeleting(Me, New PrimaryAbilityRowChangeEvent(CType(e.Row,PrimaryAbilityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryAbilityRow(ByVal row As PrimaryAbilityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryAbilityRow
        Inherits DataRow
        
        Private tablePrimaryAbility As PrimaryAbilityDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryAbility = CType(Me.Table,PrimaryAbilityDataTable)
        End Sub
        
        Public Property AbilityName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryAbility.AbilityNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryAbility.AbilityNameColumn) = value
            End Set
        End Property
        
        Public Property PrimaryRow As PrimaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Primary_PrimaryAbility")),PrimaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Primary_PrimaryAbility"))
            End Set
        End Property
        
        Public Function IsAbilityNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryAbility.AbilityNameColumn)
        End Function
        
        Public Sub SetAbilityNameNull()
            Me(Me.tablePrimaryAbility.AbilityNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryAbilityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryAbilityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryAbilityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryAbilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnPrimary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property Primary_IdColumn As DataColumn
            Get
                Return Me.columnPrimary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryModifierRow
            Get
                Return CType(Me.Rows(index),PrimaryModifierRow)
            End Get
        End Property
        
        Public Event PrimaryModifierRowChanged As PrimaryModifierRowChangeEventHandler
        
        Public Event PrimaryModifierRowChanging As PrimaryModifierRowChangeEventHandler
        
        Public Event PrimaryModifierRowDeleted As PrimaryModifierRowChangeEventHandler
        
        Public Event PrimaryModifierRowDeleting As PrimaryModifierRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryModifierRow(ByVal row As PrimaryModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryModifierRow(ByVal ModifierName As String, ByVal parentPrimaryRowByPrimary_PrimaryModifier As PrimaryRow) As PrimaryModifierRow
            Dim rowPrimaryModifierRow As PrimaryModifierRow = CType(Me.NewRow,PrimaryModifierRow)
            rowPrimaryModifierRow.ItemArray = New Object() {ModifierName, parentPrimaryRowByPrimary_PrimaryModifier(17)}
            Me.Rows.Add(rowPrimaryModifierRow)
            Return rowPrimaryModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryModifierDataTable = CType(MyBase.Clone,PrimaryModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnPrimary_Id = Me.Columns("Primary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnPrimary_Id = New DataColumn("Primary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimary_Id)
        End Sub
        
        Public Function NewPrimaryModifierRow() As PrimaryModifierRow
            Return CType(Me.NewRow,PrimaryModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryModifierRowChanged(Me, New PrimaryModifierRowChangeEvent(CType(e.Row,PrimaryModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryModifierRowChanging(Me, New PrimaryModifierRowChangeEvent(CType(e.Row,PrimaryModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryModifierRowDeleted(Me, New PrimaryModifierRowChangeEvent(CType(e.Row,PrimaryModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryModifierRowDeleting(Me, New PrimaryModifierRowChangeEvent(CType(e.Row,PrimaryModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryModifierRow(ByVal row As PrimaryModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryModifierRow
        Inherits DataRow
        
        Private tablePrimaryModifier As PrimaryModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryModifier = CType(Me.Table,PrimaryModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property PrimaryRow As PrimaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Primary_PrimaryModifier")),PrimaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Primary_PrimaryModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tablePrimaryModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryDamageResistanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnResistanceName As DataColumn
        
        Private columnPrimary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryDamageResistance")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ResistanceNameColumn As DataColumn
            Get
                Return Me.columnResistanceName
            End Get
        End Property
        
        Public ReadOnly Property Primary_IdColumn As DataColumn
            Get
                Return Me.columnPrimary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryDamageResistanceRow
            Get
                Return CType(Me.Rows(index),PrimaryDamageResistanceRow)
            End Get
        End Property
        
        Public Event PrimaryDamageResistanceRowChanged As PrimaryDamageResistanceRowChangeEventHandler
        
        Public Event PrimaryDamageResistanceRowChanging As PrimaryDamageResistanceRowChangeEventHandler
        
        Public Event PrimaryDamageResistanceRowDeleted As PrimaryDamageResistanceRowChangeEventHandler
        
        Public Event PrimaryDamageResistanceRowDeleting As PrimaryDamageResistanceRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryDamageResistanceRow(ByVal row As PrimaryDamageResistanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryDamageResistanceRow(ByVal ResistanceName As String, ByVal parentPrimaryRowByPrimary_PrimaryDamageResistance As PrimaryRow) As PrimaryDamageResistanceRow
            Dim rowPrimaryDamageResistanceRow As PrimaryDamageResistanceRow = CType(Me.NewRow,PrimaryDamageResistanceRow)
            rowPrimaryDamageResistanceRow.ItemArray = New Object() {ResistanceName, parentPrimaryRowByPrimary_PrimaryDamageResistance(17)}
            Me.Rows.Add(rowPrimaryDamageResistanceRow)
            Return rowPrimaryDamageResistanceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryDamageResistanceDataTable = CType(MyBase.Clone,PrimaryDamageResistanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryDamageResistanceDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnResistanceName = Me.Columns("ResistanceName")
            Me.columnPrimary_Id = Me.Columns("Primary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnResistanceName = New DataColumn("ResistanceName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResistanceName)
            Me.columnPrimary_Id = New DataColumn("Primary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimary_Id)
        End Sub
        
        Public Function NewPrimaryDamageResistanceRow() As PrimaryDamageResistanceRow
            Return CType(Me.NewRow,PrimaryDamageResistanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryDamageResistanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryDamageResistanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryDamageResistanceRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryDamageResistanceRowChanged(Me, New PrimaryDamageResistanceRowChangeEvent(CType(e.Row,PrimaryDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryDamageResistanceRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryDamageResistanceRowChanging(Me, New PrimaryDamageResistanceRowChangeEvent(CType(e.Row,PrimaryDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryDamageResistanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryDamageResistanceRowDeleted(Me, New PrimaryDamageResistanceRowChangeEvent(CType(e.Row,PrimaryDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryDamageResistanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryDamageResistanceRowDeleting(Me, New PrimaryDamageResistanceRowChangeEvent(CType(e.Row,PrimaryDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryDamageResistanceRow(ByVal row As PrimaryDamageResistanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryDamageResistanceRow
        Inherits DataRow
        
        Private tablePrimaryDamageResistance As PrimaryDamageResistanceDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryDamageResistance = CType(Me.Table,PrimaryDamageResistanceDataTable)
        End Sub
        
        Public Property ResistanceName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryDamageResistance.ResistanceNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryDamageResistance.ResistanceNameColumn) = value
            End Set
        End Property
        
        Public Property PrimaryRow As PrimaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Primary_PrimaryDamageResistance")),PrimaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Primary_PrimaryDamageResistance"))
            End Set
        End Property
        
        Public Function IsResistanceNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryDamageResistance.ResistanceNameColumn)
        End Function
        
        Public Sub SetResistanceNameNull()
            Me(Me.tablePrimaryDamageResistance.ResistanceNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryDamageResistanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryDamageResistanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryDamageResistanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryDamageResistanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnConditionName As DataColumn
        
        Private columnBaseDamage As DataColumn
        
        Private columnCriticalRange As DataColumn
        
        Private columnCriticalMultiplier As DataColumn
        
        Private columnEnhancement As DataColumn
        
        Private columnPrimaryCondition_Id As DataColumn
        
        Private columnPrimary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryCondition")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ConditionNameColumn As DataColumn
            Get
                Return Me.columnConditionName
            End Get
        End Property
        
        Public ReadOnly Property BaseDamageColumn As DataColumn
            Get
                Return Me.columnBaseDamage
            End Get
        End Property
        
        Public ReadOnly Property CriticalRangeColumn As DataColumn
            Get
                Return Me.columnCriticalRange
            End Get
        End Property
        
        Public ReadOnly Property CriticalMultiplierColumn As DataColumn
            Get
                Return Me.columnCriticalMultiplier
            End Get
        End Property
        
        Public ReadOnly Property EnhancementColumn As DataColumn
            Get
                Return Me.columnEnhancement
            End Get
        End Property
        
        Public ReadOnly Property PrimaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnPrimaryCondition_Id
            End Get
        End Property
        
        Public ReadOnly Property Primary_IdColumn As DataColumn
            Get
                Return Me.columnPrimary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryConditionRow
            Get
                Return CType(Me.Rows(index),PrimaryConditionRow)
            End Get
        End Property
        
        Public Event PrimaryConditionRowChanged As PrimaryConditionRowChangeEventHandler
        
        Public Event PrimaryConditionRowChanging As PrimaryConditionRowChangeEventHandler
        
        Public Event PrimaryConditionRowDeleted As PrimaryConditionRowChangeEventHandler
        
        Public Event PrimaryConditionRowDeleting As PrimaryConditionRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryConditionRow(ByVal row As PrimaryConditionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryConditionRow(ByVal ConditionName As String, ByVal BaseDamage As String, ByVal CriticalRange As String, ByVal CriticalMultiplier As String, ByVal Enhancement As String, ByVal parentPrimaryRowByPrimary_PrimaryCondition As PrimaryRow) As PrimaryConditionRow
            Dim rowPrimaryConditionRow As PrimaryConditionRow = CType(Me.NewRow,PrimaryConditionRow)
            rowPrimaryConditionRow.ItemArray = New Object() {ConditionName, BaseDamage, CriticalRange, CriticalMultiplier, Enhancement, Nothing, parentPrimaryRowByPrimary_PrimaryCondition(17)}
            Me.Rows.Add(rowPrimaryConditionRow)
            Return rowPrimaryConditionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryConditionDataTable = CType(MyBase.Clone,PrimaryConditionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryConditionDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnConditionName = Me.Columns("ConditionName")
            Me.columnBaseDamage = Me.Columns("BaseDamage")
            Me.columnCriticalRange = Me.Columns("CriticalRange")
            Me.columnCriticalMultiplier = Me.Columns("CriticalMultiplier")
            Me.columnEnhancement = Me.Columns("Enhancement")
            Me.columnPrimaryCondition_Id = Me.Columns("PrimaryCondition_Id")
            Me.columnPrimary_Id = Me.Columns("Primary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnConditionName = New DataColumn("ConditionName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConditionName)
            Me.columnBaseDamage = New DataColumn("BaseDamage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseDamage)
            Me.columnCriticalRange = New DataColumn("CriticalRange", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriticalRange)
            Me.columnCriticalMultiplier = New DataColumn("CriticalMultiplier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriticalMultiplier)
            Me.columnEnhancement = New DataColumn("Enhancement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnhancement)
            Me.columnPrimaryCondition_Id = New DataColumn("PrimaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimaryCondition_Id)
            Me.columnPrimary_Id = New DataColumn("Primary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimary_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPrimaryCondition_Id}, true))
            Me.columnPrimaryCondition_Id.AutoIncrement = true
            Me.columnPrimaryCondition_Id.AllowDBNull = false
            Me.columnPrimaryCondition_Id.Unique = true
        End Sub
        
        Public Function NewPrimaryConditionRow() As PrimaryConditionRow
            Return CType(Me.NewRow,PrimaryConditionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryConditionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryConditionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryConditionRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionRowChanged(Me, New PrimaryConditionRowChangeEvent(CType(e.Row,PrimaryConditionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryConditionRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionRowChanging(Me, New PrimaryConditionRowChangeEvent(CType(e.Row,PrimaryConditionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryConditionRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionRowDeleted(Me, New PrimaryConditionRowChangeEvent(CType(e.Row,PrimaryConditionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryConditionRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionRowDeleting(Me, New PrimaryConditionRowChangeEvent(CType(e.Row,PrimaryConditionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryConditionRow(ByVal row As PrimaryConditionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionRow
        Inherits DataRow
        
        Private tablePrimaryCondition As PrimaryConditionDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryCondition = CType(Me.Table,PrimaryConditionDataTable)
        End Sub
        
        Public Property ConditionName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryCondition.ConditionNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryCondition.ConditionNameColumn) = value
            End Set
        End Property
        
        Public Property BaseDamage As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryCondition.BaseDamageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryCondition.BaseDamageColumn) = value
            End Set
        End Property
        
        Public Property CriticalRange As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryCondition.CriticalRangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryCondition.CriticalRangeColumn) = value
            End Set
        End Property
        
        Public Property CriticalMultiplier As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryCondition.CriticalMultiplierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryCondition.CriticalMultiplierColumn) = value
            End Set
        End Property
        
        Public Property Enhancement As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryCondition.EnhancementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryCondition.EnhancementColumn) = value
            End Set
        End Property
        
        Public Property PrimaryRow As PrimaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Primary_PrimaryCondition")),PrimaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Primary_PrimaryCondition"))
            End Set
        End Property
        
        Public Function IsConditionNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryCondition.ConditionNameColumn)
        End Function
        
        Public Sub SetConditionNameNull()
            Me(Me.tablePrimaryCondition.ConditionNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseDamageNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryCondition.BaseDamageColumn)
        End Function
        
        Public Sub SetBaseDamageNull()
            Me(Me.tablePrimaryCondition.BaseDamageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriticalRangeNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryCondition.CriticalRangeColumn)
        End Function
        
        Public Sub SetCriticalRangeNull()
            Me(Me.tablePrimaryCondition.CriticalRangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriticalMultiplierNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryCondition.CriticalMultiplierColumn)
        End Function
        
        Public Sub SetCriticalMultiplierNull()
            Me(Me.tablePrimaryCondition.CriticalMultiplierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnhancementNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryCondition.EnhancementColumn)
        End Function
        
        Public Sub SetEnhancementNull()
            Me(Me.tablePrimaryCondition.EnhancementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPrimaryConditionalModifierRows() As PrimaryConditionalModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PrimaryCondition_PrimaryConditionalModifier")),PrimaryConditionalModifierRow())
        End Function
        
        Public Function GetPrimaryConditionalExtraDamageRows() As PrimaryConditionalExtraDamageRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PrimaryCondition_PrimaryConditionalExtraDamage")),PrimaryConditionalExtraDamageRow())
        End Function
        
        Public Function GetPrimaryConditionalAbilityRows() As PrimaryConditionalAbilityRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PrimaryCondition_PrimaryConditionalAbility")),PrimaryConditionalAbilityRow())
        End Function
        
        Public Function GetPrimaryConditionalDamageResistanceRows() As PrimaryConditionalDamageResistanceRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PrimaryCondition_PrimaryConditionalDamageResistance")),PrimaryConditionalDamageResistanceRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryConditionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryConditionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryConditionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnPrimaryCondition_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryConditionalModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property PrimaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnPrimaryCondition_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryConditionalModifierRow
            Get
                Return CType(Me.Rows(index),PrimaryConditionalModifierRow)
            End Get
        End Property
        
        Public Event PrimaryConditionalModifierRowChanged As PrimaryConditionalModifierRowChangeEventHandler
        
        Public Event PrimaryConditionalModifierRowChanging As PrimaryConditionalModifierRowChangeEventHandler
        
        Public Event PrimaryConditionalModifierRowDeleted As PrimaryConditionalModifierRowChangeEventHandler
        
        Public Event PrimaryConditionalModifierRowDeleting As PrimaryConditionalModifierRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryConditionalModifierRow(ByVal row As PrimaryConditionalModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryConditionalModifierRow(ByVal ModifierName As String, ByVal parentPrimaryConditionRowByPrimaryCondition_PrimaryConditionalModifier As PrimaryConditionRow) As PrimaryConditionalModifierRow
            Dim rowPrimaryConditionalModifierRow As PrimaryConditionalModifierRow = CType(Me.NewRow,PrimaryConditionalModifierRow)
            rowPrimaryConditionalModifierRow.ItemArray = New Object() {ModifierName, parentPrimaryConditionRowByPrimaryCondition_PrimaryConditionalModifier(5)}
            Me.Rows.Add(rowPrimaryConditionalModifierRow)
            Return rowPrimaryConditionalModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryConditionalModifierDataTable = CType(MyBase.Clone,PrimaryConditionalModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryConditionalModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnPrimaryCondition_Id = Me.Columns("PrimaryCondition_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnPrimaryCondition_Id = New DataColumn("PrimaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimaryCondition_Id)
        End Sub
        
        Public Function NewPrimaryConditionalModifierRow() As PrimaryConditionalModifierRow
            Return CType(Me.NewRow,PrimaryConditionalModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryConditionalModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryConditionalModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryConditionalModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalModifierRowChanged(Me, New PrimaryConditionalModifierRowChangeEvent(CType(e.Row,PrimaryConditionalModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryConditionalModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalModifierRowChanging(Me, New PrimaryConditionalModifierRowChangeEvent(CType(e.Row,PrimaryConditionalModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryConditionalModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalModifierRowDeleted(Me, New PrimaryConditionalModifierRowChangeEvent(CType(e.Row,PrimaryConditionalModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryConditionalModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalModifierRowDeleting(Me, New PrimaryConditionalModifierRowChangeEvent(CType(e.Row,PrimaryConditionalModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryConditionalModifierRow(ByVal row As PrimaryConditionalModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalModifierRow
        Inherits DataRow
        
        Private tablePrimaryConditionalModifier As PrimaryConditionalModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryConditionalModifier = CType(Me.Table,PrimaryConditionalModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryConditionalModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryConditionalModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property PrimaryConditionRow As PrimaryConditionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PrimaryCondition_PrimaryConditionalModifier")),PrimaryConditionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PrimaryCondition_PrimaryConditionalModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryConditionalModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tablePrimaryConditionalModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryConditionalModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryConditionalModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryConditionalModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalExtraDamageDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDamageName As DataColumn
        
        Private columnPrimaryCondition_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryConditionalExtraDamage")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property DamageNameColumn As DataColumn
            Get
                Return Me.columnDamageName
            End Get
        End Property
        
        Public ReadOnly Property PrimaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnPrimaryCondition_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryConditionalExtraDamageRow
            Get
                Return CType(Me.Rows(index),PrimaryConditionalExtraDamageRow)
            End Get
        End Property
        
        Public Event PrimaryConditionalExtraDamageRowChanged As PrimaryConditionalExtraDamageRowChangeEventHandler
        
        Public Event PrimaryConditionalExtraDamageRowChanging As PrimaryConditionalExtraDamageRowChangeEventHandler
        
        Public Event PrimaryConditionalExtraDamageRowDeleted As PrimaryConditionalExtraDamageRowChangeEventHandler
        
        Public Event PrimaryConditionalExtraDamageRowDeleting As PrimaryConditionalExtraDamageRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryConditionalExtraDamageRow(ByVal row As PrimaryConditionalExtraDamageRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryConditionalExtraDamageRow(ByVal DamageName As String, ByVal parentPrimaryConditionRowByPrimaryCondition_PrimaryConditionalExtraDamage As PrimaryConditionRow) As PrimaryConditionalExtraDamageRow
            Dim rowPrimaryConditionalExtraDamageRow As PrimaryConditionalExtraDamageRow = CType(Me.NewRow,PrimaryConditionalExtraDamageRow)
            rowPrimaryConditionalExtraDamageRow.ItemArray = New Object() {DamageName, parentPrimaryConditionRowByPrimaryCondition_PrimaryConditionalExtraDamage(5)}
            Me.Rows.Add(rowPrimaryConditionalExtraDamageRow)
            Return rowPrimaryConditionalExtraDamageRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryConditionalExtraDamageDataTable = CType(MyBase.Clone,PrimaryConditionalExtraDamageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryConditionalExtraDamageDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnDamageName = Me.Columns("DamageName")
            Me.columnPrimaryCondition_Id = Me.Columns("PrimaryCondition_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDamageName = New DataColumn("DamageName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDamageName)
            Me.columnPrimaryCondition_Id = New DataColumn("PrimaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimaryCondition_Id)
        End Sub
        
        Public Function NewPrimaryConditionalExtraDamageRow() As PrimaryConditionalExtraDamageRow
            Return CType(Me.NewRow,PrimaryConditionalExtraDamageRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryConditionalExtraDamageRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryConditionalExtraDamageRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryConditionalExtraDamageRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalExtraDamageRowChanged(Me, New PrimaryConditionalExtraDamageRowChangeEvent(CType(e.Row,PrimaryConditionalExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryConditionalExtraDamageRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalExtraDamageRowChanging(Me, New PrimaryConditionalExtraDamageRowChangeEvent(CType(e.Row,PrimaryConditionalExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryConditionalExtraDamageRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalExtraDamageRowDeleted(Me, New PrimaryConditionalExtraDamageRowChangeEvent(CType(e.Row,PrimaryConditionalExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryConditionalExtraDamageRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalExtraDamageRowDeleting(Me, New PrimaryConditionalExtraDamageRowChangeEvent(CType(e.Row,PrimaryConditionalExtraDamageRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryConditionalExtraDamageRow(ByVal row As PrimaryConditionalExtraDamageRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalExtraDamageRow
        Inherits DataRow
        
        Private tablePrimaryConditionalExtraDamage As PrimaryConditionalExtraDamageDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryConditionalExtraDamage = CType(Me.Table,PrimaryConditionalExtraDamageDataTable)
        End Sub
        
        Public Property DamageName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryConditionalExtraDamage.DamageNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryConditionalExtraDamage.DamageNameColumn) = value
            End Set
        End Property
        
        Public Property PrimaryConditionRow As PrimaryConditionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PrimaryCondition_PrimaryConditionalExtraDamage")),PrimaryConditionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PrimaryCondition_PrimaryConditionalExtraDamage"))
            End Set
        End Property
        
        Public Function IsDamageNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryConditionalExtraDamage.DamageNameColumn)
        End Function
        
        Public Sub SetDamageNameNull()
            Me(Me.tablePrimaryConditionalExtraDamage.DamageNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalExtraDamageRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryConditionalExtraDamageRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryConditionalExtraDamageRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryConditionalExtraDamageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalAbilityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAbilityName As DataColumn
        
        Private columnPrimaryCondition_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryConditionalAbility")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property AbilityNameColumn As DataColumn
            Get
                Return Me.columnAbilityName
            End Get
        End Property
        
        Public ReadOnly Property PrimaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnPrimaryCondition_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryConditionalAbilityRow
            Get
                Return CType(Me.Rows(index),PrimaryConditionalAbilityRow)
            End Get
        End Property
        
        Public Event PrimaryConditionalAbilityRowChanged As PrimaryConditionalAbilityRowChangeEventHandler
        
        Public Event PrimaryConditionalAbilityRowChanging As PrimaryConditionalAbilityRowChangeEventHandler
        
        Public Event PrimaryConditionalAbilityRowDeleted As PrimaryConditionalAbilityRowChangeEventHandler
        
        Public Event PrimaryConditionalAbilityRowDeleting As PrimaryConditionalAbilityRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryConditionalAbilityRow(ByVal row As PrimaryConditionalAbilityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryConditionalAbilityRow(ByVal AbilityName As String, ByVal parentPrimaryConditionRowByPrimaryCondition_PrimaryConditionalAbility As PrimaryConditionRow) As PrimaryConditionalAbilityRow
            Dim rowPrimaryConditionalAbilityRow As PrimaryConditionalAbilityRow = CType(Me.NewRow,PrimaryConditionalAbilityRow)
            rowPrimaryConditionalAbilityRow.ItemArray = New Object() {AbilityName, parentPrimaryConditionRowByPrimaryCondition_PrimaryConditionalAbility(5)}
            Me.Rows.Add(rowPrimaryConditionalAbilityRow)
            Return rowPrimaryConditionalAbilityRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryConditionalAbilityDataTable = CType(MyBase.Clone,PrimaryConditionalAbilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryConditionalAbilityDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAbilityName = Me.Columns("AbilityName")
            Me.columnPrimaryCondition_Id = Me.Columns("PrimaryCondition_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAbilityName = New DataColumn("AbilityName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilityName)
            Me.columnPrimaryCondition_Id = New DataColumn("PrimaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimaryCondition_Id)
        End Sub
        
        Public Function NewPrimaryConditionalAbilityRow() As PrimaryConditionalAbilityRow
            Return CType(Me.NewRow,PrimaryConditionalAbilityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryConditionalAbilityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryConditionalAbilityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryConditionalAbilityRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalAbilityRowChanged(Me, New PrimaryConditionalAbilityRowChangeEvent(CType(e.Row,PrimaryConditionalAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryConditionalAbilityRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalAbilityRowChanging(Me, New PrimaryConditionalAbilityRowChangeEvent(CType(e.Row,PrimaryConditionalAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryConditionalAbilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalAbilityRowDeleted(Me, New PrimaryConditionalAbilityRowChangeEvent(CType(e.Row,PrimaryConditionalAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryConditionalAbilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalAbilityRowDeleting(Me, New PrimaryConditionalAbilityRowChangeEvent(CType(e.Row,PrimaryConditionalAbilityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryConditionalAbilityRow(ByVal row As PrimaryConditionalAbilityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalAbilityRow
        Inherits DataRow
        
        Private tablePrimaryConditionalAbility As PrimaryConditionalAbilityDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryConditionalAbility = CType(Me.Table,PrimaryConditionalAbilityDataTable)
        End Sub
        
        Public Property AbilityName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryConditionalAbility.AbilityNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryConditionalAbility.AbilityNameColumn) = value
            End Set
        End Property
        
        Public Property PrimaryConditionRow As PrimaryConditionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PrimaryCondition_PrimaryConditionalAbility")),PrimaryConditionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PrimaryCondition_PrimaryConditionalAbility"))
            End Set
        End Property
        
        Public Function IsAbilityNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryConditionalAbility.AbilityNameColumn)
        End Function
        
        Public Sub SetAbilityNameNull()
            Me(Me.tablePrimaryConditionalAbility.AbilityNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalAbilityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryConditionalAbilityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryConditionalAbilityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryConditionalAbilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalDamageResistanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnResistanceName As DataColumn
        
        Private columnPrimaryCondition_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PrimaryConditionalDamageResistance")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ResistanceNameColumn As DataColumn
            Get
                Return Me.columnResistanceName
            End Get
        End Property
        
        Public ReadOnly Property PrimaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnPrimaryCondition_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrimaryConditionalDamageResistanceRow
            Get
                Return CType(Me.Rows(index),PrimaryConditionalDamageResistanceRow)
            End Get
        End Property
        
        Public Event PrimaryConditionalDamageResistanceRowChanged As PrimaryConditionalDamageResistanceRowChangeEventHandler
        
        Public Event PrimaryConditionalDamageResistanceRowChanging As PrimaryConditionalDamageResistanceRowChangeEventHandler
        
        Public Event PrimaryConditionalDamageResistanceRowDeleted As PrimaryConditionalDamageResistanceRowChangeEventHandler
        
        Public Event PrimaryConditionalDamageResistanceRowDeleting As PrimaryConditionalDamageResistanceRowChangeEventHandler
        
        Public Overloads Sub AddPrimaryConditionalDamageResistanceRow(ByVal row As PrimaryConditionalDamageResistanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPrimaryConditionalDamageResistanceRow(ByVal ResistanceName As String, ByVal parentPrimaryConditionRowByPrimaryCondition_PrimaryConditionalDamageResistance As PrimaryConditionRow) As PrimaryConditionalDamageResistanceRow
            Dim rowPrimaryConditionalDamageResistanceRow As PrimaryConditionalDamageResistanceRow = CType(Me.NewRow,PrimaryConditionalDamageResistanceRow)
            rowPrimaryConditionalDamageResistanceRow.ItemArray = New Object() {ResistanceName, parentPrimaryConditionRowByPrimaryCondition_PrimaryConditionalDamageResistance(5)}
            Me.Rows.Add(rowPrimaryConditionalDamageResistanceRow)
            Return rowPrimaryConditionalDamageResistanceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PrimaryConditionalDamageResistanceDataTable = CType(MyBase.Clone,PrimaryConditionalDamageResistanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PrimaryConditionalDamageResistanceDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnResistanceName = Me.Columns("ResistanceName")
            Me.columnPrimaryCondition_Id = Me.Columns("PrimaryCondition_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnResistanceName = New DataColumn("ResistanceName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResistanceName)
            Me.columnPrimaryCondition_Id = New DataColumn("PrimaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPrimaryCondition_Id)
        End Sub
        
        Public Function NewPrimaryConditionalDamageResistanceRow() As PrimaryConditionalDamageResistanceRow
            Return CType(Me.NewRow,PrimaryConditionalDamageResistanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PrimaryConditionalDamageResistanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrimaryConditionalDamageResistanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrimaryConditionalDamageResistanceRowChangedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalDamageResistanceRowChanged(Me, New PrimaryConditionalDamageResistanceRowChangeEvent(CType(e.Row,PrimaryConditionalDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrimaryConditionalDamageResistanceRowChangingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalDamageResistanceRowChanging(Me, New PrimaryConditionalDamageResistanceRowChangeEvent(CType(e.Row,PrimaryConditionalDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrimaryConditionalDamageResistanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalDamageResistanceRowDeleted(Me, New PrimaryConditionalDamageResistanceRowChangeEvent(CType(e.Row,PrimaryConditionalDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrimaryConditionalDamageResistanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrimaryConditionalDamageResistanceRowDeleting(Me, New PrimaryConditionalDamageResistanceRowChangeEvent(CType(e.Row,PrimaryConditionalDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePrimaryConditionalDamageResistanceRow(ByVal row As PrimaryConditionalDamageResistanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalDamageResistanceRow
        Inherits DataRow
        
        Private tablePrimaryConditionalDamageResistance As PrimaryConditionalDamageResistanceDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrimaryConditionalDamageResistance = CType(Me.Table,PrimaryConditionalDamageResistanceDataTable)
        End Sub
        
        Public Property ResistanceName As String
            Get
                Try 
                    Return CType(Me(Me.tablePrimaryConditionalDamageResistance.ResistanceNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrimaryConditionalDamageResistance.ResistanceNameColumn) = value
            End Set
        End Property
        
        Public Property PrimaryConditionRow As PrimaryConditionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PrimaryCondition_PrimaryConditionalDamageResistance")),PrimaryConditionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PrimaryCondition_PrimaryConditionalDamageResistance"))
            End Set
        End Property
        
        Public Function IsResistanceNameNull() As Boolean
            Return Me.IsNull(Me.tablePrimaryConditionalDamageResistance.ResistanceNameColumn)
        End Function
        
        Public Sub SetResistanceNameNull()
            Me(Me.tablePrimaryConditionalDamageResistance.ResistanceNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PrimaryConditionalDamageResistanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PrimaryConditionalDamageResistanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PrimaryConditionalDamageResistanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PrimaryConditionalDamageResistanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBaseName As DataColumn
        
        Private columnFullName As DataColumn
        
        Private columnAttacks As DataColumn
        
        Private columnWield As DataColumn
        
        Private columnWeaponType As DataColumn
        
        Private columnCriticalRange As DataColumn
        
        Private columnCriticalMultiplier As DataColumn
        
        Private columnBaseDamageType As DataColumn
        
        Private columnBaseDamageLethality As DataColumn
        
        Private columnBaseDamage As DataColumn
        
        Private columnEnhancement As DataColumn
        
        Private columnRange As DataColumn
        
        Private columnReachRange As DataColumn
        
        Private columnAlignment As DataColumn
        
        Private columnAttackNumber As DataColumn
        
        Private columnIsNatural As DataColumn
        
        Private columnIncrements As DataColumn
        
        Private columnSecondary_Id As DataColumn
        
        Private columnAttack_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Secondary")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property BaseNameColumn As DataColumn
            Get
                Return Me.columnBaseName
            End Get
        End Property
        
        Public ReadOnly Property FullNameColumn As DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        Public ReadOnly Property AttacksColumn As DataColumn
            Get
                Return Me.columnAttacks
            End Get
        End Property
        
        Public ReadOnly Property WieldColumn As DataColumn
            Get
                Return Me.columnWield
            End Get
        End Property
        
        Public ReadOnly Property WeaponTypeColumn As DataColumn
            Get
                Return Me.columnWeaponType
            End Get
        End Property
        
        Public ReadOnly Property CriticalRangeColumn As DataColumn
            Get
                Return Me.columnCriticalRange
            End Get
        End Property
        
        Public ReadOnly Property CriticalMultiplierColumn As DataColumn
            Get
                Return Me.columnCriticalMultiplier
            End Get
        End Property
        
        Public ReadOnly Property BaseDamageTypeColumn As DataColumn
            Get
                Return Me.columnBaseDamageType
            End Get
        End Property
        
        Public ReadOnly Property BaseDamageLethalityColumn As DataColumn
            Get
                Return Me.columnBaseDamageLethality
            End Get
        End Property
        
        Public ReadOnly Property BaseDamageColumn As DataColumn
            Get
                Return Me.columnBaseDamage
            End Get
        End Property
        
        Public ReadOnly Property EnhancementColumn As DataColumn
            Get
                Return Me.columnEnhancement
            End Get
        End Property
        
        Public ReadOnly Property RangeColumn As DataColumn
            Get
                Return Me.columnRange
            End Get
        End Property
        
        Public ReadOnly Property ReachRangeColumn As DataColumn
            Get
                Return Me.columnReachRange
            End Get
        End Property
        
        Public ReadOnly Property AlignmentColumn As DataColumn
            Get
                Return Me.columnAlignment
            End Get
        End Property
        
        Public ReadOnly Property AttackNumberColumn As DataColumn
            Get
                Return Me.columnAttackNumber
            End Get
        End Property
        
        Public ReadOnly Property IsNaturalColumn As DataColumn
            Get
                Return Me.columnIsNatural
            End Get
        End Property
        
        Public ReadOnly Property IncrementsColumn As DataColumn
            Get
                Return Me.columnIncrements
            End Get
        End Property
        
        Public ReadOnly Property Secondary_IdColumn As DataColumn
            Get
                Return Me.columnSecondary_Id
            End Get
        End Property
        
        Public ReadOnly Property Attack_IdColumn As DataColumn
            Get
                Return Me.columnAttack_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryRow
            Get
                Return CType(Me.Rows(index),SecondaryRow)
            End Get
        End Property
        
        Public Event SecondaryRowChanged As SecondaryRowChangeEventHandler
        
        Public Event SecondaryRowChanging As SecondaryRowChangeEventHandler
        
        Public Event SecondaryRowDeleted As SecondaryRowChangeEventHandler
        
        Public Event SecondaryRowDeleting As SecondaryRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryRow(ByVal row As SecondaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryRow( _
                    ByVal BaseName As String,  _
                    ByVal FullName As String,  _
                    ByVal Attacks As String,  _
                    ByVal Wield As String,  _
                    ByVal WeaponType As String,  _
                    ByVal CriticalRange As String,  _
                    ByVal CriticalMultiplier As String,  _
                    ByVal BaseDamageType As String,  _
                    ByVal BaseDamageLethality As String,  _
                    ByVal BaseDamage As String,  _
                    ByVal Enhancement As String,  _
                    ByVal Range As String,  _
                    ByVal ReachRange As String,  _
                    ByVal Alignment As String,  _
                    ByVal AttackNumber As String,  _
                    ByVal IsNatural As String,  _
                    ByVal Increments As String,  _
                    ByVal parentAttackRowByAttack_Secondary As AttackRow) As SecondaryRow
            Dim rowSecondaryRow As SecondaryRow = CType(Me.NewRow,SecondaryRow)
            rowSecondaryRow.ItemArray = New Object() {BaseName, FullName, Attacks, Wield, WeaponType, CriticalRange, CriticalMultiplier, BaseDamageType, BaseDamageLethality, BaseDamage, Enhancement, Range, ReachRange, Alignment, AttackNumber, IsNatural, Increments, Nothing, parentAttackRowByAttack_Secondary(0)}
            Me.Rows.Add(rowSecondaryRow)
            Return rowSecondaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryDataTable = CType(MyBase.Clone,SecondaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnBaseName = Me.Columns("BaseName")
            Me.columnFullName = Me.Columns("FullName")
            Me.columnAttacks = Me.Columns("Attacks")
            Me.columnWield = Me.Columns("Wield")
            Me.columnWeaponType = Me.Columns("WeaponType")
            Me.columnCriticalRange = Me.Columns("CriticalRange")
            Me.columnCriticalMultiplier = Me.Columns("CriticalMultiplier")
            Me.columnBaseDamageType = Me.Columns("BaseDamageType")
            Me.columnBaseDamageLethality = Me.Columns("BaseDamageLethality")
            Me.columnBaseDamage = Me.Columns("BaseDamage")
            Me.columnEnhancement = Me.Columns("Enhancement")
            Me.columnRange = Me.Columns("Range")
            Me.columnReachRange = Me.Columns("ReachRange")
            Me.columnAlignment = Me.Columns("Alignment")
            Me.columnAttackNumber = Me.Columns("AttackNumber")
            Me.columnIsNatural = Me.Columns("IsNatural")
            Me.columnIncrements = Me.Columns("Increments")
            Me.columnSecondary_Id = Me.Columns("Secondary_Id")
            Me.columnAttack_Id = Me.Columns("Attack_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnBaseName = New DataColumn("BaseName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseName)
            Me.columnFullName = New DataColumn("FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullName)
            Me.columnAttacks = New DataColumn("Attacks", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAttacks)
            Me.columnWield = New DataColumn("Wield", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWield)
            Me.columnWeaponType = New DataColumn("WeaponType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWeaponType)
            Me.columnCriticalRange = New DataColumn("CriticalRange", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriticalRange)
            Me.columnCriticalMultiplier = New DataColumn("CriticalMultiplier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriticalMultiplier)
            Me.columnBaseDamageType = New DataColumn("BaseDamageType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseDamageType)
            Me.columnBaseDamageLethality = New DataColumn("BaseDamageLethality", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseDamageLethality)
            Me.columnBaseDamage = New DataColumn("BaseDamage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseDamage)
            Me.columnEnhancement = New DataColumn("Enhancement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnhancement)
            Me.columnRange = New DataColumn("Range", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRange)
            Me.columnReachRange = New DataColumn("ReachRange", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReachRange)
            Me.columnAlignment = New DataColumn("Alignment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlignment)
            Me.columnAttackNumber = New DataColumn("AttackNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAttackNumber)
            Me.columnIsNatural = New DataColumn("IsNatural", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsNatural)
            Me.columnIncrements = New DataColumn("Increments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIncrements)
            Me.columnSecondary_Id = New DataColumn("Secondary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondary_Id)
            Me.columnAttack_Id = New DataColumn("Attack_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAttack_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSecondary_Id}, true))
            Me.columnSecondary_Id.AutoIncrement = true
            Me.columnSecondary_Id.AllowDBNull = false
            Me.columnSecondary_Id.Unique = true
        End Sub
        
        Public Function NewSecondaryRow() As SecondaryRow
            Return CType(Me.NewRow,SecondaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryRowChanged(Me, New SecondaryRowChangeEvent(CType(e.Row,SecondaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryRowChanging(Me, New SecondaryRowChangeEvent(CType(e.Row,SecondaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryRowDeleted(Me, New SecondaryRowChangeEvent(CType(e.Row,SecondaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryRowDeleting(Me, New SecondaryRowChangeEvent(CType(e.Row,SecondaryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryRow(ByVal row As SecondaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryRow
        Inherits DataRow
        
        Private tableSecondary As SecondaryDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondary = CType(Me.Table,SecondaryDataTable)
        End Sub
        
        Public Property BaseName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.BaseNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.BaseNameColumn) = value
            End Set
        End Property
        
        Public Property FullName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.FullNameColumn) = value
            End Set
        End Property
        
        Public Property Attacks As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.AttacksColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.AttacksColumn) = value
            End Set
        End Property
        
        Public Property Wield As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.WieldColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.WieldColumn) = value
            End Set
        End Property
        
        Public Property WeaponType As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.WeaponTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.WeaponTypeColumn) = value
            End Set
        End Property
        
        Public Property CriticalRange As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.CriticalRangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.CriticalRangeColumn) = value
            End Set
        End Property
        
        Public Property CriticalMultiplier As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.CriticalMultiplierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.CriticalMultiplierColumn) = value
            End Set
        End Property
        
        Public Property BaseDamageType As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.BaseDamageTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.BaseDamageTypeColumn) = value
            End Set
        End Property
        
        Public Property BaseDamageLethality As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.BaseDamageLethalityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.BaseDamageLethalityColumn) = value
            End Set
        End Property
        
        Public Property BaseDamage As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.BaseDamageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.BaseDamageColumn) = value
            End Set
        End Property
        
        Public Property Enhancement As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.EnhancementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.EnhancementColumn) = value
            End Set
        End Property
        
        Public Property Range As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.RangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.RangeColumn) = value
            End Set
        End Property
        
        Public Property ReachRange As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.ReachRangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.ReachRangeColumn) = value
            End Set
        End Property
        
        Public Property Alignment As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.AlignmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.AlignmentColumn) = value
            End Set
        End Property
        
        Public Property AttackNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.AttackNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.AttackNumberColumn) = value
            End Set
        End Property
        
        Public Property IsNatural As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.IsNaturalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.IsNaturalColumn) = value
            End Set
        End Property
        
        Public Property Increments As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondary.IncrementsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondary.IncrementsColumn) = value
            End Set
        End Property
        
        Public Property AttackRow As AttackRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Attack_Secondary")),AttackRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Attack_Secondary"))
            End Set
        End Property
        
        Public Function IsBaseNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.BaseNameColumn)
        End Function
        
        Public Sub SetBaseNameNull()
            Me(Me.tableSecondary.BaseNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.FullNameColumn)
        End Function
        
        Public Sub SetFullNameNull()
            Me(Me.tableSecondary.FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAttacksNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.AttacksColumn)
        End Function
        
        Public Sub SetAttacksNull()
            Me(Me.tableSecondary.AttacksColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWieldNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.WieldColumn)
        End Function
        
        Public Sub SetWieldNull()
            Me(Me.tableSecondary.WieldColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWeaponTypeNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.WeaponTypeColumn)
        End Function
        
        Public Sub SetWeaponTypeNull()
            Me(Me.tableSecondary.WeaponTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriticalRangeNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.CriticalRangeColumn)
        End Function
        
        Public Sub SetCriticalRangeNull()
            Me(Me.tableSecondary.CriticalRangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriticalMultiplierNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.CriticalMultiplierColumn)
        End Function
        
        Public Sub SetCriticalMultiplierNull()
            Me(Me.tableSecondary.CriticalMultiplierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseDamageTypeNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.BaseDamageTypeColumn)
        End Function
        
        Public Sub SetBaseDamageTypeNull()
            Me(Me.tableSecondary.BaseDamageTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseDamageLethalityNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.BaseDamageLethalityColumn)
        End Function
        
        Public Sub SetBaseDamageLethalityNull()
            Me(Me.tableSecondary.BaseDamageLethalityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseDamageNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.BaseDamageColumn)
        End Function
        
        Public Sub SetBaseDamageNull()
            Me(Me.tableSecondary.BaseDamageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnhancementNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.EnhancementColumn)
        End Function
        
        Public Sub SetEnhancementNull()
            Me(Me.tableSecondary.EnhancementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRangeNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.RangeColumn)
        End Function
        
        Public Sub SetRangeNull()
            Me(Me.tableSecondary.RangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReachRangeNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.ReachRangeColumn)
        End Function
        
        Public Sub SetReachRangeNull()
            Me(Me.tableSecondary.ReachRangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlignmentNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.AlignmentColumn)
        End Function
        
        Public Sub SetAlignmentNull()
            Me(Me.tableSecondary.AlignmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAttackNumberNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.AttackNumberColumn)
        End Function
        
        Public Sub SetAttackNumberNull()
            Me(Me.tableSecondary.AttackNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsNaturalNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.IsNaturalColumn)
        End Function
        
        Public Sub SetIsNaturalNull()
            Me(Me.tableSecondary.IsNaturalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIncrementsNull() As Boolean
            Return Me.IsNull(Me.tableSecondary.IncrementsColumn)
        End Function
        
        Public Sub SetIncrementsNull()
            Me(Me.tableSecondary.IncrementsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSecondaryExtraDamageRows() As SecondaryExtraDamageRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Secondary_SecondaryExtraDamage")),SecondaryExtraDamageRow())
        End Function
        
        Public Function GetSecondaryAbilityRows() As SecondaryAbilityRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Secondary_SecondaryAbility")),SecondaryAbilityRow())
        End Function
        
        Public Function GetSecondaryModifierRows() As SecondaryModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Secondary_SecondaryModifier")),SecondaryModifierRow())
        End Function
        
        Public Function GetSecondaryDamageResistanceRows() As SecondaryDamageResistanceRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Secondary_SecondaryDamageResistance")),SecondaryDamageResistanceRow())
        End Function
        
        Public Function GetSecondaryConditionRows() As SecondaryConditionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Secondary_SecondaryCondition")),SecondaryConditionRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryExtraDamageDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDamageName As DataColumn
        
        Private columnSecondary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryExtraDamage")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property DamageNameColumn As DataColumn
            Get
                Return Me.columnDamageName
            End Get
        End Property
        
        Public ReadOnly Property Secondary_IdColumn As DataColumn
            Get
                Return Me.columnSecondary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryExtraDamageRow
            Get
                Return CType(Me.Rows(index),SecondaryExtraDamageRow)
            End Get
        End Property
        
        Public Event SecondaryExtraDamageRowChanged As SecondaryExtraDamageRowChangeEventHandler
        
        Public Event SecondaryExtraDamageRowChanging As SecondaryExtraDamageRowChangeEventHandler
        
        Public Event SecondaryExtraDamageRowDeleted As SecondaryExtraDamageRowChangeEventHandler
        
        Public Event SecondaryExtraDamageRowDeleting As SecondaryExtraDamageRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryExtraDamageRow(ByVal row As SecondaryExtraDamageRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryExtraDamageRow(ByVal DamageName As String, ByVal parentSecondaryRowBySecondary_SecondaryExtraDamage As SecondaryRow) As SecondaryExtraDamageRow
            Dim rowSecondaryExtraDamageRow As SecondaryExtraDamageRow = CType(Me.NewRow,SecondaryExtraDamageRow)
            rowSecondaryExtraDamageRow.ItemArray = New Object() {DamageName, parentSecondaryRowBySecondary_SecondaryExtraDamage(17)}
            Me.Rows.Add(rowSecondaryExtraDamageRow)
            Return rowSecondaryExtraDamageRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryExtraDamageDataTable = CType(MyBase.Clone,SecondaryExtraDamageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryExtraDamageDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnDamageName = Me.Columns("DamageName")
            Me.columnSecondary_Id = Me.Columns("Secondary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDamageName = New DataColumn("DamageName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDamageName)
            Me.columnSecondary_Id = New DataColumn("Secondary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondary_Id)
        End Sub
        
        Public Function NewSecondaryExtraDamageRow() As SecondaryExtraDamageRow
            Return CType(Me.NewRow,SecondaryExtraDamageRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryExtraDamageRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryExtraDamageRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryExtraDamageRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryExtraDamageRowChanged(Me, New SecondaryExtraDamageRowChangeEvent(CType(e.Row,SecondaryExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryExtraDamageRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryExtraDamageRowChanging(Me, New SecondaryExtraDamageRowChangeEvent(CType(e.Row,SecondaryExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryExtraDamageRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryExtraDamageRowDeleted(Me, New SecondaryExtraDamageRowChangeEvent(CType(e.Row,SecondaryExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryExtraDamageRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryExtraDamageRowDeleting(Me, New SecondaryExtraDamageRowChangeEvent(CType(e.Row,SecondaryExtraDamageRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryExtraDamageRow(ByVal row As SecondaryExtraDamageRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryExtraDamageRow
        Inherits DataRow
        
        Private tableSecondaryExtraDamage As SecondaryExtraDamageDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryExtraDamage = CType(Me.Table,SecondaryExtraDamageDataTable)
        End Sub
        
        Public Property DamageName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryExtraDamage.DamageNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryExtraDamage.DamageNameColumn) = value
            End Set
        End Property
        
        Public Property SecondaryRow As SecondaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Secondary_SecondaryExtraDamage")),SecondaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Secondary_SecondaryExtraDamage"))
            End Set
        End Property
        
        Public Function IsDamageNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryExtraDamage.DamageNameColumn)
        End Function
        
        Public Sub SetDamageNameNull()
            Me(Me.tableSecondaryExtraDamage.DamageNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryExtraDamageRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryExtraDamageRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryExtraDamageRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryExtraDamageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryAbilityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAbilityName As DataColumn
        
        Private columnSecondary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryAbility")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property AbilityNameColumn As DataColumn
            Get
                Return Me.columnAbilityName
            End Get
        End Property
        
        Public ReadOnly Property Secondary_IdColumn As DataColumn
            Get
                Return Me.columnSecondary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryAbilityRow
            Get
                Return CType(Me.Rows(index),SecondaryAbilityRow)
            End Get
        End Property
        
        Public Event SecondaryAbilityRowChanged As SecondaryAbilityRowChangeEventHandler
        
        Public Event SecondaryAbilityRowChanging As SecondaryAbilityRowChangeEventHandler
        
        Public Event SecondaryAbilityRowDeleted As SecondaryAbilityRowChangeEventHandler
        
        Public Event SecondaryAbilityRowDeleting As SecondaryAbilityRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryAbilityRow(ByVal row As SecondaryAbilityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryAbilityRow(ByVal AbilityName As String, ByVal parentSecondaryRowBySecondary_SecondaryAbility As SecondaryRow) As SecondaryAbilityRow
            Dim rowSecondaryAbilityRow As SecondaryAbilityRow = CType(Me.NewRow,SecondaryAbilityRow)
            rowSecondaryAbilityRow.ItemArray = New Object() {AbilityName, parentSecondaryRowBySecondary_SecondaryAbility(17)}
            Me.Rows.Add(rowSecondaryAbilityRow)
            Return rowSecondaryAbilityRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryAbilityDataTable = CType(MyBase.Clone,SecondaryAbilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryAbilityDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAbilityName = Me.Columns("AbilityName")
            Me.columnSecondary_Id = Me.Columns("Secondary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAbilityName = New DataColumn("AbilityName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilityName)
            Me.columnSecondary_Id = New DataColumn("Secondary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondary_Id)
        End Sub
        
        Public Function NewSecondaryAbilityRow() As SecondaryAbilityRow
            Return CType(Me.NewRow,SecondaryAbilityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryAbilityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryAbilityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryAbilityRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryAbilityRowChanged(Me, New SecondaryAbilityRowChangeEvent(CType(e.Row,SecondaryAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryAbilityRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryAbilityRowChanging(Me, New SecondaryAbilityRowChangeEvent(CType(e.Row,SecondaryAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryAbilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryAbilityRowDeleted(Me, New SecondaryAbilityRowChangeEvent(CType(e.Row,SecondaryAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryAbilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryAbilityRowDeleting(Me, New SecondaryAbilityRowChangeEvent(CType(e.Row,SecondaryAbilityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryAbilityRow(ByVal row As SecondaryAbilityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryAbilityRow
        Inherits DataRow
        
        Private tableSecondaryAbility As SecondaryAbilityDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryAbility = CType(Me.Table,SecondaryAbilityDataTable)
        End Sub
        
        Public Property AbilityName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryAbility.AbilityNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryAbility.AbilityNameColumn) = value
            End Set
        End Property
        
        Public Property SecondaryRow As SecondaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Secondary_SecondaryAbility")),SecondaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Secondary_SecondaryAbility"))
            End Set
        End Property
        
        Public Function IsAbilityNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryAbility.AbilityNameColumn)
        End Function
        
        Public Sub SetAbilityNameNull()
            Me(Me.tableSecondaryAbility.AbilityNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryAbilityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryAbilityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryAbilityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryAbilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnSecondary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property Secondary_IdColumn As DataColumn
            Get
                Return Me.columnSecondary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryModifierRow
            Get
                Return CType(Me.Rows(index),SecondaryModifierRow)
            End Get
        End Property
        
        Public Event SecondaryModifierRowChanged As SecondaryModifierRowChangeEventHandler
        
        Public Event SecondaryModifierRowChanging As SecondaryModifierRowChangeEventHandler
        
        Public Event SecondaryModifierRowDeleted As SecondaryModifierRowChangeEventHandler
        
        Public Event SecondaryModifierRowDeleting As SecondaryModifierRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryModifierRow(ByVal row As SecondaryModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryModifierRow(ByVal ModifierName As String, ByVal parentSecondaryRowBySecondary_SecondaryModifier As SecondaryRow) As SecondaryModifierRow
            Dim rowSecondaryModifierRow As SecondaryModifierRow = CType(Me.NewRow,SecondaryModifierRow)
            rowSecondaryModifierRow.ItemArray = New Object() {ModifierName, parentSecondaryRowBySecondary_SecondaryModifier(17)}
            Me.Rows.Add(rowSecondaryModifierRow)
            Return rowSecondaryModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryModifierDataTable = CType(MyBase.Clone,SecondaryModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnSecondary_Id = Me.Columns("Secondary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnSecondary_Id = New DataColumn("Secondary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondary_Id)
        End Sub
        
        Public Function NewSecondaryModifierRow() As SecondaryModifierRow
            Return CType(Me.NewRow,SecondaryModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryModifierRowChanged(Me, New SecondaryModifierRowChangeEvent(CType(e.Row,SecondaryModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryModifierRowChanging(Me, New SecondaryModifierRowChangeEvent(CType(e.Row,SecondaryModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryModifierRowDeleted(Me, New SecondaryModifierRowChangeEvent(CType(e.Row,SecondaryModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryModifierRowDeleting(Me, New SecondaryModifierRowChangeEvent(CType(e.Row,SecondaryModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryModifierRow(ByVal row As SecondaryModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryModifierRow
        Inherits DataRow
        
        Private tableSecondaryModifier As SecondaryModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryModifier = CType(Me.Table,SecondaryModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property SecondaryRow As SecondaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Secondary_SecondaryModifier")),SecondaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Secondary_SecondaryModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tableSecondaryModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryDamageResistanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnResistanceName As DataColumn
        
        Private columnSecondary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryDamageResistance")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ResistanceNameColumn As DataColumn
            Get
                Return Me.columnResistanceName
            End Get
        End Property
        
        Public ReadOnly Property Secondary_IdColumn As DataColumn
            Get
                Return Me.columnSecondary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryDamageResistanceRow
            Get
                Return CType(Me.Rows(index),SecondaryDamageResistanceRow)
            End Get
        End Property
        
        Public Event SecondaryDamageResistanceRowChanged As SecondaryDamageResistanceRowChangeEventHandler
        
        Public Event SecondaryDamageResistanceRowChanging As SecondaryDamageResistanceRowChangeEventHandler
        
        Public Event SecondaryDamageResistanceRowDeleted As SecondaryDamageResistanceRowChangeEventHandler
        
        Public Event SecondaryDamageResistanceRowDeleting As SecondaryDamageResistanceRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryDamageResistanceRow(ByVal row As SecondaryDamageResistanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryDamageResistanceRow(ByVal ResistanceName As String, ByVal parentSecondaryRowBySecondary_SecondaryDamageResistance As SecondaryRow) As SecondaryDamageResistanceRow
            Dim rowSecondaryDamageResistanceRow As SecondaryDamageResistanceRow = CType(Me.NewRow,SecondaryDamageResistanceRow)
            rowSecondaryDamageResistanceRow.ItemArray = New Object() {ResistanceName, parentSecondaryRowBySecondary_SecondaryDamageResistance(17)}
            Me.Rows.Add(rowSecondaryDamageResistanceRow)
            Return rowSecondaryDamageResistanceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryDamageResistanceDataTable = CType(MyBase.Clone,SecondaryDamageResistanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryDamageResistanceDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnResistanceName = Me.Columns("ResistanceName")
            Me.columnSecondary_Id = Me.Columns("Secondary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnResistanceName = New DataColumn("ResistanceName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResistanceName)
            Me.columnSecondary_Id = New DataColumn("Secondary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondary_Id)
        End Sub
        
        Public Function NewSecondaryDamageResistanceRow() As SecondaryDamageResistanceRow
            Return CType(Me.NewRow,SecondaryDamageResistanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryDamageResistanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryDamageResistanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryDamageResistanceRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryDamageResistanceRowChanged(Me, New SecondaryDamageResistanceRowChangeEvent(CType(e.Row,SecondaryDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryDamageResistanceRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryDamageResistanceRowChanging(Me, New SecondaryDamageResistanceRowChangeEvent(CType(e.Row,SecondaryDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryDamageResistanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryDamageResistanceRowDeleted(Me, New SecondaryDamageResistanceRowChangeEvent(CType(e.Row,SecondaryDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryDamageResistanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryDamageResistanceRowDeleting(Me, New SecondaryDamageResistanceRowChangeEvent(CType(e.Row,SecondaryDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryDamageResistanceRow(ByVal row As SecondaryDamageResistanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryDamageResistanceRow
        Inherits DataRow
        
        Private tableSecondaryDamageResistance As SecondaryDamageResistanceDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryDamageResistance = CType(Me.Table,SecondaryDamageResistanceDataTable)
        End Sub
        
        Public Property ResistanceName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryDamageResistance.ResistanceNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryDamageResistance.ResistanceNameColumn) = value
            End Set
        End Property
        
        Public Property SecondaryRow As SecondaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Secondary_SecondaryDamageResistance")),SecondaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Secondary_SecondaryDamageResistance"))
            End Set
        End Property
        
        Public Function IsResistanceNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryDamageResistance.ResistanceNameColumn)
        End Function
        
        Public Sub SetResistanceNameNull()
            Me(Me.tableSecondaryDamageResistance.ResistanceNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryDamageResistanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryDamageResistanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryDamageResistanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryDamageResistanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnConditionName As DataColumn
        
        Private columnBaseDamage As DataColumn
        
        Private columnCriticalRange As DataColumn
        
        Private columnCriticalMultiplier As DataColumn
        
        Private columnEnhancement As DataColumn
        
        Private columnSecondaryCondition_Id As DataColumn
        
        Private columnSecondary_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryCondition")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ConditionNameColumn As DataColumn
            Get
                Return Me.columnConditionName
            End Get
        End Property
        
        Public ReadOnly Property BaseDamageColumn As DataColumn
            Get
                Return Me.columnBaseDamage
            End Get
        End Property
        
        Public ReadOnly Property CriticalRangeColumn As DataColumn
            Get
                Return Me.columnCriticalRange
            End Get
        End Property
        
        Public ReadOnly Property CriticalMultiplierColumn As DataColumn
            Get
                Return Me.columnCriticalMultiplier
            End Get
        End Property
        
        Public ReadOnly Property EnhancementColumn As DataColumn
            Get
                Return Me.columnEnhancement
            End Get
        End Property
        
        Public ReadOnly Property SecondaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnSecondaryCondition_Id
            End Get
        End Property
        
        Public ReadOnly Property Secondary_IdColumn As DataColumn
            Get
                Return Me.columnSecondary_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryConditionRow
            Get
                Return CType(Me.Rows(index),SecondaryConditionRow)
            End Get
        End Property
        
        Public Event SecondaryConditionRowChanged As SecondaryConditionRowChangeEventHandler
        
        Public Event SecondaryConditionRowChanging As SecondaryConditionRowChangeEventHandler
        
        Public Event SecondaryConditionRowDeleted As SecondaryConditionRowChangeEventHandler
        
        Public Event SecondaryConditionRowDeleting As SecondaryConditionRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryConditionRow(ByVal row As SecondaryConditionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryConditionRow(ByVal ConditionName As String, ByVal BaseDamage As String, ByVal CriticalRange As String, ByVal CriticalMultiplier As String, ByVal Enhancement As String, ByVal parentSecondaryRowBySecondary_SecondaryCondition As SecondaryRow) As SecondaryConditionRow
            Dim rowSecondaryConditionRow As SecondaryConditionRow = CType(Me.NewRow,SecondaryConditionRow)
            rowSecondaryConditionRow.ItemArray = New Object() {ConditionName, BaseDamage, CriticalRange, CriticalMultiplier, Enhancement, Nothing, parentSecondaryRowBySecondary_SecondaryCondition(17)}
            Me.Rows.Add(rowSecondaryConditionRow)
            Return rowSecondaryConditionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryConditionDataTable = CType(MyBase.Clone,SecondaryConditionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryConditionDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnConditionName = Me.Columns("ConditionName")
            Me.columnBaseDamage = Me.Columns("BaseDamage")
            Me.columnCriticalRange = Me.Columns("CriticalRange")
            Me.columnCriticalMultiplier = Me.Columns("CriticalMultiplier")
            Me.columnEnhancement = Me.Columns("Enhancement")
            Me.columnSecondaryCondition_Id = Me.Columns("SecondaryCondition_Id")
            Me.columnSecondary_Id = Me.Columns("Secondary_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnConditionName = New DataColumn("ConditionName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConditionName)
            Me.columnBaseDamage = New DataColumn("BaseDamage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseDamage)
            Me.columnCriticalRange = New DataColumn("CriticalRange", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriticalRange)
            Me.columnCriticalMultiplier = New DataColumn("CriticalMultiplier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCriticalMultiplier)
            Me.columnEnhancement = New DataColumn("Enhancement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnhancement)
            Me.columnSecondaryCondition_Id = New DataColumn("SecondaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondaryCondition_Id)
            Me.columnSecondary_Id = New DataColumn("Secondary_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondary_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSecondaryCondition_Id}, true))
            Me.columnSecondaryCondition_Id.AutoIncrement = true
            Me.columnSecondaryCondition_Id.AllowDBNull = false
            Me.columnSecondaryCondition_Id.Unique = true
        End Sub
        
        Public Function NewSecondaryConditionRow() As SecondaryConditionRow
            Return CType(Me.NewRow,SecondaryConditionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryConditionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryConditionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryConditionRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionRowChanged(Me, New SecondaryConditionRowChangeEvent(CType(e.Row,SecondaryConditionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryConditionRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionRowChanging(Me, New SecondaryConditionRowChangeEvent(CType(e.Row,SecondaryConditionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryConditionRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionRowDeleted(Me, New SecondaryConditionRowChangeEvent(CType(e.Row,SecondaryConditionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryConditionRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionRowDeleting(Me, New SecondaryConditionRowChangeEvent(CType(e.Row,SecondaryConditionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryConditionRow(ByVal row As SecondaryConditionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionRow
        Inherits DataRow
        
        Private tableSecondaryCondition As SecondaryConditionDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryCondition = CType(Me.Table,SecondaryConditionDataTable)
        End Sub
        
        Public Property ConditionName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryCondition.ConditionNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryCondition.ConditionNameColumn) = value
            End Set
        End Property
        
        Public Property BaseDamage As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryCondition.BaseDamageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryCondition.BaseDamageColumn) = value
            End Set
        End Property
        
        Public Property CriticalRange As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryCondition.CriticalRangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryCondition.CriticalRangeColumn) = value
            End Set
        End Property
        
        Public Property CriticalMultiplier As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryCondition.CriticalMultiplierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryCondition.CriticalMultiplierColumn) = value
            End Set
        End Property
        
        Public Property Enhancement As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryCondition.EnhancementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryCondition.EnhancementColumn) = value
            End Set
        End Property
        
        Public Property SecondaryRow As SecondaryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Secondary_SecondaryCondition")),SecondaryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Secondary_SecondaryCondition"))
            End Set
        End Property
        
        Public Function IsConditionNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryCondition.ConditionNameColumn)
        End Function
        
        Public Sub SetConditionNameNull()
            Me(Me.tableSecondaryCondition.ConditionNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseDamageNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryCondition.BaseDamageColumn)
        End Function
        
        Public Sub SetBaseDamageNull()
            Me(Me.tableSecondaryCondition.BaseDamageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriticalRangeNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryCondition.CriticalRangeColumn)
        End Function
        
        Public Sub SetCriticalRangeNull()
            Me(Me.tableSecondaryCondition.CriticalRangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCriticalMultiplierNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryCondition.CriticalMultiplierColumn)
        End Function
        
        Public Sub SetCriticalMultiplierNull()
            Me(Me.tableSecondaryCondition.CriticalMultiplierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnhancementNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryCondition.EnhancementColumn)
        End Function
        
        Public Sub SetEnhancementNull()
            Me(Me.tableSecondaryCondition.EnhancementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSecondaryConditionalModifierRows() As SecondaryConditionalModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SecondaryCondition_SecondaryConditionalModifier")),SecondaryConditionalModifierRow())
        End Function
        
        Public Function GetSecondaryConditionalExtraDamageRows() As SecondaryConditionalExtraDamageRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SecondaryCondition_SecondaryConditionalExtraDamage")),SecondaryConditionalExtraDamageRow())
        End Function
        
        Public Function GetSecondaryConditionalAbilityRows() As SecondaryConditionalAbilityRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SecondaryCondition_SecondaryConditionalAbility")),SecondaryConditionalAbilityRow())
        End Function
        
        Public Function GetSecondaryConditionalDamageResistanceRows() As SecondaryConditionalDamageResistanceRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SecondaryCondition_SecondaryConditionalDamageResistance")),SecondaryConditionalDamageResistanceRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryConditionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryConditionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryConditionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnSecondaryCondition_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryConditionalModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property SecondaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnSecondaryCondition_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryConditionalModifierRow
            Get
                Return CType(Me.Rows(index),SecondaryConditionalModifierRow)
            End Get
        End Property
        
        Public Event SecondaryConditionalModifierRowChanged As SecondaryConditionalModifierRowChangeEventHandler
        
        Public Event SecondaryConditionalModifierRowChanging As SecondaryConditionalModifierRowChangeEventHandler
        
        Public Event SecondaryConditionalModifierRowDeleted As SecondaryConditionalModifierRowChangeEventHandler
        
        Public Event SecondaryConditionalModifierRowDeleting As SecondaryConditionalModifierRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryConditionalModifierRow(ByVal row As SecondaryConditionalModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryConditionalModifierRow(ByVal ModifierName As String, ByVal parentSecondaryConditionRowBySecondaryCondition_SecondaryConditionalModifier As SecondaryConditionRow) As SecondaryConditionalModifierRow
            Dim rowSecondaryConditionalModifierRow As SecondaryConditionalModifierRow = CType(Me.NewRow,SecondaryConditionalModifierRow)
            rowSecondaryConditionalModifierRow.ItemArray = New Object() {ModifierName, parentSecondaryConditionRowBySecondaryCondition_SecondaryConditionalModifier(5)}
            Me.Rows.Add(rowSecondaryConditionalModifierRow)
            Return rowSecondaryConditionalModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryConditionalModifierDataTable = CType(MyBase.Clone,SecondaryConditionalModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryConditionalModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnSecondaryCondition_Id = Me.Columns("SecondaryCondition_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnSecondaryCondition_Id = New DataColumn("SecondaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondaryCondition_Id)
        End Sub
        
        Public Function NewSecondaryConditionalModifierRow() As SecondaryConditionalModifierRow
            Return CType(Me.NewRow,SecondaryConditionalModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryConditionalModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryConditionalModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryConditionalModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalModifierRowChanged(Me, New SecondaryConditionalModifierRowChangeEvent(CType(e.Row,SecondaryConditionalModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryConditionalModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalModifierRowChanging(Me, New SecondaryConditionalModifierRowChangeEvent(CType(e.Row,SecondaryConditionalModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryConditionalModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalModifierRowDeleted(Me, New SecondaryConditionalModifierRowChangeEvent(CType(e.Row,SecondaryConditionalModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryConditionalModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalModifierRowDeleting(Me, New SecondaryConditionalModifierRowChangeEvent(CType(e.Row,SecondaryConditionalModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryConditionalModifierRow(ByVal row As SecondaryConditionalModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalModifierRow
        Inherits DataRow
        
        Private tableSecondaryConditionalModifier As SecondaryConditionalModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryConditionalModifier = CType(Me.Table,SecondaryConditionalModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryConditionalModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryConditionalModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property SecondaryConditionRow As SecondaryConditionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SecondaryCondition_SecondaryConditionalModifier")),SecondaryConditionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SecondaryCondition_SecondaryConditionalModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryConditionalModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tableSecondaryConditionalModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryConditionalModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryConditionalModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryConditionalModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalExtraDamageDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDamageName As DataColumn
        
        Private columnSecondaryCondition_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryConditionalExtraDamage")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property DamageNameColumn As DataColumn
            Get
                Return Me.columnDamageName
            End Get
        End Property
        
        Public ReadOnly Property SecondaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnSecondaryCondition_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryConditionalExtraDamageRow
            Get
                Return CType(Me.Rows(index),SecondaryConditionalExtraDamageRow)
            End Get
        End Property
        
        Public Event SecondaryConditionalExtraDamageRowChanged As SecondaryConditionalExtraDamageRowChangeEventHandler
        
        Public Event SecondaryConditionalExtraDamageRowChanging As SecondaryConditionalExtraDamageRowChangeEventHandler
        
        Public Event SecondaryConditionalExtraDamageRowDeleted As SecondaryConditionalExtraDamageRowChangeEventHandler
        
        Public Event SecondaryConditionalExtraDamageRowDeleting As SecondaryConditionalExtraDamageRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryConditionalExtraDamageRow(ByVal row As SecondaryConditionalExtraDamageRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryConditionalExtraDamageRow(ByVal DamageName As String, ByVal parentSecondaryConditionRowBySecondaryCondition_SecondaryConditionalExtraDamage As SecondaryConditionRow) As SecondaryConditionalExtraDamageRow
            Dim rowSecondaryConditionalExtraDamageRow As SecondaryConditionalExtraDamageRow = CType(Me.NewRow,SecondaryConditionalExtraDamageRow)
            rowSecondaryConditionalExtraDamageRow.ItemArray = New Object() {DamageName, parentSecondaryConditionRowBySecondaryCondition_SecondaryConditionalExtraDamage(5)}
            Me.Rows.Add(rowSecondaryConditionalExtraDamageRow)
            Return rowSecondaryConditionalExtraDamageRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryConditionalExtraDamageDataTable = CType(MyBase.Clone,SecondaryConditionalExtraDamageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryConditionalExtraDamageDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnDamageName = Me.Columns("DamageName")
            Me.columnSecondaryCondition_Id = Me.Columns("SecondaryCondition_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDamageName = New DataColumn("DamageName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDamageName)
            Me.columnSecondaryCondition_Id = New DataColumn("SecondaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondaryCondition_Id)
        End Sub
        
        Public Function NewSecondaryConditionalExtraDamageRow() As SecondaryConditionalExtraDamageRow
            Return CType(Me.NewRow,SecondaryConditionalExtraDamageRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryConditionalExtraDamageRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryConditionalExtraDamageRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryConditionalExtraDamageRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalExtraDamageRowChanged(Me, New SecondaryConditionalExtraDamageRowChangeEvent(CType(e.Row,SecondaryConditionalExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryConditionalExtraDamageRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalExtraDamageRowChanging(Me, New SecondaryConditionalExtraDamageRowChangeEvent(CType(e.Row,SecondaryConditionalExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryConditionalExtraDamageRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalExtraDamageRowDeleted(Me, New SecondaryConditionalExtraDamageRowChangeEvent(CType(e.Row,SecondaryConditionalExtraDamageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryConditionalExtraDamageRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalExtraDamageRowDeleting(Me, New SecondaryConditionalExtraDamageRowChangeEvent(CType(e.Row,SecondaryConditionalExtraDamageRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryConditionalExtraDamageRow(ByVal row As SecondaryConditionalExtraDamageRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalExtraDamageRow
        Inherits DataRow
        
        Private tableSecondaryConditionalExtraDamage As SecondaryConditionalExtraDamageDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryConditionalExtraDamage = CType(Me.Table,SecondaryConditionalExtraDamageDataTable)
        End Sub
        
        Public Property DamageName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryConditionalExtraDamage.DamageNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryConditionalExtraDamage.DamageNameColumn) = value
            End Set
        End Property
        
        Public Property SecondaryConditionRow As SecondaryConditionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SecondaryCondition_SecondaryConditionalExtraDamage")),SecondaryConditionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SecondaryCondition_SecondaryConditionalExtraDamage"))
            End Set
        End Property
        
        Public Function IsDamageNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryConditionalExtraDamage.DamageNameColumn)
        End Function
        
        Public Sub SetDamageNameNull()
            Me(Me.tableSecondaryConditionalExtraDamage.DamageNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalExtraDamageRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryConditionalExtraDamageRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryConditionalExtraDamageRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryConditionalExtraDamageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalAbilityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAbilityName As DataColumn
        
        Private columnSecondaryCondition_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryConditionalAbility")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property AbilityNameColumn As DataColumn
            Get
                Return Me.columnAbilityName
            End Get
        End Property
        
        Public ReadOnly Property SecondaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnSecondaryCondition_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryConditionalAbilityRow
            Get
                Return CType(Me.Rows(index),SecondaryConditionalAbilityRow)
            End Get
        End Property
        
        Public Event SecondaryConditionalAbilityRowChanged As SecondaryConditionalAbilityRowChangeEventHandler
        
        Public Event SecondaryConditionalAbilityRowChanging As SecondaryConditionalAbilityRowChangeEventHandler
        
        Public Event SecondaryConditionalAbilityRowDeleted As SecondaryConditionalAbilityRowChangeEventHandler
        
        Public Event SecondaryConditionalAbilityRowDeleting As SecondaryConditionalAbilityRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryConditionalAbilityRow(ByVal row As SecondaryConditionalAbilityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryConditionalAbilityRow(ByVal AbilityName As String, ByVal parentSecondaryConditionRowBySecondaryCondition_SecondaryConditionalAbility As SecondaryConditionRow) As SecondaryConditionalAbilityRow
            Dim rowSecondaryConditionalAbilityRow As SecondaryConditionalAbilityRow = CType(Me.NewRow,SecondaryConditionalAbilityRow)
            rowSecondaryConditionalAbilityRow.ItemArray = New Object() {AbilityName, parentSecondaryConditionRowBySecondaryCondition_SecondaryConditionalAbility(5)}
            Me.Rows.Add(rowSecondaryConditionalAbilityRow)
            Return rowSecondaryConditionalAbilityRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryConditionalAbilityDataTable = CType(MyBase.Clone,SecondaryConditionalAbilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryConditionalAbilityDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAbilityName = Me.Columns("AbilityName")
            Me.columnSecondaryCondition_Id = Me.Columns("SecondaryCondition_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAbilityName = New DataColumn("AbilityName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilityName)
            Me.columnSecondaryCondition_Id = New DataColumn("SecondaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondaryCondition_Id)
        End Sub
        
        Public Function NewSecondaryConditionalAbilityRow() As SecondaryConditionalAbilityRow
            Return CType(Me.NewRow,SecondaryConditionalAbilityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryConditionalAbilityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryConditionalAbilityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryConditionalAbilityRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalAbilityRowChanged(Me, New SecondaryConditionalAbilityRowChangeEvent(CType(e.Row,SecondaryConditionalAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryConditionalAbilityRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalAbilityRowChanging(Me, New SecondaryConditionalAbilityRowChangeEvent(CType(e.Row,SecondaryConditionalAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryConditionalAbilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalAbilityRowDeleted(Me, New SecondaryConditionalAbilityRowChangeEvent(CType(e.Row,SecondaryConditionalAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryConditionalAbilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalAbilityRowDeleting(Me, New SecondaryConditionalAbilityRowChangeEvent(CType(e.Row,SecondaryConditionalAbilityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryConditionalAbilityRow(ByVal row As SecondaryConditionalAbilityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalAbilityRow
        Inherits DataRow
        
        Private tableSecondaryConditionalAbility As SecondaryConditionalAbilityDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryConditionalAbility = CType(Me.Table,SecondaryConditionalAbilityDataTable)
        End Sub
        
        Public Property AbilityName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryConditionalAbility.AbilityNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryConditionalAbility.AbilityNameColumn) = value
            End Set
        End Property
        
        Public Property SecondaryConditionRow As SecondaryConditionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SecondaryCondition_SecondaryConditionalAbility")),SecondaryConditionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SecondaryCondition_SecondaryConditionalAbility"))
            End Set
        End Property
        
        Public Function IsAbilityNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryConditionalAbility.AbilityNameColumn)
        End Function
        
        Public Sub SetAbilityNameNull()
            Me(Me.tableSecondaryConditionalAbility.AbilityNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalAbilityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryConditionalAbilityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryConditionalAbilityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryConditionalAbilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalDamageResistanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnResistanceName As DataColumn
        
        Private columnSecondaryCondition_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SecondaryConditionalDamageResistance")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ResistanceNameColumn As DataColumn
            Get
                Return Me.columnResistanceName
            End Get
        End Property
        
        Public ReadOnly Property SecondaryCondition_IdColumn As DataColumn
            Get
                Return Me.columnSecondaryCondition_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SecondaryConditionalDamageResistanceRow
            Get
                Return CType(Me.Rows(index),SecondaryConditionalDamageResistanceRow)
            End Get
        End Property
        
        Public Event SecondaryConditionalDamageResistanceRowChanged As SecondaryConditionalDamageResistanceRowChangeEventHandler
        
        Public Event SecondaryConditionalDamageResistanceRowChanging As SecondaryConditionalDamageResistanceRowChangeEventHandler
        
        Public Event SecondaryConditionalDamageResistanceRowDeleted As SecondaryConditionalDamageResistanceRowChangeEventHandler
        
        Public Event SecondaryConditionalDamageResistanceRowDeleting As SecondaryConditionalDamageResistanceRowChangeEventHandler
        
        Public Overloads Sub AddSecondaryConditionalDamageResistanceRow(ByVal row As SecondaryConditionalDamageResistanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSecondaryConditionalDamageResistanceRow(ByVal ResistanceName As String, ByVal parentSecondaryConditionRowBySecondaryCondition_SecondaryConditionalDamageResistance As SecondaryConditionRow) As SecondaryConditionalDamageResistanceRow
            Dim rowSecondaryConditionalDamageResistanceRow As SecondaryConditionalDamageResistanceRow = CType(Me.NewRow,SecondaryConditionalDamageResistanceRow)
            rowSecondaryConditionalDamageResistanceRow.ItemArray = New Object() {ResistanceName, parentSecondaryConditionRowBySecondaryCondition_SecondaryConditionalDamageResistance(5)}
            Me.Rows.Add(rowSecondaryConditionalDamageResistanceRow)
            Return rowSecondaryConditionalDamageResistanceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SecondaryConditionalDamageResistanceDataTable = CType(MyBase.Clone,SecondaryConditionalDamageResistanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SecondaryConditionalDamageResistanceDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnResistanceName = Me.Columns("ResistanceName")
            Me.columnSecondaryCondition_Id = Me.Columns("SecondaryCondition_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnResistanceName = New DataColumn("ResistanceName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResistanceName)
            Me.columnSecondaryCondition_Id = New DataColumn("SecondaryCondition_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSecondaryCondition_Id)
        End Sub
        
        Public Function NewSecondaryConditionalDamageResistanceRow() As SecondaryConditionalDamageResistanceRow
            Return CType(Me.NewRow,SecondaryConditionalDamageResistanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SecondaryConditionalDamageResistanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SecondaryConditionalDamageResistanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SecondaryConditionalDamageResistanceRowChangedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalDamageResistanceRowChanged(Me, New SecondaryConditionalDamageResistanceRowChangeEvent(CType(e.Row,SecondaryConditionalDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SecondaryConditionalDamageResistanceRowChangingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalDamageResistanceRowChanging(Me, New SecondaryConditionalDamageResistanceRowChangeEvent(CType(e.Row,SecondaryConditionalDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SecondaryConditionalDamageResistanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalDamageResistanceRowDeleted(Me, New SecondaryConditionalDamageResistanceRowChangeEvent(CType(e.Row,SecondaryConditionalDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SecondaryConditionalDamageResistanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent SecondaryConditionalDamageResistanceRowDeleting(Me, New SecondaryConditionalDamageResistanceRowChangeEvent(CType(e.Row,SecondaryConditionalDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSecondaryConditionalDamageResistanceRow(ByVal row As SecondaryConditionalDamageResistanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalDamageResistanceRow
        Inherits DataRow
        
        Private tableSecondaryConditionalDamageResistance As SecondaryConditionalDamageResistanceDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSecondaryConditionalDamageResistance = CType(Me.Table,SecondaryConditionalDamageResistanceDataTable)
        End Sub
        
        Public Property ResistanceName As String
            Get
                Try 
                    Return CType(Me(Me.tableSecondaryConditionalDamageResistance.ResistanceNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSecondaryConditionalDamageResistance.ResistanceNameColumn) = value
            End Set
        End Property
        
        Public Property SecondaryConditionRow As SecondaryConditionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SecondaryCondition_SecondaryConditionalDamageResistance")),SecondaryConditionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SecondaryCondition_SecondaryConditionalDamageResistance"))
            End Set
        End Property
        
        Public Function IsResistanceNameNull() As Boolean
            Return Me.IsNull(Me.tableSecondaryConditionalDamageResistance.ResistanceNameColumn)
        End Function
        
        Public Sub SetResistanceNameNull()
            Me(Me.tableSecondaryConditionalDamageResistance.ResistanceNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SecondaryConditionalDamageResistanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SecondaryConditionalDamageResistanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SecondaryConditionalDamageResistanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SecondaryConditionalDamageResistanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBaseName As DataColumn
        
        Private columnFullName As DataColumn
        
        Private columnEnhancement As DataColumn
        
        Private columnBuckler_Id As DataColumn
        
        Private columnAttack_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Buckler")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property BaseNameColumn As DataColumn
            Get
                Return Me.columnBaseName
            End Get
        End Property
        
        Public ReadOnly Property FullNameColumn As DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        Public ReadOnly Property EnhancementColumn As DataColumn
            Get
                Return Me.columnEnhancement
            End Get
        End Property
        
        Public ReadOnly Property Buckler_IdColumn As DataColumn
            Get
                Return Me.columnBuckler_Id
            End Get
        End Property
        
        Public ReadOnly Property Attack_IdColumn As DataColumn
            Get
                Return Me.columnAttack_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BucklerRow
            Get
                Return CType(Me.Rows(index),BucklerRow)
            End Get
        End Property
        
        Public Event BucklerRowChanged As BucklerRowChangeEventHandler
        
        Public Event BucklerRowChanging As BucklerRowChangeEventHandler
        
        Public Event BucklerRowDeleted As BucklerRowChangeEventHandler
        
        Public Event BucklerRowDeleting As BucklerRowChangeEventHandler
        
        Public Overloads Sub AddBucklerRow(ByVal row As BucklerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBucklerRow(ByVal BaseName As String, ByVal FullName As String, ByVal Enhancement As String, ByVal parentAttackRowByAttack_Buckler As AttackRow) As BucklerRow
            Dim rowBucklerRow As BucklerRow = CType(Me.NewRow,BucklerRow)
            rowBucklerRow.ItemArray = New Object() {BaseName, FullName, Enhancement, Nothing, parentAttackRowByAttack_Buckler(0)}
            Me.Rows.Add(rowBucklerRow)
            Return rowBucklerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BucklerDataTable = CType(MyBase.Clone,BucklerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BucklerDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnBaseName = Me.Columns("BaseName")
            Me.columnFullName = Me.Columns("FullName")
            Me.columnEnhancement = Me.Columns("Enhancement")
            Me.columnBuckler_Id = Me.Columns("Buckler_Id")
            Me.columnAttack_Id = Me.Columns("Attack_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnBaseName = New DataColumn("BaseName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseName)
            Me.columnFullName = New DataColumn("FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullName)
            Me.columnEnhancement = New DataColumn("Enhancement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnhancement)
            Me.columnBuckler_Id = New DataColumn("Buckler_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBuckler_Id)
            Me.columnAttack_Id = New DataColumn("Attack_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAttack_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnBuckler_Id}, true))
            Me.columnBuckler_Id.AutoIncrement = true
            Me.columnBuckler_Id.AllowDBNull = false
            Me.columnBuckler_Id.Unique = true
        End Sub
        
        Public Function NewBucklerRow() As BucklerRow
            Return CType(Me.NewRow,BucklerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BucklerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BucklerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BucklerRowChangedEvent) Is Nothing) Then
                RaiseEvent BucklerRowChanged(Me, New BucklerRowChangeEvent(CType(e.Row,BucklerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BucklerRowChangingEvent) Is Nothing) Then
                RaiseEvent BucklerRowChanging(Me, New BucklerRowChangeEvent(CType(e.Row,BucklerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BucklerRowDeletedEvent) Is Nothing) Then
                RaiseEvent BucklerRowDeleted(Me, New BucklerRowChangeEvent(CType(e.Row,BucklerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BucklerRowDeletingEvent) Is Nothing) Then
                RaiseEvent BucklerRowDeleting(Me, New BucklerRowChangeEvent(CType(e.Row,BucklerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBucklerRow(ByVal row As BucklerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerRow
        Inherits DataRow
        
        Private tableBuckler As BucklerDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBuckler = CType(Me.Table,BucklerDataTable)
        End Sub
        
        Public Property BaseName As String
            Get
                Try 
                    Return CType(Me(Me.tableBuckler.BaseNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBuckler.BaseNameColumn) = value
            End Set
        End Property
        
        Public Property FullName As String
            Get
                Try 
                    Return CType(Me(Me.tableBuckler.FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBuckler.FullNameColumn) = value
            End Set
        End Property
        
        Public Property Enhancement As String
            Get
                Try 
                    Return CType(Me(Me.tableBuckler.EnhancementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBuckler.EnhancementColumn) = value
            End Set
        End Property
        
        Public Property AttackRow As AttackRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Attack_Buckler")),AttackRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Attack_Buckler"))
            End Set
        End Property
        
        Public Function IsBaseNameNull() As Boolean
            Return Me.IsNull(Me.tableBuckler.BaseNameColumn)
        End Function
        
        Public Sub SetBaseNameNull()
            Me(Me.tableBuckler.BaseNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableBuckler.FullNameColumn)
        End Function
        
        Public Sub SetFullNameNull()
            Me(Me.tableBuckler.FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnhancementNull() As Boolean
            Return Me.IsNull(Me.tableBuckler.EnhancementColumn)
        End Function
        
        Public Sub SetEnhancementNull()
            Me(Me.tableBuckler.EnhancementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBucklerDamageResistanceRows() As BucklerDamageResistanceRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Buckler_BucklerDamageResistance")),BucklerDamageResistanceRow())
        End Function
        
        Public Function GetBucklerModifierRows() As BucklerModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Buckler_BucklerModifier")),BucklerModifierRow())
        End Function
        
        Public Function GetBucklerAbilityRows() As BucklerAbilityRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Buckler_BucklerAbility")),BucklerAbilityRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BucklerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BucklerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BucklerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerDamageResistanceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnResistanceName As DataColumn
        
        Private columnBuckler_Id As DataColumn
        
        Public Sub New()
            MyBase.New("BucklerDamageResistance")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ResistanceNameColumn As DataColumn
            Get
                Return Me.columnResistanceName
            End Get
        End Property
        
        Public ReadOnly Property Buckler_IdColumn As DataColumn
            Get
                Return Me.columnBuckler_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BucklerDamageResistanceRow
            Get
                Return CType(Me.Rows(index),BucklerDamageResistanceRow)
            End Get
        End Property
        
        Public Event BucklerDamageResistanceRowChanged As BucklerDamageResistanceRowChangeEventHandler
        
        Public Event BucklerDamageResistanceRowChanging As BucklerDamageResistanceRowChangeEventHandler
        
        Public Event BucklerDamageResistanceRowDeleted As BucklerDamageResistanceRowChangeEventHandler
        
        Public Event BucklerDamageResistanceRowDeleting As BucklerDamageResistanceRowChangeEventHandler
        
        Public Overloads Sub AddBucklerDamageResistanceRow(ByVal row As BucklerDamageResistanceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBucklerDamageResistanceRow(ByVal ResistanceName As String, ByVal parentBucklerRowByBuckler_BucklerDamageResistance As BucklerRow) As BucklerDamageResistanceRow
            Dim rowBucklerDamageResistanceRow As BucklerDamageResistanceRow = CType(Me.NewRow,BucklerDamageResistanceRow)
            rowBucklerDamageResistanceRow.ItemArray = New Object() {ResistanceName, parentBucklerRowByBuckler_BucklerDamageResistance(3)}
            Me.Rows.Add(rowBucklerDamageResistanceRow)
            Return rowBucklerDamageResistanceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BucklerDamageResistanceDataTable = CType(MyBase.Clone,BucklerDamageResistanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BucklerDamageResistanceDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnResistanceName = Me.Columns("ResistanceName")
            Me.columnBuckler_Id = Me.Columns("Buckler_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnResistanceName = New DataColumn("ResistanceName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResistanceName)
            Me.columnBuckler_Id = New DataColumn("Buckler_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBuckler_Id)
        End Sub
        
        Public Function NewBucklerDamageResistanceRow() As BucklerDamageResistanceRow
            Return CType(Me.NewRow,BucklerDamageResistanceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BucklerDamageResistanceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BucklerDamageResistanceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BucklerDamageResistanceRowChangedEvent) Is Nothing) Then
                RaiseEvent BucklerDamageResistanceRowChanged(Me, New BucklerDamageResistanceRowChangeEvent(CType(e.Row,BucklerDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BucklerDamageResistanceRowChangingEvent) Is Nothing) Then
                RaiseEvent BucklerDamageResistanceRowChanging(Me, New BucklerDamageResistanceRowChangeEvent(CType(e.Row,BucklerDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BucklerDamageResistanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent BucklerDamageResistanceRowDeleted(Me, New BucklerDamageResistanceRowChangeEvent(CType(e.Row,BucklerDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BucklerDamageResistanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent BucklerDamageResistanceRowDeleting(Me, New BucklerDamageResistanceRowChangeEvent(CType(e.Row,BucklerDamageResistanceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBucklerDamageResistanceRow(ByVal row As BucklerDamageResistanceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerDamageResistanceRow
        Inherits DataRow
        
        Private tableBucklerDamageResistance As BucklerDamageResistanceDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBucklerDamageResistance = CType(Me.Table,BucklerDamageResistanceDataTable)
        End Sub
        
        Public Property ResistanceName As String
            Get
                Try 
                    Return CType(Me(Me.tableBucklerDamageResistance.ResistanceNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBucklerDamageResistance.ResistanceNameColumn) = value
            End Set
        End Property
        
        Public Property BucklerRow As BucklerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Buckler_BucklerDamageResistance")),BucklerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Buckler_BucklerDamageResistance"))
            End Set
        End Property
        
        Public Function IsResistanceNameNull() As Boolean
            Return Me.IsNull(Me.tableBucklerDamageResistance.ResistanceNameColumn)
        End Function
        
        Public Sub SetResistanceNameNull()
            Me(Me.tableBucklerDamageResistance.ResistanceNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerDamageResistanceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BucklerDamageResistanceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BucklerDamageResistanceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BucklerDamageResistanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnBuckler_Id As DataColumn
        
        Public Sub New()
            MyBase.New("BucklerModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property Buckler_IdColumn As DataColumn
            Get
                Return Me.columnBuckler_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BucklerModifierRow
            Get
                Return CType(Me.Rows(index),BucklerModifierRow)
            End Get
        End Property
        
        Public Event BucklerModifierRowChanged As BucklerModifierRowChangeEventHandler
        
        Public Event BucklerModifierRowChanging As BucklerModifierRowChangeEventHandler
        
        Public Event BucklerModifierRowDeleted As BucklerModifierRowChangeEventHandler
        
        Public Event BucklerModifierRowDeleting As BucklerModifierRowChangeEventHandler
        
        Public Overloads Sub AddBucklerModifierRow(ByVal row As BucklerModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBucklerModifierRow(ByVal ModifierName As String, ByVal parentBucklerRowByBuckler_BucklerModifier As BucklerRow) As BucklerModifierRow
            Dim rowBucklerModifierRow As BucklerModifierRow = CType(Me.NewRow,BucklerModifierRow)
            rowBucklerModifierRow.ItemArray = New Object() {ModifierName, parentBucklerRowByBuckler_BucklerModifier(3)}
            Me.Rows.Add(rowBucklerModifierRow)
            Return rowBucklerModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BucklerModifierDataTable = CType(MyBase.Clone,BucklerModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BucklerModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnBuckler_Id = Me.Columns("Buckler_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnBuckler_Id = New DataColumn("Buckler_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBuckler_Id)
        End Sub
        
        Public Function NewBucklerModifierRow() As BucklerModifierRow
            Return CType(Me.NewRow,BucklerModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BucklerModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BucklerModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BucklerModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent BucklerModifierRowChanged(Me, New BucklerModifierRowChangeEvent(CType(e.Row,BucklerModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BucklerModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent BucklerModifierRowChanging(Me, New BucklerModifierRowChangeEvent(CType(e.Row,BucklerModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BucklerModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent BucklerModifierRowDeleted(Me, New BucklerModifierRowChangeEvent(CType(e.Row,BucklerModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BucklerModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent BucklerModifierRowDeleting(Me, New BucklerModifierRowChangeEvent(CType(e.Row,BucklerModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBucklerModifierRow(ByVal row As BucklerModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerModifierRow
        Inherits DataRow
        
        Private tableBucklerModifier As BucklerModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBucklerModifier = CType(Me.Table,BucklerModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tableBucklerModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBucklerModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property BucklerRow As BucklerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Buckler_BucklerModifier")),BucklerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Buckler_BucklerModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tableBucklerModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tableBucklerModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BucklerModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BucklerModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BucklerModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerAbilityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAbilityName As DataColumn
        
        Private columnBuckler_Id As DataColumn
        
        Public Sub New()
            MyBase.New("BucklerAbility")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property AbilityNameColumn As DataColumn
            Get
                Return Me.columnAbilityName
            End Get
        End Property
        
        Public ReadOnly Property Buckler_IdColumn As DataColumn
            Get
                Return Me.columnBuckler_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BucklerAbilityRow
            Get
                Return CType(Me.Rows(index),BucklerAbilityRow)
            End Get
        End Property
        
        Public Event BucklerAbilityRowChanged As BucklerAbilityRowChangeEventHandler
        
        Public Event BucklerAbilityRowChanging As BucklerAbilityRowChangeEventHandler
        
        Public Event BucklerAbilityRowDeleted As BucklerAbilityRowChangeEventHandler
        
        Public Event BucklerAbilityRowDeleting As BucklerAbilityRowChangeEventHandler
        
        Public Overloads Sub AddBucklerAbilityRow(ByVal row As BucklerAbilityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBucklerAbilityRow(ByVal AbilityName As String, ByVal parentBucklerRowByBuckler_BucklerAbility As BucklerRow) As BucklerAbilityRow
            Dim rowBucklerAbilityRow As BucklerAbilityRow = CType(Me.NewRow,BucklerAbilityRow)
            rowBucklerAbilityRow.ItemArray = New Object() {AbilityName, parentBucklerRowByBuckler_BucklerAbility(3)}
            Me.Rows.Add(rowBucklerAbilityRow)
            Return rowBucklerAbilityRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BucklerAbilityDataTable = CType(MyBase.Clone,BucklerAbilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BucklerAbilityDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAbilityName = Me.Columns("AbilityName")
            Me.columnBuckler_Id = Me.Columns("Buckler_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAbilityName = New DataColumn("AbilityName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilityName)
            Me.columnBuckler_Id = New DataColumn("Buckler_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBuckler_Id)
        End Sub
        
        Public Function NewBucklerAbilityRow() As BucklerAbilityRow
            Return CType(Me.NewRow,BucklerAbilityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BucklerAbilityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BucklerAbilityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BucklerAbilityRowChangedEvent) Is Nothing) Then
                RaiseEvent BucklerAbilityRowChanged(Me, New BucklerAbilityRowChangeEvent(CType(e.Row,BucklerAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BucklerAbilityRowChangingEvent) Is Nothing) Then
                RaiseEvent BucklerAbilityRowChanging(Me, New BucklerAbilityRowChangeEvent(CType(e.Row,BucklerAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BucklerAbilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent BucklerAbilityRowDeleted(Me, New BucklerAbilityRowChangeEvent(CType(e.Row,BucklerAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BucklerAbilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent BucklerAbilityRowDeleting(Me, New BucklerAbilityRowChangeEvent(CType(e.Row,BucklerAbilityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBucklerAbilityRow(ByVal row As BucklerAbilityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerAbilityRow
        Inherits DataRow
        
        Private tableBucklerAbility As BucklerAbilityDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBucklerAbility = CType(Me.Table,BucklerAbilityDataTable)
        End Sub
        
        Public Property AbilityName As String
            Get
                Try 
                    Return CType(Me(Me.tableBucklerAbility.AbilityNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBucklerAbility.AbilityNameColumn) = value
            End Set
        End Property
        
        Public Property BucklerRow As BucklerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Buckler_BucklerAbility")),BucklerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Buckler_BucklerAbility"))
            End Set
        End Property
        
        Public Function IsAbilityNameNull() As Boolean
            Return Me.IsNull(Me.tableBucklerAbility.AbilityNameColumn)
        End Function
        
        Public Sub SetAbilityNameNull()
            Me(Me.tableBucklerAbility.AbilityNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BucklerAbilityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BucklerAbilityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BucklerAbilityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BucklerAbilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSkills_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Skills")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Skills_IdColumn As DataColumn
            Get
                Return Me.columnSkills_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SkillsRow
            Get
                Return CType(Me.Rows(index),SkillsRow)
            End Get
        End Property
        
        Public Event SkillsRowChanged As SkillsRowChangeEventHandler
        
        Public Event SkillsRowChanging As SkillsRowChangeEventHandler
        
        Public Event SkillsRowDeleted As SkillsRowChangeEventHandler
        
        Public Event SkillsRowDeleting As SkillsRowChangeEventHandler
        
        Public Overloads Sub AddSkillsRow(ByVal row As SkillsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSkillsRow(ByVal parentCharacterRowByCharacter_Skills As CharacterRow) As SkillsRow
            Dim rowSkillsRow As SkillsRow = CType(Me.NewRow,SkillsRow)
            rowSkillsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Skills(86)}
            Me.Rows.Add(rowSkillsRow)
            Return rowSkillsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SkillsDataTable = CType(MyBase.Clone,SkillsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SkillsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSkills_Id = Me.Columns("Skills_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSkills_Id = New DataColumn("Skills_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSkills_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSkills_Id}, true))
            Me.columnSkills_Id.AutoIncrement = true
            Me.columnSkills_Id.AllowDBNull = false
            Me.columnSkills_Id.Unique = true
        End Sub
        
        Public Function NewSkillsRow() As SkillsRow
            Return CType(Me.NewRow,SkillsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SkillsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SkillsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SkillsRowChangedEvent) Is Nothing) Then
                RaiseEvent SkillsRowChanged(Me, New SkillsRowChangeEvent(CType(e.Row,SkillsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SkillsRowChangingEvent) Is Nothing) Then
                RaiseEvent SkillsRowChanging(Me, New SkillsRowChangeEvent(CType(e.Row,SkillsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SkillsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SkillsRowDeleted(Me, New SkillsRowChangeEvent(CType(e.Row,SkillsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SkillsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SkillsRowDeleting(Me, New SkillsRowChangeEvent(CType(e.Row,SkillsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSkillsRow(ByVal row As SkillsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillsRow
        Inherits DataRow
        
        Private tableSkills As SkillsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSkills = CType(Me.Table,SkillsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Skills")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Skills"))
            End Set
        End Property
        
        Public Function GetSkillRows() As SkillRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Skills_Skill")),SkillRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SkillsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SkillsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SkillsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSkillName As DataColumn
        
        Private columnSkillRanks As DataColumn
        
        Private columnAbility As DataColumn
        
        Private columnModifier As DataColumn
        
        Private columnTrainedOnly As DataColumn
        
        Private columnCheckMultiplier As DataColumn
        
        Private columnFinal As DataColumn
        
        Private columnClassSkill As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnSkills_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Skill")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SkillNameColumn As DataColumn
            Get
                Return Me.columnSkillName
            End Get
        End Property
        
        Public ReadOnly Property SkillRanksColumn As DataColumn
            Get
                Return Me.columnSkillRanks
            End Get
        End Property
        
        Public ReadOnly Property AbilityColumn As DataColumn
            Get
                Return Me.columnAbility
            End Get
        End Property
        
        Public ReadOnly Property ModifierColumn As DataColumn
            Get
                Return Me.columnModifier
            End Get
        End Property
        
        Public ReadOnly Property TrainedOnlyColumn As DataColumn
            Get
                Return Me.columnTrainedOnly
            End Get
        End Property
        
        Public ReadOnly Property CheckMultiplierColumn As DataColumn
            Get
                Return Me.columnCheckMultiplier
            End Get
        End Property
        
        Public ReadOnly Property FinalColumn As DataColumn
            Get
                Return Me.columnFinal
            End Get
        End Property
        
        Public ReadOnly Property ClassSkillColumn As DataColumn
            Get
                Return Me.columnClassSkill
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property Skills_IdColumn As DataColumn
            Get
                Return Me.columnSkills_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SkillRow
            Get
                Return CType(Me.Rows(index),SkillRow)
            End Get
        End Property
        
        Public Event SkillRowChanged As SkillRowChangeEventHandler
        
        Public Event SkillRowChanging As SkillRowChangeEventHandler
        
        Public Event SkillRowDeleted As SkillRowChangeEventHandler
        
        Public Event SkillRowDeleting As SkillRowChangeEventHandler
        
        Public Overloads Sub AddSkillRow(ByVal row As SkillRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSkillRow(ByVal SkillName As String, ByVal SkillRanks As String, ByVal Ability As String, ByVal Modifier As String, ByVal TrainedOnly As String, ByVal CheckMultiplier As String, ByVal Final As String, ByVal ClassSkill As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentSkillsRowBySkills_Skill As SkillsRow) As SkillRow
            Dim rowSkillRow As SkillRow = CType(Me.NewRow,SkillRow)
            rowSkillRow.ItemArray = New Object() {SkillName, SkillRanks, Ability, Modifier, TrainedOnly, CheckMultiplier, Final, ClassSkill, License, Sourcebook, Tags, PageNo, HelpPage, parentSkillsRowBySkills_Skill(0)}
            Me.Rows.Add(rowSkillRow)
            Return rowSkillRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SkillDataTable = CType(MyBase.Clone,SkillDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SkillDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSkillName = Me.Columns("SkillName")
            Me.columnSkillRanks = Me.Columns("SkillRanks")
            Me.columnAbility = Me.Columns("Ability")
            Me.columnModifier = Me.Columns("Modifier")
            Me.columnTrainedOnly = Me.Columns("TrainedOnly")
            Me.columnCheckMultiplier = Me.Columns("CheckMultiplier")
            Me.columnFinal = Me.Columns("Final")
            Me.columnClassSkill = Me.Columns("ClassSkill")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnSkills_Id = Me.Columns("Skills_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSkillName = New DataColumn("SkillName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSkillName)
            Me.columnSkillRanks = New DataColumn("SkillRanks", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSkillRanks)
            Me.columnAbility = New DataColumn("Ability", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbility)
            Me.columnModifier = New DataColumn("Modifier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifier)
            Me.columnTrainedOnly = New DataColumn("TrainedOnly", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrainedOnly)
            Me.columnCheckMultiplier = New DataColumn("CheckMultiplier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCheckMultiplier)
            Me.columnFinal = New DataColumn("Final", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFinal)
            Me.columnClassSkill = New DataColumn("ClassSkill", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassSkill)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnSkills_Id = New DataColumn("Skills_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSkills_Id)
        End Sub
        
        Public Function NewSkillRow() As SkillRow
            Return CType(Me.NewRow,SkillRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SkillRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SkillRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SkillRowChangedEvent) Is Nothing) Then
                RaiseEvent SkillRowChanged(Me, New SkillRowChangeEvent(CType(e.Row,SkillRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SkillRowChangingEvent) Is Nothing) Then
                RaiseEvent SkillRowChanging(Me, New SkillRowChangeEvent(CType(e.Row,SkillRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SkillRowDeletedEvent) Is Nothing) Then
                RaiseEvent SkillRowDeleted(Me, New SkillRowChangeEvent(CType(e.Row,SkillRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SkillRowDeletingEvent) Is Nothing) Then
                RaiseEvent SkillRowDeleting(Me, New SkillRowChangeEvent(CType(e.Row,SkillRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSkillRow(ByVal row As SkillRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillRow
        Inherits DataRow
        
        Private tableSkill As SkillDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSkill = CType(Me.Table,SkillDataTable)
        End Sub
        
        Public Property SkillName As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.SkillNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.SkillNameColumn) = value
            End Set
        End Property
        
        Public Property SkillRanks As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.SkillRanksColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.SkillRanksColumn) = value
            End Set
        End Property
        
        Public Property Ability As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.AbilityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.AbilityColumn) = value
            End Set
        End Property
        
        Public Property Modifier As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.ModifierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.ModifierColumn) = value
            End Set
        End Property
        
        Public Property TrainedOnly As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.TrainedOnlyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.TrainedOnlyColumn) = value
            End Set
        End Property
        
        Public Property CheckMultiplier As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.CheckMultiplierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.CheckMultiplierColumn) = value
            End Set
        End Property
        
        Public Property Final As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.FinalColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.FinalColumn) = value
            End Set
        End Property
        
        Public Property ClassSkill As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.ClassSkillColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.ClassSkillColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableSkill.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkill.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property SkillsRow As SkillsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Skills_Skill")),SkillsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Skills_Skill"))
            End Set
        End Property
        
        Public Function IsSkillNameNull() As Boolean
            Return Me.IsNull(Me.tableSkill.SkillNameColumn)
        End Function
        
        Public Sub SetSkillNameNull()
            Me(Me.tableSkill.SkillNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSkillRanksNull() As Boolean
            Return Me.IsNull(Me.tableSkill.SkillRanksColumn)
        End Function
        
        Public Sub SetSkillRanksNull()
            Me(Me.tableSkill.SkillRanksColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilityNull() As Boolean
            Return Me.IsNull(Me.tableSkill.AbilityColumn)
        End Function
        
        Public Sub SetAbilityNull()
            Me(Me.tableSkill.AbilityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierNull() As Boolean
            Return Me.IsNull(Me.tableSkill.ModifierColumn)
        End Function
        
        Public Sub SetModifierNull()
            Me(Me.tableSkill.ModifierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTrainedOnlyNull() As Boolean
            Return Me.IsNull(Me.tableSkill.TrainedOnlyColumn)
        End Function
        
        Public Sub SetTrainedOnlyNull()
            Me(Me.tableSkill.TrainedOnlyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCheckMultiplierNull() As Boolean
            Return Me.IsNull(Me.tableSkill.CheckMultiplierColumn)
        End Function
        
        Public Sub SetCheckMultiplierNull()
            Me(Me.tableSkill.CheckMultiplierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFinalNull() As Boolean
            Return Me.IsNull(Me.tableSkill.FinalColumn)
        End Function
        
        Public Sub SetFinalNull()
            Me(Me.tableSkill.FinalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassSkillNull() As Boolean
            Return Me.IsNull(Me.tableSkill.ClassSkillColumn)
        End Function
        
        Public Sub SetClassSkillNull()
            Me(Me.tableSkill.ClassSkillColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableSkill.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableSkill.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableSkill.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableSkill.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableSkill.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableSkill.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableSkill.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableSkill.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableSkill.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableSkill.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SkillRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SkillRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SkillRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LanguagesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLanguages_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Languages")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Languages_IdColumn As DataColumn
            Get
                Return Me.columnLanguages_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LanguagesRow
            Get
                Return CType(Me.Rows(index),LanguagesRow)
            End Get
        End Property
        
        Public Event LanguagesRowChanged As LanguagesRowChangeEventHandler
        
        Public Event LanguagesRowChanging As LanguagesRowChangeEventHandler
        
        Public Event LanguagesRowDeleted As LanguagesRowChangeEventHandler
        
        Public Event LanguagesRowDeleting As LanguagesRowChangeEventHandler
        
        Public Overloads Sub AddLanguagesRow(ByVal row As LanguagesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLanguagesRow(ByVal parentCharacterRowByCharacter_Languages As CharacterRow) As LanguagesRow
            Dim rowLanguagesRow As LanguagesRow = CType(Me.NewRow,LanguagesRow)
            rowLanguagesRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Languages(86)}
            Me.Rows.Add(rowLanguagesRow)
            Return rowLanguagesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LanguagesDataTable = CType(MyBase.Clone,LanguagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LanguagesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnLanguages_Id = Me.Columns("Languages_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnLanguages_Id = New DataColumn("Languages_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnLanguages_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnLanguages_Id}, true))
            Me.columnLanguages_Id.AutoIncrement = true
            Me.columnLanguages_Id.AllowDBNull = false
            Me.columnLanguages_Id.Unique = true
        End Sub
        
        Public Function NewLanguagesRow() As LanguagesRow
            Return CType(Me.NewRow,LanguagesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LanguagesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LanguagesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LanguagesRowChangedEvent) Is Nothing) Then
                RaiseEvent LanguagesRowChanged(Me, New LanguagesRowChangeEvent(CType(e.Row,LanguagesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LanguagesRowChangingEvent) Is Nothing) Then
                RaiseEvent LanguagesRowChanging(Me, New LanguagesRowChangeEvent(CType(e.Row,LanguagesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LanguagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent LanguagesRowDeleted(Me, New LanguagesRowChangeEvent(CType(e.Row,LanguagesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LanguagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent LanguagesRowDeleting(Me, New LanguagesRowChangeEvent(CType(e.Row,LanguagesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLanguagesRow(ByVal row As LanguagesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LanguagesRow
        Inherits DataRow
        
        Private tableLanguages As LanguagesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLanguages = CType(Me.Table,LanguagesDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Languages")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Languages"))
            End Set
        End Property
        
        Public Function GetLanguageRows() As LanguageRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Languages_Language")),LanguageRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LanguagesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LanguagesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LanguagesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LanguagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LanguageDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLanguageName As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnLanguages_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Language")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property LanguageNameColumn As DataColumn
            Get
                Return Me.columnLanguageName
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property Languages_IdColumn As DataColumn
            Get
                Return Me.columnLanguages_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LanguageRow
            Get
                Return CType(Me.Rows(index),LanguageRow)
            End Get
        End Property
        
        Public Event LanguageRowChanged As LanguageRowChangeEventHandler
        
        Public Event LanguageRowChanging As LanguageRowChangeEventHandler
        
        Public Event LanguageRowDeleted As LanguageRowChangeEventHandler
        
        Public Event LanguageRowDeleting As LanguageRowChangeEventHandler
        
        Public Overloads Sub AddLanguageRow(ByVal row As LanguageRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLanguageRow(ByVal LanguageName As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentLanguagesRowByLanguages_Language As LanguagesRow) As LanguageRow
            Dim rowLanguageRow As LanguageRow = CType(Me.NewRow,LanguageRow)
            rowLanguageRow.ItemArray = New Object() {LanguageName, License, Sourcebook, Tags, PageNo, HelpPage, parentLanguagesRowByLanguages_Language(0)}
            Me.Rows.Add(rowLanguageRow)
            Return rowLanguageRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LanguageDataTable = CType(MyBase.Clone,LanguageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LanguageDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnLanguageName = Me.Columns("LanguageName")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnLanguages_Id = Me.Columns("Languages_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnLanguageName = New DataColumn("LanguageName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLanguageName)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnLanguages_Id = New DataColumn("Languages_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnLanguages_Id)
        End Sub
        
        Public Function NewLanguageRow() As LanguageRow
            Return CType(Me.NewRow,LanguageRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LanguageRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LanguageRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LanguageRowChangedEvent) Is Nothing) Then
                RaiseEvent LanguageRowChanged(Me, New LanguageRowChangeEvent(CType(e.Row,LanguageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LanguageRowChangingEvent) Is Nothing) Then
                RaiseEvent LanguageRowChanging(Me, New LanguageRowChangeEvent(CType(e.Row,LanguageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LanguageRowDeletedEvent) Is Nothing) Then
                RaiseEvent LanguageRowDeleted(Me, New LanguageRowChangeEvent(CType(e.Row,LanguageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LanguageRowDeletingEvent) Is Nothing) Then
                RaiseEvent LanguageRowDeleting(Me, New LanguageRowChangeEvent(CType(e.Row,LanguageRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLanguageRow(ByVal row As LanguageRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LanguageRow
        Inherits DataRow
        
        Private tableLanguage As LanguageDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLanguage = CType(Me.Table,LanguageDataTable)
        End Sub
        
        Public Property LanguageName As String
            Get
                Try 
                    Return CType(Me(Me.tableLanguage.LanguageNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLanguage.LanguageNameColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableLanguage.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLanguage.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableLanguage.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLanguage.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableLanguage.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLanguage.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableLanguage.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLanguage.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableLanguage.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLanguage.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property LanguagesRow As LanguagesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Languages_Language")),LanguagesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Languages_Language"))
            End Set
        End Property
        
        Public Function IsLanguageNameNull() As Boolean
            Return Me.IsNull(Me.tableLanguage.LanguageNameColumn)
        End Function
        
        Public Sub SetLanguageNameNull()
            Me(Me.tableLanguage.LanguageNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableLanguage.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableLanguage.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableLanguage.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableLanguage.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableLanguage.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableLanguage.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableLanguage.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableLanguage.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableLanguage.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableLanguage.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LanguageRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LanguageRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LanguageRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LanguageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CoreModifiersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCoreModifiers_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("CoreModifiers")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property CoreModifiers_IdColumn As DataColumn
            Get
                Return Me.columnCoreModifiers_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CoreModifiersRow
            Get
                Return CType(Me.Rows(index),CoreModifiersRow)
            End Get
        End Property
        
        Public Event CoreModifiersRowChanged As CoreModifiersRowChangeEventHandler
        
        Public Event CoreModifiersRowChanging As CoreModifiersRowChangeEventHandler
        
        Public Event CoreModifiersRowDeleted As CoreModifiersRowChangeEventHandler
        
        Public Event CoreModifiersRowDeleting As CoreModifiersRowChangeEventHandler
        
        Public Overloads Sub AddCoreModifiersRow(ByVal row As CoreModifiersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCoreModifiersRow(ByVal parentCharacterRowByCharacter_CoreModifiers As CharacterRow) As CoreModifiersRow
            Dim rowCoreModifiersRow As CoreModifiersRow = CType(Me.NewRow,CoreModifiersRow)
            rowCoreModifiersRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_CoreModifiers(86)}
            Me.Rows.Add(rowCoreModifiersRow)
            Return rowCoreModifiersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CoreModifiersDataTable = CType(MyBase.Clone,CoreModifiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CoreModifiersDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnCoreModifiers_Id = Me.Columns("CoreModifiers_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCoreModifiers_Id = New DataColumn("CoreModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCoreModifiers_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCoreModifiers_Id}, true))
            Me.columnCoreModifiers_Id.AutoIncrement = true
            Me.columnCoreModifiers_Id.AllowDBNull = false
            Me.columnCoreModifiers_Id.Unique = true
        End Sub
        
        Public Function NewCoreModifiersRow() As CoreModifiersRow
            Return CType(Me.NewRow,CoreModifiersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CoreModifiersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CoreModifiersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CoreModifiersRowChangedEvent) Is Nothing) Then
                RaiseEvent CoreModifiersRowChanged(Me, New CoreModifiersRowChangeEvent(CType(e.Row,CoreModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CoreModifiersRowChangingEvent) Is Nothing) Then
                RaiseEvent CoreModifiersRowChanging(Me, New CoreModifiersRowChangeEvent(CType(e.Row,CoreModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CoreModifiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent CoreModifiersRowDeleted(Me, New CoreModifiersRowChangeEvent(CType(e.Row,CoreModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CoreModifiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent CoreModifiersRowDeleting(Me, New CoreModifiersRowChangeEvent(CType(e.Row,CoreModifiersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCoreModifiersRow(ByVal row As CoreModifiersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CoreModifiersRow
        Inherits DataRow
        
        Private tableCoreModifiers As CoreModifiersDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCoreModifiers = CType(Me.Table,CoreModifiersDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_CoreModifiers")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_CoreModifiers"))
            End Set
        End Property
        
        Public Function GetCoreModifierRows() As CoreModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CoreModifiers_CoreModifier")),CoreModifierRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CoreModifiersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CoreModifiersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CoreModifiersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CoreModifiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CoreModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnModifierType As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnCondition As DataColumn
        
        Private columnValid As DataColumn
        
        Private columnEnabled As DataColumn
        
        Private columnSystemElement As DataColumn
        
        Private columnFocusName As DataColumn
        
        Private columnModifierValue As DataColumn
        
        Private columnCoreModifiers_Id As DataColumn
        
        Public Sub New()
            MyBase.New("CoreModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property ModifierTypeColumn As DataColumn
            Get
                Return Me.columnModifierType
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property ConditionColumn As DataColumn
            Get
                Return Me.columnCondition
            End Get
        End Property
        
        Public ReadOnly Property ValidColumn As DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        Public ReadOnly Property EnabledColumn As DataColumn
            Get
                Return Me.columnEnabled
            End Get
        End Property
        
        Public ReadOnly Property SystemElementColumn As DataColumn
            Get
                Return Me.columnSystemElement
            End Get
        End Property
        
        Public ReadOnly Property FocusNameColumn As DataColumn
            Get
                Return Me.columnFocusName
            End Get
        End Property
        
        Public ReadOnly Property ModifierValueColumn As DataColumn
            Get
                Return Me.columnModifierValue
            End Get
        End Property
        
        Public ReadOnly Property CoreModifiers_IdColumn As DataColumn
            Get
                Return Me.columnCoreModifiers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CoreModifierRow
            Get
                Return CType(Me.Rows(index),CoreModifierRow)
            End Get
        End Property
        
        Public Event CoreModifierRowChanged As CoreModifierRowChangeEventHandler
        
        Public Event CoreModifierRowChanging As CoreModifierRowChangeEventHandler
        
        Public Event CoreModifierRowDeleted As CoreModifierRowChangeEventHandler
        
        Public Event CoreModifierRowDeleting As CoreModifierRowChangeEventHandler
        
        Public Overloads Sub AddCoreModifierRow(ByVal row As CoreModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCoreModifierRow(ByVal ModifierName As String, ByVal ModifierType As String, ByVal Source As String, ByVal Condition As String, ByVal Valid As String, ByVal Enabled As String, ByVal SystemElement As String, ByVal FocusName As String, ByVal ModifierValue As String, ByVal parentCoreModifiersRowByCoreModifiers_CoreModifier As CoreModifiersRow) As CoreModifierRow
            Dim rowCoreModifierRow As CoreModifierRow = CType(Me.NewRow,CoreModifierRow)
            rowCoreModifierRow.ItemArray = New Object() {ModifierName, ModifierType, Source, Condition, Valid, Enabled, SystemElement, FocusName, ModifierValue, parentCoreModifiersRowByCoreModifiers_CoreModifier(0)}
            Me.Rows.Add(rowCoreModifierRow)
            Return rowCoreModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CoreModifierDataTable = CType(MyBase.Clone,CoreModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CoreModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnModifierType = Me.Columns("ModifierType")
            Me.columnSource = Me.Columns("Source")
            Me.columnCondition = Me.Columns("Condition")
            Me.columnValid = Me.Columns("Valid")
            Me.columnEnabled = Me.Columns("Enabled")
            Me.columnSystemElement = Me.Columns("SystemElement")
            Me.columnFocusName = Me.Columns("FocusName")
            Me.columnModifierValue = Me.Columns("ModifierValue")
            Me.columnCoreModifiers_Id = Me.Columns("CoreModifiers_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnModifierType = New DataColumn("ModifierType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierType)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnCondition = New DataColumn("Condition", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondition)
            Me.columnValid = New DataColumn("Valid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValid)
            Me.columnEnabled = New DataColumn("Enabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnabled)
            Me.columnSystemElement = New DataColumn("SystemElement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSystemElement)
            Me.columnFocusName = New DataColumn("FocusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFocusName)
            Me.columnModifierValue = New DataColumn("ModifierValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierValue)
            Me.columnCoreModifiers_Id = New DataColumn("CoreModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCoreModifiers_Id)
        End Sub
        
        Public Function NewCoreModifierRow() As CoreModifierRow
            Return CType(Me.NewRow,CoreModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CoreModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CoreModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CoreModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent CoreModifierRowChanged(Me, New CoreModifierRowChangeEvent(CType(e.Row,CoreModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CoreModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent CoreModifierRowChanging(Me, New CoreModifierRowChangeEvent(CType(e.Row,CoreModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CoreModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent CoreModifierRowDeleted(Me, New CoreModifierRowChangeEvent(CType(e.Row,CoreModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CoreModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent CoreModifierRowDeleting(Me, New CoreModifierRowChangeEvent(CType(e.Row,CoreModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCoreModifierRow(ByVal row As CoreModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CoreModifierRow
        Inherits DataRow
        
        Private tableCoreModifier As CoreModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCoreModifier = CType(Me.Table,CoreModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierType As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.ModifierTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.ModifierTypeColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.SourceColumn) = value
            End Set
        End Property
        
        Public Property Condition As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.ConditionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.ConditionColumn) = value
            End Set
        End Property
        
        Public Property Valid As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.ValidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.ValidColumn) = value
            End Set
        End Property
        
        Public Property Enabled As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.EnabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.EnabledColumn) = value
            End Set
        End Property
        
        Public Property SystemElement As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.SystemElementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.SystemElementColumn) = value
            End Set
        End Property
        
        Public Property FocusName As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.FocusNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.FocusNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierValue As String
            Get
                Try 
                    Return CType(Me(Me.tableCoreModifier.ModifierValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCoreModifier.ModifierValueColumn) = value
            End Set
        End Property
        
        Public Property CoreModifiersRow As CoreModifiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CoreModifiers_CoreModifier")),CoreModifiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CoreModifiers_CoreModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tableCoreModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierTypeNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.ModifierTypeColumn)
        End Function
        
        Public Sub SetModifierTypeNull()
            Me(Me.tableCoreModifier.ModifierTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableCoreModifier.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConditionNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.ConditionColumn)
        End Function
        
        Public Sub SetConditionNull()
            Me(Me.tableCoreModifier.ConditionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.ValidColumn)
        End Function
        
        Public Sub SetValidNull()
            Me(Me.tableCoreModifier.ValidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnabledNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.EnabledColumn)
        End Function
        
        Public Sub SetEnabledNull()
            Me(Me.tableCoreModifier.EnabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSystemElementNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.SystemElementColumn)
        End Function
        
        Public Sub SetSystemElementNull()
            Me(Me.tableCoreModifier.SystemElementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFocusNameNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.FocusNameColumn)
        End Function
        
        Public Sub SetFocusNameNull()
            Me(Me.tableCoreModifier.FocusNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierValueNull() As Boolean
            Return Me.IsNull(Me.tableCoreModifier.ModifierValueColumn)
        End Function
        
        Public Sub SetModifierValueNull()
            Me(Me.tableCoreModifier.ModifierValueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CoreModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CoreModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CoreModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CoreModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackModifiersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAttackModifiers_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("AttackModifiers")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property AttackModifiers_IdColumn As DataColumn
            Get
                Return Me.columnAttackModifiers_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AttackModifiersRow
            Get
                Return CType(Me.Rows(index),AttackModifiersRow)
            End Get
        End Property
        
        Public Event AttackModifiersRowChanged As AttackModifiersRowChangeEventHandler
        
        Public Event AttackModifiersRowChanging As AttackModifiersRowChangeEventHandler
        
        Public Event AttackModifiersRowDeleted As AttackModifiersRowChangeEventHandler
        
        Public Event AttackModifiersRowDeleting As AttackModifiersRowChangeEventHandler
        
        Public Overloads Sub AddAttackModifiersRow(ByVal row As AttackModifiersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAttackModifiersRow(ByVal parentCharacterRowByCharacter_AttackModifiers As CharacterRow) As AttackModifiersRow
            Dim rowAttackModifiersRow As AttackModifiersRow = CType(Me.NewRow,AttackModifiersRow)
            rowAttackModifiersRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_AttackModifiers(86)}
            Me.Rows.Add(rowAttackModifiersRow)
            Return rowAttackModifiersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AttackModifiersDataTable = CType(MyBase.Clone,AttackModifiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AttackModifiersDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAttackModifiers_Id = Me.Columns("AttackModifiers_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAttackModifiers_Id = New DataColumn("AttackModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAttackModifiers_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAttackModifiers_Id}, true))
            Me.columnAttackModifiers_Id.AutoIncrement = true
            Me.columnAttackModifiers_Id.AllowDBNull = false
            Me.columnAttackModifiers_Id.Unique = true
        End Sub
        
        Public Function NewAttackModifiersRow() As AttackModifiersRow
            Return CType(Me.NewRow,AttackModifiersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AttackModifiersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AttackModifiersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AttackModifiersRowChangedEvent) Is Nothing) Then
                RaiseEvent AttackModifiersRowChanged(Me, New AttackModifiersRowChangeEvent(CType(e.Row,AttackModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AttackModifiersRowChangingEvent) Is Nothing) Then
                RaiseEvent AttackModifiersRowChanging(Me, New AttackModifiersRowChangeEvent(CType(e.Row,AttackModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AttackModifiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent AttackModifiersRowDeleted(Me, New AttackModifiersRowChangeEvent(CType(e.Row,AttackModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AttackModifiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent AttackModifiersRowDeleting(Me, New AttackModifiersRowChangeEvent(CType(e.Row,AttackModifiersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAttackModifiersRow(ByVal row As AttackModifiersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackModifiersRow
        Inherits DataRow
        
        Private tableAttackModifiers As AttackModifiersDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAttackModifiers = CType(Me.Table,AttackModifiersDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_AttackModifiers")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_AttackModifiers"))
            End Set
        End Property
        
        Public Function GetAttackModifierRows() As AttackModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AttackModifiers_AttackModifier")),AttackModifierRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackModifiersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AttackModifiersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AttackModifiersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AttackModifiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnModifierType As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnCondition As DataColumn
        
        Private columnValid As DataColumn
        
        Private columnEnabled As DataColumn
        
        Private columnSystemElement As DataColumn
        
        Private columnFocusName As DataColumn
        
        Private columnModifierValue As DataColumn
        
        Private columnAttackModifiers_Id As DataColumn
        
        Public Sub New()
            MyBase.New("AttackModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property ModifierTypeColumn As DataColumn
            Get
                Return Me.columnModifierType
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property ConditionColumn As DataColumn
            Get
                Return Me.columnCondition
            End Get
        End Property
        
        Public ReadOnly Property ValidColumn As DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        Public ReadOnly Property EnabledColumn As DataColumn
            Get
                Return Me.columnEnabled
            End Get
        End Property
        
        Public ReadOnly Property SystemElementColumn As DataColumn
            Get
                Return Me.columnSystemElement
            End Get
        End Property
        
        Public ReadOnly Property FocusNameColumn As DataColumn
            Get
                Return Me.columnFocusName
            End Get
        End Property
        
        Public ReadOnly Property ModifierValueColumn As DataColumn
            Get
                Return Me.columnModifierValue
            End Get
        End Property
        
        Public ReadOnly Property AttackModifiers_IdColumn As DataColumn
            Get
                Return Me.columnAttackModifiers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AttackModifierRow
            Get
                Return CType(Me.Rows(index),AttackModifierRow)
            End Get
        End Property
        
        Public Event AttackModifierRowChanged As AttackModifierRowChangeEventHandler
        
        Public Event AttackModifierRowChanging As AttackModifierRowChangeEventHandler
        
        Public Event AttackModifierRowDeleted As AttackModifierRowChangeEventHandler
        
        Public Event AttackModifierRowDeleting As AttackModifierRowChangeEventHandler
        
        Public Overloads Sub AddAttackModifierRow(ByVal row As AttackModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAttackModifierRow(ByVal ModifierName As String, ByVal ModifierType As String, ByVal Source As String, ByVal Condition As String, ByVal Valid As String, ByVal Enabled As String, ByVal SystemElement As String, ByVal FocusName As String, ByVal ModifierValue As String, ByVal parentAttackModifiersRowByAttackModifiers_AttackModifier As AttackModifiersRow) As AttackModifierRow
            Dim rowAttackModifierRow As AttackModifierRow = CType(Me.NewRow,AttackModifierRow)
            rowAttackModifierRow.ItemArray = New Object() {ModifierName, ModifierType, Source, Condition, Valid, Enabled, SystemElement, FocusName, ModifierValue, parentAttackModifiersRowByAttackModifiers_AttackModifier(0)}
            Me.Rows.Add(rowAttackModifierRow)
            Return rowAttackModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AttackModifierDataTable = CType(MyBase.Clone,AttackModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AttackModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnModifierType = Me.Columns("ModifierType")
            Me.columnSource = Me.Columns("Source")
            Me.columnCondition = Me.Columns("Condition")
            Me.columnValid = Me.Columns("Valid")
            Me.columnEnabled = Me.Columns("Enabled")
            Me.columnSystemElement = Me.Columns("SystemElement")
            Me.columnFocusName = Me.Columns("FocusName")
            Me.columnModifierValue = Me.Columns("ModifierValue")
            Me.columnAttackModifiers_Id = Me.Columns("AttackModifiers_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnModifierType = New DataColumn("ModifierType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierType)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnCondition = New DataColumn("Condition", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondition)
            Me.columnValid = New DataColumn("Valid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValid)
            Me.columnEnabled = New DataColumn("Enabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnabled)
            Me.columnSystemElement = New DataColumn("SystemElement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSystemElement)
            Me.columnFocusName = New DataColumn("FocusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFocusName)
            Me.columnModifierValue = New DataColumn("ModifierValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierValue)
            Me.columnAttackModifiers_Id = New DataColumn("AttackModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAttackModifiers_Id)
        End Sub
        
        Public Function NewAttackModifierRow() As AttackModifierRow
            Return CType(Me.NewRow,AttackModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AttackModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AttackModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AttackModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent AttackModifierRowChanged(Me, New AttackModifierRowChangeEvent(CType(e.Row,AttackModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AttackModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent AttackModifierRowChanging(Me, New AttackModifierRowChangeEvent(CType(e.Row,AttackModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AttackModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent AttackModifierRowDeleted(Me, New AttackModifierRowChangeEvent(CType(e.Row,AttackModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AttackModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent AttackModifierRowDeleting(Me, New AttackModifierRowChangeEvent(CType(e.Row,AttackModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAttackModifierRow(ByVal row As AttackModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackModifierRow
        Inherits DataRow
        
        Private tableAttackModifier As AttackModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAttackModifier = CType(Me.Table,AttackModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierType As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.ModifierTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.ModifierTypeColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.SourceColumn) = value
            End Set
        End Property
        
        Public Property Condition As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.ConditionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.ConditionColumn) = value
            End Set
        End Property
        
        Public Property Valid As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.ValidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.ValidColumn) = value
            End Set
        End Property
        
        Public Property Enabled As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.EnabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.EnabledColumn) = value
            End Set
        End Property
        
        Public Property SystemElement As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.SystemElementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.SystemElementColumn) = value
            End Set
        End Property
        
        Public Property FocusName As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.FocusNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.FocusNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierValue As String
            Get
                Try 
                    Return CType(Me(Me.tableAttackModifier.ModifierValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAttackModifier.ModifierValueColumn) = value
            End Set
        End Property
        
        Public Property AttackModifiersRow As AttackModifiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AttackModifiers_AttackModifier")),AttackModifiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AttackModifiers_AttackModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tableAttackModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierTypeNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.ModifierTypeColumn)
        End Function
        
        Public Sub SetModifierTypeNull()
            Me(Me.tableAttackModifier.ModifierTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableAttackModifier.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConditionNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.ConditionColumn)
        End Function
        
        Public Sub SetConditionNull()
            Me(Me.tableAttackModifier.ConditionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.ValidColumn)
        End Function
        
        Public Sub SetValidNull()
            Me(Me.tableAttackModifier.ValidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnabledNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.EnabledColumn)
        End Function
        
        Public Sub SetEnabledNull()
            Me(Me.tableAttackModifier.EnabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSystemElementNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.SystemElementColumn)
        End Function
        
        Public Sub SetSystemElementNull()
            Me(Me.tableAttackModifier.SystemElementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFocusNameNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.FocusNameColumn)
        End Function
        
        Public Sub SetFocusNameNull()
            Me(Me.tableAttackModifier.FocusNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierValueNull() As Boolean
            Return Me.IsNull(Me.tableAttackModifier.ModifierValueColumn)
        End Function
        
        Public Sub SetModifierValueNull()
            Me(Me.tableAttackModifier.ModifierValueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AttackModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AttackModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AttackModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AttackModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DefenseModifiersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDefenseModifiers_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("DefenseModifiers")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property DefenseModifiers_IdColumn As DataColumn
            Get
                Return Me.columnDefenseModifiers_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DefenseModifiersRow
            Get
                Return CType(Me.Rows(index),DefenseModifiersRow)
            End Get
        End Property
        
        Public Event DefenseModifiersRowChanged As DefenseModifiersRowChangeEventHandler
        
        Public Event DefenseModifiersRowChanging As DefenseModifiersRowChangeEventHandler
        
        Public Event DefenseModifiersRowDeleted As DefenseModifiersRowChangeEventHandler
        
        Public Event DefenseModifiersRowDeleting As DefenseModifiersRowChangeEventHandler
        
        Public Overloads Sub AddDefenseModifiersRow(ByVal row As DefenseModifiersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDefenseModifiersRow(ByVal parentCharacterRowByCharacter_DefenseModifiers As CharacterRow) As DefenseModifiersRow
            Dim rowDefenseModifiersRow As DefenseModifiersRow = CType(Me.NewRow,DefenseModifiersRow)
            rowDefenseModifiersRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_DefenseModifiers(86)}
            Me.Rows.Add(rowDefenseModifiersRow)
            Return rowDefenseModifiersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DefenseModifiersDataTable = CType(MyBase.Clone,DefenseModifiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DefenseModifiersDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnDefenseModifiers_Id = Me.Columns("DefenseModifiers_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDefenseModifiers_Id = New DataColumn("DefenseModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnDefenseModifiers_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDefenseModifiers_Id}, true))
            Me.columnDefenseModifiers_Id.AutoIncrement = true
            Me.columnDefenseModifiers_Id.AllowDBNull = false
            Me.columnDefenseModifiers_Id.Unique = true
        End Sub
        
        Public Function NewDefenseModifiersRow() As DefenseModifiersRow
            Return CType(Me.NewRow,DefenseModifiersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DefenseModifiersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DefenseModifiersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DefenseModifiersRowChangedEvent) Is Nothing) Then
                RaiseEvent DefenseModifiersRowChanged(Me, New DefenseModifiersRowChangeEvent(CType(e.Row,DefenseModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DefenseModifiersRowChangingEvent) Is Nothing) Then
                RaiseEvent DefenseModifiersRowChanging(Me, New DefenseModifiersRowChangeEvent(CType(e.Row,DefenseModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DefenseModifiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent DefenseModifiersRowDeleted(Me, New DefenseModifiersRowChangeEvent(CType(e.Row,DefenseModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DefenseModifiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent DefenseModifiersRowDeleting(Me, New DefenseModifiersRowChangeEvent(CType(e.Row,DefenseModifiersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDefenseModifiersRow(ByVal row As DefenseModifiersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DefenseModifiersRow
        Inherits DataRow
        
        Private tableDefenseModifiers As DefenseModifiersDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDefenseModifiers = CType(Me.Table,DefenseModifiersDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_DefenseModifiers")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_DefenseModifiers"))
            End Set
        End Property
        
        Public Function GetDefenseModifierRows() As DefenseModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("DefenseModifiers_DefenseModifier")),DefenseModifierRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DefenseModifiersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DefenseModifiersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DefenseModifiersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DefenseModifiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DefenseModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnModifierType As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnCondition As DataColumn
        
        Private columnValid As DataColumn
        
        Private columnEnabled As DataColumn
        
        Private columnSystemElement As DataColumn
        
        Private columnFocusName As DataColumn
        
        Private columnModifierValue As DataColumn
        
        Private columnDefenseModifiers_Id As DataColumn
        
        Public Sub New()
            MyBase.New("DefenseModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property ModifierTypeColumn As DataColumn
            Get
                Return Me.columnModifierType
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property ConditionColumn As DataColumn
            Get
                Return Me.columnCondition
            End Get
        End Property
        
        Public ReadOnly Property ValidColumn As DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        Public ReadOnly Property EnabledColumn As DataColumn
            Get
                Return Me.columnEnabled
            End Get
        End Property
        
        Public ReadOnly Property SystemElementColumn As DataColumn
            Get
                Return Me.columnSystemElement
            End Get
        End Property
        
        Public ReadOnly Property FocusNameColumn As DataColumn
            Get
                Return Me.columnFocusName
            End Get
        End Property
        
        Public ReadOnly Property ModifierValueColumn As DataColumn
            Get
                Return Me.columnModifierValue
            End Get
        End Property
        
        Public ReadOnly Property DefenseModifiers_IdColumn As DataColumn
            Get
                Return Me.columnDefenseModifiers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DefenseModifierRow
            Get
                Return CType(Me.Rows(index),DefenseModifierRow)
            End Get
        End Property
        
        Public Event DefenseModifierRowChanged As DefenseModifierRowChangeEventHandler
        
        Public Event DefenseModifierRowChanging As DefenseModifierRowChangeEventHandler
        
        Public Event DefenseModifierRowDeleted As DefenseModifierRowChangeEventHandler
        
        Public Event DefenseModifierRowDeleting As DefenseModifierRowChangeEventHandler
        
        Public Overloads Sub AddDefenseModifierRow(ByVal row As DefenseModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDefenseModifierRow(ByVal ModifierName As String, ByVal ModifierType As String, ByVal Source As String, ByVal Condition As String, ByVal Valid As String, ByVal Enabled As String, ByVal SystemElement As String, ByVal FocusName As String, ByVal ModifierValue As String, ByVal parentDefenseModifiersRowByDefenseModifiers_DefenseModifier As DefenseModifiersRow) As DefenseModifierRow
            Dim rowDefenseModifierRow As DefenseModifierRow = CType(Me.NewRow,DefenseModifierRow)
            rowDefenseModifierRow.ItemArray = New Object() {ModifierName, ModifierType, Source, Condition, Valid, Enabled, SystemElement, FocusName, ModifierValue, parentDefenseModifiersRowByDefenseModifiers_DefenseModifier(0)}
            Me.Rows.Add(rowDefenseModifierRow)
            Return rowDefenseModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DefenseModifierDataTable = CType(MyBase.Clone,DefenseModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DefenseModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnModifierType = Me.Columns("ModifierType")
            Me.columnSource = Me.Columns("Source")
            Me.columnCondition = Me.Columns("Condition")
            Me.columnValid = Me.Columns("Valid")
            Me.columnEnabled = Me.Columns("Enabled")
            Me.columnSystemElement = Me.Columns("SystemElement")
            Me.columnFocusName = Me.Columns("FocusName")
            Me.columnModifierValue = Me.Columns("ModifierValue")
            Me.columnDefenseModifiers_Id = Me.Columns("DefenseModifiers_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnModifierType = New DataColumn("ModifierType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierType)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnCondition = New DataColumn("Condition", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondition)
            Me.columnValid = New DataColumn("Valid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValid)
            Me.columnEnabled = New DataColumn("Enabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnabled)
            Me.columnSystemElement = New DataColumn("SystemElement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSystemElement)
            Me.columnFocusName = New DataColumn("FocusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFocusName)
            Me.columnModifierValue = New DataColumn("ModifierValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierValue)
            Me.columnDefenseModifiers_Id = New DataColumn("DefenseModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnDefenseModifiers_Id)
        End Sub
        
        Public Function NewDefenseModifierRow() As DefenseModifierRow
            Return CType(Me.NewRow,DefenseModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DefenseModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DefenseModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DefenseModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent DefenseModifierRowChanged(Me, New DefenseModifierRowChangeEvent(CType(e.Row,DefenseModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DefenseModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent DefenseModifierRowChanging(Me, New DefenseModifierRowChangeEvent(CType(e.Row,DefenseModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DefenseModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent DefenseModifierRowDeleted(Me, New DefenseModifierRowChangeEvent(CType(e.Row,DefenseModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DefenseModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent DefenseModifierRowDeleting(Me, New DefenseModifierRowChangeEvent(CType(e.Row,DefenseModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDefenseModifierRow(ByVal row As DefenseModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DefenseModifierRow
        Inherits DataRow
        
        Private tableDefenseModifier As DefenseModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDefenseModifier = CType(Me.Table,DefenseModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierType As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.ModifierTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.ModifierTypeColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.SourceColumn) = value
            End Set
        End Property
        
        Public Property Condition As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.ConditionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.ConditionColumn) = value
            End Set
        End Property
        
        Public Property Valid As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.ValidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.ValidColumn) = value
            End Set
        End Property
        
        Public Property Enabled As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.EnabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.EnabledColumn) = value
            End Set
        End Property
        
        Public Property SystemElement As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.SystemElementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.SystemElementColumn) = value
            End Set
        End Property
        
        Public Property FocusName As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.FocusNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.FocusNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierValue As String
            Get
                Try 
                    Return CType(Me(Me.tableDefenseModifier.ModifierValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDefenseModifier.ModifierValueColumn) = value
            End Set
        End Property
        
        Public Property DefenseModifiersRow As DefenseModifiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DefenseModifiers_DefenseModifier")),DefenseModifiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DefenseModifiers_DefenseModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tableDefenseModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierTypeNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.ModifierTypeColumn)
        End Function
        
        Public Sub SetModifierTypeNull()
            Me(Me.tableDefenseModifier.ModifierTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableDefenseModifier.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConditionNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.ConditionColumn)
        End Function
        
        Public Sub SetConditionNull()
            Me(Me.tableDefenseModifier.ConditionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.ValidColumn)
        End Function
        
        Public Sub SetValidNull()
            Me(Me.tableDefenseModifier.ValidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnabledNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.EnabledColumn)
        End Function
        
        Public Sub SetEnabledNull()
            Me(Me.tableDefenseModifier.EnabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSystemElementNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.SystemElementColumn)
        End Function
        
        Public Sub SetSystemElementNull()
            Me(Me.tableDefenseModifier.SystemElementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFocusNameNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.FocusNameColumn)
        End Function
        
        Public Sub SetFocusNameNull()
            Me(Me.tableDefenseModifier.FocusNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierValueNull() As Boolean
            Return Me.IsNull(Me.tableDefenseModifier.ModifierValueColumn)
        End Function
        
        Public Sub SetModifierValueNull()
            Me(Me.tableDefenseModifier.ModifierValueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DefenseModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DefenseModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DefenseModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DefenseModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillModifiersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSkillModifiers_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SkillModifiers")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SkillModifiers_IdColumn As DataColumn
            Get
                Return Me.columnSkillModifiers_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SkillModifiersRow
            Get
                Return CType(Me.Rows(index),SkillModifiersRow)
            End Get
        End Property
        
        Public Event SkillModifiersRowChanged As SkillModifiersRowChangeEventHandler
        
        Public Event SkillModifiersRowChanging As SkillModifiersRowChangeEventHandler
        
        Public Event SkillModifiersRowDeleted As SkillModifiersRowChangeEventHandler
        
        Public Event SkillModifiersRowDeleting As SkillModifiersRowChangeEventHandler
        
        Public Overloads Sub AddSkillModifiersRow(ByVal row As SkillModifiersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSkillModifiersRow(ByVal parentCharacterRowByCharacter_SkillModifiers As CharacterRow) As SkillModifiersRow
            Dim rowSkillModifiersRow As SkillModifiersRow = CType(Me.NewRow,SkillModifiersRow)
            rowSkillModifiersRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_SkillModifiers(86)}
            Me.Rows.Add(rowSkillModifiersRow)
            Return rowSkillModifiersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SkillModifiersDataTable = CType(MyBase.Clone,SkillModifiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SkillModifiersDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSkillModifiers_Id = Me.Columns("SkillModifiers_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSkillModifiers_Id = New DataColumn("SkillModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSkillModifiers_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSkillModifiers_Id}, true))
            Me.columnSkillModifiers_Id.AutoIncrement = true
            Me.columnSkillModifiers_Id.AllowDBNull = false
            Me.columnSkillModifiers_Id.Unique = true
        End Sub
        
        Public Function NewSkillModifiersRow() As SkillModifiersRow
            Return CType(Me.NewRow,SkillModifiersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SkillModifiersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SkillModifiersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SkillModifiersRowChangedEvent) Is Nothing) Then
                RaiseEvent SkillModifiersRowChanged(Me, New SkillModifiersRowChangeEvent(CType(e.Row,SkillModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SkillModifiersRowChangingEvent) Is Nothing) Then
                RaiseEvent SkillModifiersRowChanging(Me, New SkillModifiersRowChangeEvent(CType(e.Row,SkillModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SkillModifiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent SkillModifiersRowDeleted(Me, New SkillModifiersRowChangeEvent(CType(e.Row,SkillModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SkillModifiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent SkillModifiersRowDeleting(Me, New SkillModifiersRowChangeEvent(CType(e.Row,SkillModifiersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSkillModifiersRow(ByVal row As SkillModifiersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillModifiersRow
        Inherits DataRow
        
        Private tableSkillModifiers As SkillModifiersDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSkillModifiers = CType(Me.Table,SkillModifiersDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_SkillModifiers")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_SkillModifiers"))
            End Set
        End Property
        
        Public Function GetSkillModifierRows() As SkillModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SkillModifiers_SkillModifier")),SkillModifierRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillModifiersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SkillModifiersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SkillModifiersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SkillModifiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnModifierType As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnCondition As DataColumn
        
        Private columnValid As DataColumn
        
        Private columnEnabled As DataColumn
        
        Private columnSystemElement As DataColumn
        
        Private columnFocusName As DataColumn
        
        Private columnModifierValue As DataColumn
        
        Private columnSkillModifiers_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SkillModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property ModifierTypeColumn As DataColumn
            Get
                Return Me.columnModifierType
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property ConditionColumn As DataColumn
            Get
                Return Me.columnCondition
            End Get
        End Property
        
        Public ReadOnly Property ValidColumn As DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        Public ReadOnly Property EnabledColumn As DataColumn
            Get
                Return Me.columnEnabled
            End Get
        End Property
        
        Public ReadOnly Property SystemElementColumn As DataColumn
            Get
                Return Me.columnSystemElement
            End Get
        End Property
        
        Public ReadOnly Property FocusNameColumn As DataColumn
            Get
                Return Me.columnFocusName
            End Get
        End Property
        
        Public ReadOnly Property ModifierValueColumn As DataColumn
            Get
                Return Me.columnModifierValue
            End Get
        End Property
        
        Public ReadOnly Property SkillModifiers_IdColumn As DataColumn
            Get
                Return Me.columnSkillModifiers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SkillModifierRow
            Get
                Return CType(Me.Rows(index),SkillModifierRow)
            End Get
        End Property
        
        Public Event SkillModifierRowChanged As SkillModifierRowChangeEventHandler
        
        Public Event SkillModifierRowChanging As SkillModifierRowChangeEventHandler
        
        Public Event SkillModifierRowDeleted As SkillModifierRowChangeEventHandler
        
        Public Event SkillModifierRowDeleting As SkillModifierRowChangeEventHandler
        
        Public Overloads Sub AddSkillModifierRow(ByVal row As SkillModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSkillModifierRow(ByVal ModifierName As String, ByVal ModifierType As String, ByVal Source As String, ByVal Condition As String, ByVal Valid As String, ByVal Enabled As String, ByVal SystemElement As String, ByVal FocusName As String, ByVal ModifierValue As String, ByVal parentSkillModifiersRowBySkillModifiers_SkillModifier As SkillModifiersRow) As SkillModifierRow
            Dim rowSkillModifierRow As SkillModifierRow = CType(Me.NewRow,SkillModifierRow)
            rowSkillModifierRow.ItemArray = New Object() {ModifierName, ModifierType, Source, Condition, Valid, Enabled, SystemElement, FocusName, ModifierValue, parentSkillModifiersRowBySkillModifiers_SkillModifier(0)}
            Me.Rows.Add(rowSkillModifierRow)
            Return rowSkillModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SkillModifierDataTable = CType(MyBase.Clone,SkillModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SkillModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnModifierType = Me.Columns("ModifierType")
            Me.columnSource = Me.Columns("Source")
            Me.columnCondition = Me.Columns("Condition")
            Me.columnValid = Me.Columns("Valid")
            Me.columnEnabled = Me.Columns("Enabled")
            Me.columnSystemElement = Me.Columns("SystemElement")
            Me.columnFocusName = Me.Columns("FocusName")
            Me.columnModifierValue = Me.Columns("ModifierValue")
            Me.columnSkillModifiers_Id = Me.Columns("SkillModifiers_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnModifierType = New DataColumn("ModifierType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierType)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnCondition = New DataColumn("Condition", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondition)
            Me.columnValid = New DataColumn("Valid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValid)
            Me.columnEnabled = New DataColumn("Enabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnabled)
            Me.columnSystemElement = New DataColumn("SystemElement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSystemElement)
            Me.columnFocusName = New DataColumn("FocusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFocusName)
            Me.columnModifierValue = New DataColumn("ModifierValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierValue)
            Me.columnSkillModifiers_Id = New DataColumn("SkillModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSkillModifiers_Id)
        End Sub
        
        Public Function NewSkillModifierRow() As SkillModifierRow
            Return CType(Me.NewRow,SkillModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SkillModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SkillModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SkillModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent SkillModifierRowChanged(Me, New SkillModifierRowChangeEvent(CType(e.Row,SkillModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SkillModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent SkillModifierRowChanging(Me, New SkillModifierRowChangeEvent(CType(e.Row,SkillModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SkillModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent SkillModifierRowDeleted(Me, New SkillModifierRowChangeEvent(CType(e.Row,SkillModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SkillModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent SkillModifierRowDeleting(Me, New SkillModifierRowChangeEvent(CType(e.Row,SkillModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSkillModifierRow(ByVal row As SkillModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillModifierRow
        Inherits DataRow
        
        Private tableSkillModifier As SkillModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSkillModifier = CType(Me.Table,SkillModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierType As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.ModifierTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.ModifierTypeColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.SourceColumn) = value
            End Set
        End Property
        
        Public Property Condition As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.ConditionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.ConditionColumn) = value
            End Set
        End Property
        
        Public Property Valid As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.ValidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.ValidColumn) = value
            End Set
        End Property
        
        Public Property Enabled As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.EnabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.EnabledColumn) = value
            End Set
        End Property
        
        Public Property SystemElement As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.SystemElementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.SystemElementColumn) = value
            End Set
        End Property
        
        Public Property FocusName As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.FocusNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.FocusNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierValue As String
            Get
                Try 
                    Return CType(Me(Me.tableSkillModifier.ModifierValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSkillModifier.ModifierValueColumn) = value
            End Set
        End Property
        
        Public Property SkillModifiersRow As SkillModifiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SkillModifiers_SkillModifier")),SkillModifiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SkillModifiers_SkillModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tableSkillModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierTypeNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.ModifierTypeColumn)
        End Function
        
        Public Sub SetModifierTypeNull()
            Me(Me.tableSkillModifier.ModifierTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableSkillModifier.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConditionNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.ConditionColumn)
        End Function
        
        Public Sub SetConditionNull()
            Me(Me.tableSkillModifier.ConditionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.ValidColumn)
        End Function
        
        Public Sub SetValidNull()
            Me(Me.tableSkillModifier.ValidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnabledNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.EnabledColumn)
        End Function
        
        Public Sub SetEnabledNull()
            Me(Me.tableSkillModifier.EnabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSystemElementNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.SystemElementColumn)
        End Function
        
        Public Sub SetSystemElementNull()
            Me(Me.tableSkillModifier.SystemElementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFocusNameNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.FocusNameColumn)
        End Function
        
        Public Sub SetFocusNameNull()
            Me(Me.tableSkillModifier.FocusNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierValueNull() As Boolean
            Return Me.IsNull(Me.tableSkillModifier.ModifierValueColumn)
        End Function
        
        Public Sub SetModifierValueNull()
            Me(Me.tableSkillModifier.ModifierValueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SkillModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SkillModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SkillModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SkillModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MagicModifiersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMagicModifiers_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("MagicModifiers")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property MagicModifiers_IdColumn As DataColumn
            Get
                Return Me.columnMagicModifiers_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MagicModifiersRow
            Get
                Return CType(Me.Rows(index),MagicModifiersRow)
            End Get
        End Property
        
        Public Event MagicModifiersRowChanged As MagicModifiersRowChangeEventHandler
        
        Public Event MagicModifiersRowChanging As MagicModifiersRowChangeEventHandler
        
        Public Event MagicModifiersRowDeleted As MagicModifiersRowChangeEventHandler
        
        Public Event MagicModifiersRowDeleting As MagicModifiersRowChangeEventHandler
        
        Public Overloads Sub AddMagicModifiersRow(ByVal row As MagicModifiersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMagicModifiersRow(ByVal parentCharacterRowByCharacter_MagicModifiers As CharacterRow) As MagicModifiersRow
            Dim rowMagicModifiersRow As MagicModifiersRow = CType(Me.NewRow,MagicModifiersRow)
            rowMagicModifiersRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_MagicModifiers(86)}
            Me.Rows.Add(rowMagicModifiersRow)
            Return rowMagicModifiersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MagicModifiersDataTable = CType(MyBase.Clone,MagicModifiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MagicModifiersDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnMagicModifiers_Id = Me.Columns("MagicModifiers_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnMagicModifiers_Id = New DataColumn("MagicModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnMagicModifiers_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMagicModifiers_Id}, true))
            Me.columnMagicModifiers_Id.AutoIncrement = true
            Me.columnMagicModifiers_Id.AllowDBNull = false
            Me.columnMagicModifiers_Id.Unique = true
        End Sub
        
        Public Function NewMagicModifiersRow() As MagicModifiersRow
            Return CType(Me.NewRow,MagicModifiersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MagicModifiersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MagicModifiersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MagicModifiersRowChangedEvent) Is Nothing) Then
                RaiseEvent MagicModifiersRowChanged(Me, New MagicModifiersRowChangeEvent(CType(e.Row,MagicModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MagicModifiersRowChangingEvent) Is Nothing) Then
                RaiseEvent MagicModifiersRowChanging(Me, New MagicModifiersRowChangeEvent(CType(e.Row,MagicModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MagicModifiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent MagicModifiersRowDeleted(Me, New MagicModifiersRowChangeEvent(CType(e.Row,MagicModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MagicModifiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent MagicModifiersRowDeleting(Me, New MagicModifiersRowChangeEvent(CType(e.Row,MagicModifiersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMagicModifiersRow(ByVal row As MagicModifiersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MagicModifiersRow
        Inherits DataRow
        
        Private tableMagicModifiers As MagicModifiersDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMagicModifiers = CType(Me.Table,MagicModifiersDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_MagicModifiers")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_MagicModifiers"))
            End Set
        End Property
        
        Public Function GetMagicModifierRows() As MagicModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("MagicModifiers_MagicModifier")),MagicModifierRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MagicModifiersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MagicModifiersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MagicModifiersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MagicModifiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MagicModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnModifierType As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnCondition As DataColumn
        
        Private columnValid As DataColumn
        
        Private columnEnabled As DataColumn
        
        Private columnSystemElement As DataColumn
        
        Private columnFocusName As DataColumn
        
        Private columnModifierValue As DataColumn
        
        Private columnMagicModifiers_Id As DataColumn
        
        Public Sub New()
            MyBase.New("MagicModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property ModifierTypeColumn As DataColumn
            Get
                Return Me.columnModifierType
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property ConditionColumn As DataColumn
            Get
                Return Me.columnCondition
            End Get
        End Property
        
        Public ReadOnly Property ValidColumn As DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        Public ReadOnly Property EnabledColumn As DataColumn
            Get
                Return Me.columnEnabled
            End Get
        End Property
        
        Public ReadOnly Property SystemElementColumn As DataColumn
            Get
                Return Me.columnSystemElement
            End Get
        End Property
        
        Public ReadOnly Property FocusNameColumn As DataColumn
            Get
                Return Me.columnFocusName
            End Get
        End Property
        
        Public ReadOnly Property ModifierValueColumn As DataColumn
            Get
                Return Me.columnModifierValue
            End Get
        End Property
        
        Public ReadOnly Property MagicModifiers_IdColumn As DataColumn
            Get
                Return Me.columnMagicModifiers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MagicModifierRow
            Get
                Return CType(Me.Rows(index),MagicModifierRow)
            End Get
        End Property
        
        Public Event MagicModifierRowChanged As MagicModifierRowChangeEventHandler
        
        Public Event MagicModifierRowChanging As MagicModifierRowChangeEventHandler
        
        Public Event MagicModifierRowDeleted As MagicModifierRowChangeEventHandler
        
        Public Event MagicModifierRowDeleting As MagicModifierRowChangeEventHandler
        
        Public Overloads Sub AddMagicModifierRow(ByVal row As MagicModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMagicModifierRow(ByVal ModifierName As String, ByVal ModifierType As String, ByVal Source As String, ByVal Condition As String, ByVal Valid As String, ByVal Enabled As String, ByVal SystemElement As String, ByVal FocusName As String, ByVal ModifierValue As String, ByVal parentMagicModifiersRowByMagicModifiers_MagicModifier As MagicModifiersRow) As MagicModifierRow
            Dim rowMagicModifierRow As MagicModifierRow = CType(Me.NewRow,MagicModifierRow)
            rowMagicModifierRow.ItemArray = New Object() {ModifierName, ModifierType, Source, Condition, Valid, Enabled, SystemElement, FocusName, ModifierValue, parentMagicModifiersRowByMagicModifiers_MagicModifier(0)}
            Me.Rows.Add(rowMagicModifierRow)
            Return rowMagicModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MagicModifierDataTable = CType(MyBase.Clone,MagicModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MagicModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnModifierType = Me.Columns("ModifierType")
            Me.columnSource = Me.Columns("Source")
            Me.columnCondition = Me.Columns("Condition")
            Me.columnValid = Me.Columns("Valid")
            Me.columnEnabled = Me.Columns("Enabled")
            Me.columnSystemElement = Me.Columns("SystemElement")
            Me.columnFocusName = Me.Columns("FocusName")
            Me.columnModifierValue = Me.Columns("ModifierValue")
            Me.columnMagicModifiers_Id = Me.Columns("MagicModifiers_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnModifierType = New DataColumn("ModifierType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierType)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnCondition = New DataColumn("Condition", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondition)
            Me.columnValid = New DataColumn("Valid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValid)
            Me.columnEnabled = New DataColumn("Enabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnabled)
            Me.columnSystemElement = New DataColumn("SystemElement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSystemElement)
            Me.columnFocusName = New DataColumn("FocusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFocusName)
            Me.columnModifierValue = New DataColumn("ModifierValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierValue)
            Me.columnMagicModifiers_Id = New DataColumn("MagicModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnMagicModifiers_Id)
        End Sub
        
        Public Function NewMagicModifierRow() As MagicModifierRow
            Return CType(Me.NewRow,MagicModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MagicModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MagicModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MagicModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent MagicModifierRowChanged(Me, New MagicModifierRowChangeEvent(CType(e.Row,MagicModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MagicModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent MagicModifierRowChanging(Me, New MagicModifierRowChangeEvent(CType(e.Row,MagicModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MagicModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent MagicModifierRowDeleted(Me, New MagicModifierRowChangeEvent(CType(e.Row,MagicModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MagicModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent MagicModifierRowDeleting(Me, New MagicModifierRowChangeEvent(CType(e.Row,MagicModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMagicModifierRow(ByVal row As MagicModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MagicModifierRow
        Inherits DataRow
        
        Private tableMagicModifier As MagicModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMagicModifier = CType(Me.Table,MagicModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierType As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.ModifierTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.ModifierTypeColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.SourceColumn) = value
            End Set
        End Property
        
        Public Property Condition As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.ConditionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.ConditionColumn) = value
            End Set
        End Property
        
        Public Property Valid As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.ValidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.ValidColumn) = value
            End Set
        End Property
        
        Public Property Enabled As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.EnabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.EnabledColumn) = value
            End Set
        End Property
        
        Public Property SystemElement As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.SystemElementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.SystemElementColumn) = value
            End Set
        End Property
        
        Public Property FocusName As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.FocusNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.FocusNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierValue As String
            Get
                Try 
                    Return CType(Me(Me.tableMagicModifier.ModifierValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMagicModifier.ModifierValueColumn) = value
            End Set
        End Property
        
        Public Property MagicModifiersRow As MagicModifiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MagicModifiers_MagicModifier")),MagicModifiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MagicModifiers_MagicModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tableMagicModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierTypeNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.ModifierTypeColumn)
        End Function
        
        Public Sub SetModifierTypeNull()
            Me(Me.tableMagicModifier.ModifierTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableMagicModifier.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConditionNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.ConditionColumn)
        End Function
        
        Public Sub SetConditionNull()
            Me(Me.tableMagicModifier.ConditionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.ValidColumn)
        End Function
        
        Public Sub SetValidNull()
            Me(Me.tableMagicModifier.ValidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnabledNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.EnabledColumn)
        End Function
        
        Public Sub SetEnabledNull()
            Me(Me.tableMagicModifier.EnabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSystemElementNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.SystemElementColumn)
        End Function
        
        Public Sub SetSystemElementNull()
            Me(Me.tableMagicModifier.SystemElementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFocusNameNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.FocusNameColumn)
        End Function
        
        Public Sub SetFocusNameNull()
            Me(Me.tableMagicModifier.FocusNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierValueNull() As Boolean
            Return Me.IsNull(Me.tableMagicModifier.ModifierValueColumn)
        End Function
        
        Public Sub SetModifierValueNull()
            Me(Me.tableMagicModifier.ModifierValueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MagicModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MagicModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MagicModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MagicModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFeats_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Feats")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Feats_IdColumn As DataColumn
            Get
                Return Me.columnFeats_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FeatsRow
            Get
                Return CType(Me.Rows(index),FeatsRow)
            End Get
        End Property
        
        Public Event FeatsRowChanged As FeatsRowChangeEventHandler
        
        Public Event FeatsRowChanging As FeatsRowChangeEventHandler
        
        Public Event FeatsRowDeleted As FeatsRowChangeEventHandler
        
        Public Event FeatsRowDeleting As FeatsRowChangeEventHandler
        
        Public Overloads Sub AddFeatsRow(ByVal row As FeatsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFeatsRow(ByVal parentCharacterRowByCharacter_Feats As CharacterRow) As FeatsRow
            Dim rowFeatsRow As FeatsRow = CType(Me.NewRow,FeatsRow)
            rowFeatsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Feats(86)}
            Me.Rows.Add(rowFeatsRow)
            Return rowFeatsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FeatsDataTable = CType(MyBase.Clone,FeatsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FeatsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnFeats_Id = Me.Columns("Feats_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnFeats_Id = New DataColumn("Feats_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnFeats_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnFeats_Id}, true))
            Me.columnFeats_Id.AutoIncrement = true
            Me.columnFeats_Id.AllowDBNull = false
            Me.columnFeats_Id.Unique = true
        End Sub
        
        Public Function NewFeatsRow() As FeatsRow
            Return CType(Me.NewRow,FeatsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FeatsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FeatsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FeatsRowChangedEvent) Is Nothing) Then
                RaiseEvent FeatsRowChanged(Me, New FeatsRowChangeEvent(CType(e.Row,FeatsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FeatsRowChangingEvent) Is Nothing) Then
                RaiseEvent FeatsRowChanging(Me, New FeatsRowChangeEvent(CType(e.Row,FeatsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FeatsRowDeletedEvent) Is Nothing) Then
                RaiseEvent FeatsRowDeleted(Me, New FeatsRowChangeEvent(CType(e.Row,FeatsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FeatsRowDeletingEvent) Is Nothing) Then
                RaiseEvent FeatsRowDeleting(Me, New FeatsRowChangeEvent(CType(e.Row,FeatsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFeatsRow(ByVal row As FeatsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatsRow
        Inherits DataRow
        
        Private tableFeats As FeatsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFeats = CType(Me.Table,FeatsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Feats")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Feats"))
            End Set
        End Property
        
        Public Function GetFeatRows() As FeatRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Feats_Feat")),FeatRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FeatsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FeatsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FeatsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFeatName As DataColumn
        
        Private columnFeatType As DataColumn
        
        Private columnFocusName As DataColumn
        
        Private columnDisabled As DataColumn
        
        Private columnValid As DataColumn
        
        Private columnIgnoringPrereq As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnFeats_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Feat")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property FeatNameColumn As DataColumn
            Get
                Return Me.columnFeatName
            End Get
        End Property
        
        Public ReadOnly Property FeatTypeColumn As DataColumn
            Get
                Return Me.columnFeatType
            End Get
        End Property
        
        Public ReadOnly Property FocusNameColumn As DataColumn
            Get
                Return Me.columnFocusName
            End Get
        End Property
        
        Public ReadOnly Property DisabledColumn As DataColumn
            Get
                Return Me.columnDisabled
            End Get
        End Property
        
        Public ReadOnly Property ValidColumn As DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        Public ReadOnly Property IgnoringPrereqColumn As DataColumn
            Get
                Return Me.columnIgnoringPrereq
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property Feats_IdColumn As DataColumn
            Get
                Return Me.columnFeats_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FeatRow
            Get
                Return CType(Me.Rows(index),FeatRow)
            End Get
        End Property
        
        Public Event FeatRowChanged As FeatRowChangeEventHandler
        
        Public Event FeatRowChanging As FeatRowChangeEventHandler
        
        Public Event FeatRowDeleted As FeatRowChangeEventHandler
        
        Public Event FeatRowDeleting As FeatRowChangeEventHandler
        
        Public Overloads Sub AddFeatRow(ByVal row As FeatRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFeatRow(ByVal FeatName As String, ByVal FeatType As String, ByVal FocusName As String, ByVal Disabled As String, ByVal Valid As String, ByVal IgnoringPrereq As String, ByVal Description As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentFeatsRowByFeats_Feat As FeatsRow) As FeatRow
            Dim rowFeatRow As FeatRow = CType(Me.NewRow,FeatRow)
            rowFeatRow.ItemArray = New Object() {FeatName, FeatType, FocusName, Disabled, Valid, IgnoringPrereq, Description, License, Sourcebook, Tags, PageNo, HelpPage, parentFeatsRowByFeats_Feat(0)}
            Me.Rows.Add(rowFeatRow)
            Return rowFeatRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FeatDataTable = CType(MyBase.Clone,FeatDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FeatDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnFeatName = Me.Columns("FeatName")
            Me.columnFeatType = Me.Columns("FeatType")
            Me.columnFocusName = Me.Columns("FocusName")
            Me.columnDisabled = Me.Columns("Disabled")
            Me.columnValid = Me.Columns("Valid")
            Me.columnIgnoringPrereq = Me.Columns("IgnoringPrereq")
            Me.columnDescription = Me.Columns("Description")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnFeats_Id = Me.Columns("Feats_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnFeatName = New DataColumn("FeatName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeatName)
            Me.columnFeatType = New DataColumn("FeatType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeatType)
            Me.columnFocusName = New DataColumn("FocusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFocusName)
            Me.columnDisabled = New DataColumn("Disabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisabled)
            Me.columnValid = New DataColumn("Valid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValid)
            Me.columnIgnoringPrereq = New DataColumn("IgnoringPrereq", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIgnoringPrereq)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnFeats_Id = New DataColumn("Feats_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnFeats_Id)
            Me.columnValid.AllowDBNull = false
        End Sub
        
        Public Function NewFeatRow() As FeatRow
            Return CType(Me.NewRow,FeatRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FeatRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FeatRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FeatRowChangedEvent) Is Nothing) Then
                RaiseEvent FeatRowChanged(Me, New FeatRowChangeEvent(CType(e.Row,FeatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FeatRowChangingEvent) Is Nothing) Then
                RaiseEvent FeatRowChanging(Me, New FeatRowChangeEvent(CType(e.Row,FeatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FeatRowDeletedEvent) Is Nothing) Then
                RaiseEvent FeatRowDeleted(Me, New FeatRowChangeEvent(CType(e.Row,FeatRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FeatRowDeletingEvent) Is Nothing) Then
                RaiseEvent FeatRowDeleting(Me, New FeatRowChangeEvent(CType(e.Row,FeatRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFeatRow(ByVal row As FeatRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatRow
        Inherits DataRow
        
        Private tableFeat As FeatDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFeat = CType(Me.Table,FeatDataTable)
        End Sub
        
        Public Property FeatName As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.FeatNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.FeatNameColumn) = value
            End Set
        End Property
        
        Public Property FeatType As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.FeatTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.FeatTypeColumn) = value
            End Set
        End Property
        
        Public Property FocusName As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.FocusNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.FocusNameColumn) = value
            End Set
        End Property
        
        Public Property Disabled As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.DisabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.DisabledColumn) = value
            End Set
        End Property
        
        Public Property Valid As String
            Get
                Return CType(Me(Me.tableFeat.ValidColumn),String)
            End Get
            Set
                Me(Me.tableFeat.ValidColumn) = value
            End Set
        End Property
        
        Public Property IgnoringPrereq As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.IgnoringPrereqColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.IgnoringPrereqColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableFeat.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeat.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property FeatsRow As FeatsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Feats_Feat")),FeatsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Feats_Feat"))
            End Set
        End Property
        
        Public Function IsFeatNameNull() As Boolean
            Return Me.IsNull(Me.tableFeat.FeatNameColumn)
        End Function
        
        Public Sub SetFeatNameNull()
            Me(Me.tableFeat.FeatNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFeatTypeNull() As Boolean
            Return Me.IsNull(Me.tableFeat.FeatTypeColumn)
        End Function
        
        Public Sub SetFeatTypeNull()
            Me(Me.tableFeat.FeatTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFocusNameNull() As Boolean
            Return Me.IsNull(Me.tableFeat.FocusNameColumn)
        End Function
        
        Public Sub SetFocusNameNull()
            Me(Me.tableFeat.FocusNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisabledNull() As Boolean
            Return Me.IsNull(Me.tableFeat.DisabledColumn)
        End Function
        
        Public Sub SetDisabledNull()
            Me(Me.tableFeat.DisabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIgnoringPrereqNull() As Boolean
            Return Me.IsNull(Me.tableFeat.IgnoringPrereqColumn)
        End Function
        
        Public Sub SetIgnoringPrereqNull()
            Me(Me.tableFeat.IgnoringPrereqColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableFeat.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableFeat.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableFeat.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableFeat.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableFeat.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableFeat.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableFeat.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableFeat.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableFeat.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableFeat.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableFeat.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableFeat.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FeatRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FeatRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FeatRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeaturesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFeatures_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Features")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Features_IdColumn As DataColumn
            Get
                Return Me.columnFeatures_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FeaturesRow
            Get
                Return CType(Me.Rows(index),FeaturesRow)
            End Get
        End Property
        
        Public Event FeaturesRowChanged As FeaturesRowChangeEventHandler
        
        Public Event FeaturesRowChanging As FeaturesRowChangeEventHandler
        
        Public Event FeaturesRowDeleted As FeaturesRowChangeEventHandler
        
        Public Event FeaturesRowDeleting As FeaturesRowChangeEventHandler
        
        Public Overloads Sub AddFeaturesRow(ByVal row As FeaturesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFeaturesRow(ByVal parentCharacterRowByCharacter_Features As CharacterRow) As FeaturesRow
            Dim rowFeaturesRow As FeaturesRow = CType(Me.NewRow,FeaturesRow)
            rowFeaturesRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Features(86)}
            Me.Rows.Add(rowFeaturesRow)
            Return rowFeaturesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FeaturesDataTable = CType(MyBase.Clone,FeaturesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FeaturesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnFeatures_Id = Me.Columns("Features_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnFeatures_Id = New DataColumn("Features_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnFeatures_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnFeatures_Id}, true))
            Me.columnFeatures_Id.AutoIncrement = true
            Me.columnFeatures_Id.AllowDBNull = false
            Me.columnFeatures_Id.Unique = true
        End Sub
        
        Public Function NewFeaturesRow() As FeaturesRow
            Return CType(Me.NewRow,FeaturesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FeaturesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FeaturesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FeaturesRowChangedEvent) Is Nothing) Then
                RaiseEvent FeaturesRowChanged(Me, New FeaturesRowChangeEvent(CType(e.Row,FeaturesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FeaturesRowChangingEvent) Is Nothing) Then
                RaiseEvent FeaturesRowChanging(Me, New FeaturesRowChangeEvent(CType(e.Row,FeaturesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FeaturesRowDeletedEvent) Is Nothing) Then
                RaiseEvent FeaturesRowDeleted(Me, New FeaturesRowChangeEvent(CType(e.Row,FeaturesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FeaturesRowDeletingEvent) Is Nothing) Then
                RaiseEvent FeaturesRowDeleting(Me, New FeaturesRowChangeEvent(CType(e.Row,FeaturesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFeaturesRow(ByVal row As FeaturesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeaturesRow
        Inherits DataRow
        
        Private tableFeatures As FeaturesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFeatures = CType(Me.Table,FeaturesDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Features")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Features"))
            End Set
        End Property
        
        Public Function GetFeatureRows() As FeatureRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Features_Feature")),FeatureRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeaturesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FeaturesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FeaturesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FeaturesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatureDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFeatureName As DataColumn
        
        Private columnFeatureType As DataColumn
        
        Private columnDisabled As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnSourceFlag As DataColumn
        
        Private columnSourceName As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnFeatures_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Feature")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property FeatureNameColumn As DataColumn
            Get
                Return Me.columnFeatureName
            End Get
        End Property
        
        Public ReadOnly Property FeatureTypeColumn As DataColumn
            Get
                Return Me.columnFeatureType
            End Get
        End Property
        
        Public ReadOnly Property DisabledColumn As DataColumn
            Get
                Return Me.columnDisabled
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property SourceFlagColumn As DataColumn
            Get
                Return Me.columnSourceFlag
            End Get
        End Property
        
        Public ReadOnly Property SourceNameColumn As DataColumn
            Get
                Return Me.columnSourceName
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property Features_IdColumn As DataColumn
            Get
                Return Me.columnFeatures_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FeatureRow
            Get
                Return CType(Me.Rows(index),FeatureRow)
            End Get
        End Property
        
        Public Event FeatureRowChanged As FeatureRowChangeEventHandler
        
        Public Event FeatureRowChanging As FeatureRowChangeEventHandler
        
        Public Event FeatureRowDeleted As FeatureRowChangeEventHandler
        
        Public Event FeatureRowDeleting As FeatureRowChangeEventHandler
        
        Public Overloads Sub AddFeatureRow(ByVal row As FeatureRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFeatureRow(ByVal FeatureName As String, ByVal FeatureType As String, ByVal Disabled As String, ByVal Description As String, ByVal SourceFlag As String, ByVal SourceName As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentFeaturesRowByFeatures_Feature As FeaturesRow) As FeatureRow
            Dim rowFeatureRow As FeatureRow = CType(Me.NewRow,FeatureRow)
            rowFeatureRow.ItemArray = New Object() {FeatureName, FeatureType, Disabled, Description, SourceFlag, SourceName, License, Sourcebook, Tags, PageNo, HelpPage, parentFeaturesRowByFeatures_Feature(0)}
            Me.Rows.Add(rowFeatureRow)
            Return rowFeatureRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FeatureDataTable = CType(MyBase.Clone,FeatureDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FeatureDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnFeatureName = Me.Columns("FeatureName")
            Me.columnFeatureType = Me.Columns("FeatureType")
            Me.columnDisabled = Me.Columns("Disabled")
            Me.columnDescription = Me.Columns("Description")
            Me.columnSourceFlag = Me.Columns("SourceFlag")
            Me.columnSourceName = Me.Columns("SourceName")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnFeatures_Id = Me.Columns("Features_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnFeatureName = New DataColumn("FeatureName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeatureName)
            Me.columnFeatureType = New DataColumn("FeatureType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeatureType)
            Me.columnDisabled = New DataColumn("Disabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisabled)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnSourceFlag = New DataColumn("SourceFlag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourceFlag)
            Me.columnSourceName = New DataColumn("SourceName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourceName)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnFeatures_Id = New DataColumn("Features_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnFeatures_Id)
        End Sub
        
        Public Function NewFeatureRow() As FeatureRow
            Return CType(Me.NewRow,FeatureRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FeatureRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FeatureRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FeatureRowChangedEvent) Is Nothing) Then
                RaiseEvent FeatureRowChanged(Me, New FeatureRowChangeEvent(CType(e.Row,FeatureRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FeatureRowChangingEvent) Is Nothing) Then
                RaiseEvent FeatureRowChanging(Me, New FeatureRowChangeEvent(CType(e.Row,FeatureRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FeatureRowDeletedEvent) Is Nothing) Then
                RaiseEvent FeatureRowDeleted(Me, New FeatureRowChangeEvent(CType(e.Row,FeatureRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FeatureRowDeletingEvent) Is Nothing) Then
                RaiseEvent FeatureRowDeleting(Me, New FeatureRowChangeEvent(CType(e.Row,FeatureRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFeatureRow(ByVal row As FeatureRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatureRow
        Inherits DataRow
        
        Private tableFeature As FeatureDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFeature = CType(Me.Table,FeatureDataTable)
        End Sub
        
        Public Property FeatureName As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.FeatureNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.FeatureNameColumn) = value
            End Set
        End Property
        
        Public Property FeatureType As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.FeatureTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.FeatureTypeColumn) = value
            End Set
        End Property
        
        Public Property Disabled As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.DisabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.DisabledColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property SourceFlag As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.SourceFlagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.SourceFlagColumn) = value
            End Set
        End Property
        
        Public Property SourceName As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.SourceNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.SourceNameColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableFeature.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFeature.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property FeaturesRow As FeaturesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Features_Feature")),FeaturesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Features_Feature"))
            End Set
        End Property
        
        Public Function IsFeatureNameNull() As Boolean
            Return Me.IsNull(Me.tableFeature.FeatureNameColumn)
        End Function
        
        Public Sub SetFeatureNameNull()
            Me(Me.tableFeature.FeatureNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFeatureTypeNull() As Boolean
            Return Me.IsNull(Me.tableFeature.FeatureTypeColumn)
        End Function
        
        Public Sub SetFeatureTypeNull()
            Me(Me.tableFeature.FeatureTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisabledNull() As Boolean
            Return Me.IsNull(Me.tableFeature.DisabledColumn)
        End Function
        
        Public Sub SetDisabledNull()
            Me(Me.tableFeature.DisabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableFeature.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableFeature.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceFlagNull() As Boolean
            Return Me.IsNull(Me.tableFeature.SourceFlagColumn)
        End Function
        
        Public Sub SetSourceFlagNull()
            Me(Me.tableFeature.SourceFlagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNameNull() As Boolean
            Return Me.IsNull(Me.tableFeature.SourceNameColumn)
        End Function
        
        Public Sub SetSourceNameNull()
            Me(Me.tableFeature.SourceNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableFeature.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableFeature.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableFeature.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableFeature.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableFeature.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableFeature.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableFeature.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableFeature.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableFeature.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableFeature.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FeatureRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FeatureRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FeatureRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FeatureRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInventory_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Inventory")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Inventory_IdColumn As DataColumn
            Get
                Return Me.columnInventory_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InventoryRow
            Get
                Return CType(Me.Rows(index),InventoryRow)
            End Get
        End Property
        
        Public Event InventoryRowChanged As InventoryRowChangeEventHandler
        
        Public Event InventoryRowChanging As InventoryRowChangeEventHandler
        
        Public Event InventoryRowDeleted As InventoryRowChangeEventHandler
        
        Public Event InventoryRowDeleting As InventoryRowChangeEventHandler
        
        Public Overloads Sub AddInventoryRow(ByVal row As InventoryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInventoryRow(ByVal parentCharacterRowByCharacter_Inventory As CharacterRow) As InventoryRow
            Dim rowInventoryRow As InventoryRow = CType(Me.NewRow,InventoryRow)
            rowInventoryRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Inventory(86)}
            Me.Rows.Add(rowInventoryRow)
            Return rowInventoryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As InventoryDataTable = CType(MyBase.Clone,InventoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New InventoryDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnInventory_Id = Me.Columns("Inventory_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnInventory_Id = New DataColumn("Inventory_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnInventory_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnInventory_Id}, true))
            Me.columnInventory_Id.AutoIncrement = true
            Me.columnInventory_Id.AllowDBNull = false
            Me.columnInventory_Id.Unique = true
        End Sub
        
        Public Function NewInventoryRow() As InventoryRow
            Return CType(Me.NewRow,InventoryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InventoryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InventoryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InventoryRowChangedEvent) Is Nothing) Then
                RaiseEvent InventoryRowChanged(Me, New InventoryRowChangeEvent(CType(e.Row,InventoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InventoryRowChangingEvent) Is Nothing) Then
                RaiseEvent InventoryRowChanging(Me, New InventoryRowChangeEvent(CType(e.Row,InventoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InventoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent InventoryRowDeleted(Me, New InventoryRowChangeEvent(CType(e.Row,InventoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InventoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent InventoryRowDeleting(Me, New InventoryRowChangeEvent(CType(e.Row,InventoryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInventoryRow(ByVal row As InventoryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryRow
        Inherits DataRow
        
        Private tableInventory As InventoryDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInventory = CType(Me.Table,InventoryDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Inventory")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Inventory"))
            End Set
        End Property
        
        Public Function GetInventoryItemRows() As InventoryItemRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Inventory_InventoryItem")),InventoryItemRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As InventoryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As InventoryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As InventoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryItemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemName As DataColumn
        
        Private columnItemKey As DataColumn
        
        Private columnBaseType As DataColumn
        
        Private columnItemWeight As DataColumn
        
        Private columnContentsWeight As DataColumn
        
        Private columnItemCost As DataColumn
        
        Private columnItemCategory As DataColumn
        
        Private columnQuantity As DataColumn
        
        Private columnCharges As DataColumn
        
        Private columnActive As DataColumn
        
        Private columnNotes As DataColumn
        
        Private columnContainerName As DataColumn
        
        Private columnContainerKey As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnInventory_Id As DataColumn
        
        Public Sub New()
            MyBase.New("InventoryItem")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ItemNameColumn As DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        Public ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Public ReadOnly Property BaseTypeColumn As DataColumn
            Get
                Return Me.columnBaseType
            End Get
        End Property
        
        Public ReadOnly Property ItemWeightColumn As DataColumn
            Get
                Return Me.columnItemWeight
            End Get
        End Property
        
        Public ReadOnly Property ContentsWeightColumn As DataColumn
            Get
                Return Me.columnContentsWeight
            End Get
        End Property
        
        Public ReadOnly Property ItemCostColumn As DataColumn
            Get
                Return Me.columnItemCost
            End Get
        End Property
        
        Public ReadOnly Property ItemCategoryColumn As DataColumn
            Get
                Return Me.columnItemCategory
            End Get
        End Property
        
        Public ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Public ReadOnly Property ChargesColumn As DataColumn
            Get
                Return Me.columnCharges
            End Get
        End Property
        
        Public ReadOnly Property ActiveColumn As DataColumn
            Get
                Return Me.columnActive
            End Get
        End Property
        
        Public ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Public ReadOnly Property ContainerNameColumn As DataColumn
            Get
                Return Me.columnContainerName
            End Get
        End Property
        
        Public ReadOnly Property ContainerKeyColumn As DataColumn
            Get
                Return Me.columnContainerKey
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property Inventory_IdColumn As DataColumn
            Get
                Return Me.columnInventory_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As InventoryItemRow
            Get
                Return CType(Me.Rows(index),InventoryItemRow)
            End Get
        End Property
        
        Public Event InventoryItemRowChanged As InventoryItemRowChangeEventHandler
        
        Public Event InventoryItemRowChanging As InventoryItemRowChangeEventHandler
        
        Public Event InventoryItemRowDeleted As InventoryItemRowChangeEventHandler
        
        Public Event InventoryItemRowDeleting As InventoryItemRowChangeEventHandler
        
        Public Overloads Sub AddInventoryItemRow(ByVal row As InventoryItemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInventoryItemRow( _
                    ByVal ItemName As String,  _
                    ByVal ItemKey As String,  _
                    ByVal BaseType As String,  _
                    ByVal ItemWeight As String,  _
                    ByVal ContentsWeight As String,  _
                    ByVal ItemCost As String,  _
                    ByVal ItemCategory As String,  _
                    ByVal Quantity As String,  _
                    ByVal Charges As String,  _
                    ByVal Active As String,  _
                    ByVal Notes As String,  _
                    ByVal ContainerName As String,  _
                    ByVal ContainerKey As String,  _
                    ByVal License As String,  _
                    ByVal Sourcebook As String,  _
                    ByVal Tags As String,  _
                    ByVal PageNo As String,  _
                    ByVal HelpPage As String,  _
                    ByVal parentInventoryRowByInventory_InventoryItem As InventoryRow) As InventoryItemRow
            Dim rowInventoryItemRow As InventoryItemRow = CType(Me.NewRow,InventoryItemRow)
            rowInventoryItemRow.ItemArray = New Object() {ItemName, ItemKey, BaseType, ItemWeight, ContentsWeight, ItemCost, ItemCategory, Quantity, Charges, Active, Notes, ContainerName, ContainerKey, License, Sourcebook, Tags, PageNo, HelpPage, parentInventoryRowByInventory_InventoryItem(0)}
            Me.Rows.Add(rowInventoryItemRow)
            Return rowInventoryItemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As InventoryItemDataTable = CType(MyBase.Clone,InventoryItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New InventoryItemDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnItemName = Me.Columns("ItemName")
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnBaseType = Me.Columns("BaseType")
            Me.columnItemWeight = Me.Columns("ItemWeight")
            Me.columnContentsWeight = Me.Columns("ContentsWeight")
            Me.columnItemCost = Me.Columns("ItemCost")
            Me.columnItemCategory = Me.Columns("ItemCategory")
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnCharges = Me.Columns("Charges")
            Me.columnActive = Me.Columns("Active")
            Me.columnNotes = Me.Columns("Notes")
            Me.columnContainerName = Me.Columns("ContainerName")
            Me.columnContainerKey = Me.Columns("ContainerKey")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnInventory_Id = Me.Columns("Inventory_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemName = New DataColumn("ItemName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemName)
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnBaseType = New DataColumn("BaseType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseType)
            Me.columnItemWeight = New DataColumn("ItemWeight", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemWeight)
            Me.columnContentsWeight = New DataColumn("ContentsWeight", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContentsWeight)
            Me.columnItemCost = New DataColumn("ItemCost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCost)
            Me.columnItemCategory = New DataColumn("ItemCategory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCategory)
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnCharges = New DataColumn("Charges", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharges)
            Me.columnActive = New DataColumn("Active", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActive)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnContainerName = New DataColumn("ContainerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContainerName)
            Me.columnContainerKey = New DataColumn("ContainerKey", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContainerKey)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnInventory_Id = New DataColumn("Inventory_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnInventory_Id)
        End Sub
        
        Public Function NewInventoryItemRow() As InventoryItemRow
            Return CType(Me.NewRow,InventoryItemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New InventoryItemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(InventoryItemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.InventoryItemRowChangedEvent) Is Nothing) Then
                RaiseEvent InventoryItemRowChanged(Me, New InventoryItemRowChangeEvent(CType(e.Row,InventoryItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.InventoryItemRowChangingEvent) Is Nothing) Then
                RaiseEvent InventoryItemRowChanging(Me, New InventoryItemRowChangeEvent(CType(e.Row,InventoryItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.InventoryItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent InventoryItemRowDeleted(Me, New InventoryItemRowChangeEvent(CType(e.Row,InventoryItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.InventoryItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent InventoryItemRowDeleting(Me, New InventoryItemRowChangeEvent(CType(e.Row,InventoryItemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInventoryItemRow(ByVal row As InventoryItemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryItemRow
        Inherits DataRow
        
        Private tableInventoryItem As InventoryItemDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInventoryItem = CType(Me.Table,InventoryItemDataTable)
        End Sub
        
        Public Property ItemName As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ItemNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ItemNameColumn) = value
            End Set
        End Property
        
        Public Property ItemKey As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ItemKeyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property BaseType As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.BaseTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.BaseTypeColumn) = value
            End Set
        End Property
        
        Public Property ItemWeight As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ItemWeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ItemWeightColumn) = value
            End Set
        End Property
        
        Public Property ContentsWeight As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ContentsWeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ContentsWeightColumn) = value
            End Set
        End Property
        
        Public Property ItemCost As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ItemCostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ItemCostColumn) = value
            End Set
        End Property
        
        Public Property ItemCategory As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ItemCategoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ItemCategoryColumn) = value
            End Set
        End Property
        
        Public Property Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.QuantityColumn) = value
            End Set
        End Property
        
        Public Property Charges As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ChargesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ChargesColumn) = value
            End Set
        End Property
        
        Public Property Active As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ActiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ActiveColumn) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.NotesColumn) = value
            End Set
        End Property
        
        Public Property ContainerName As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ContainerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ContainerNameColumn) = value
            End Set
        End Property
        
        Public Property ContainerKey As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.ContainerKeyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.ContainerKeyColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableInventoryItem.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInventoryItem.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property InventoryRow As InventoryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Inventory_InventoryItem")),InventoryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Inventory_InventoryItem"))
            End Set
        End Property
        
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ItemNameColumn)
        End Function
        
        Public Sub SetItemNameNull()
            Me(Me.tableInventoryItem.ItemNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemKeyNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ItemKeyColumn)
        End Function
        
        Public Sub SetItemKeyNull()
            Me(Me.tableInventoryItem.ItemKeyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseTypeNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.BaseTypeColumn)
        End Function
        
        Public Sub SetBaseTypeNull()
            Me(Me.tableInventoryItem.BaseTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemWeightNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ItemWeightColumn)
        End Function
        
        Public Sub SetItemWeightNull()
            Me(Me.tableInventoryItem.ItemWeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContentsWeightNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ContentsWeightColumn)
        End Function
        
        Public Sub SetContentsWeightNull()
            Me(Me.tableInventoryItem.ContentsWeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCostNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ItemCostColumn)
        End Function
        
        Public Sub SetItemCostNull()
            Me(Me.tableInventoryItem.ItemCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCategoryNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ItemCategoryColumn)
        End Function
        
        Public Sub SetItemCategoryNull()
            Me(Me.tableInventoryItem.ItemCategoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.QuantityColumn)
        End Function
        
        Public Sub SetQuantityNull()
            Me(Me.tableInventoryItem.QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChargesNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ChargesColumn)
        End Function
        
        Public Sub SetChargesNull()
            Me(Me.tableInventoryItem.ChargesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsActiveNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ActiveColumn)
        End Function
        
        Public Sub SetActiveNull()
            Me(Me.tableInventoryItem.ActiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableInventoryItem.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContainerNameNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ContainerNameColumn)
        End Function
        
        Public Sub SetContainerNameNull()
            Me(Me.tableInventoryItem.ContainerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContainerKeyNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.ContainerKeyColumn)
        End Function
        
        Public Sub SetContainerKeyNull()
            Me(Me.tableInventoryItem.ContainerKeyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableInventoryItem.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableInventoryItem.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableInventoryItem.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableInventoryItem.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableInventoryItem.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableInventoryItem.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class InventoryItemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As InventoryItemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As InventoryItemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As InventoryItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAssets_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Assets")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Assets_IdColumn As DataColumn
            Get
                Return Me.columnAssets_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetsRow
            Get
                Return CType(Me.Rows(index),AssetsRow)
            End Get
        End Property
        
        Public Event AssetsRowChanged As AssetsRowChangeEventHandler
        
        Public Event AssetsRowChanging As AssetsRowChangeEventHandler
        
        Public Event AssetsRowDeleted As AssetsRowChangeEventHandler
        
        Public Event AssetsRowDeleting As AssetsRowChangeEventHandler
        
        Public Overloads Sub AddAssetsRow(ByVal row As AssetsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAssetsRow(ByVal parentCharacterRowByCharacter_Assets As CharacterRow) As AssetsRow
            Dim rowAssetsRow As AssetsRow = CType(Me.NewRow,AssetsRow)
            rowAssetsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Assets(86)}
            Me.Rows.Add(rowAssetsRow)
            Return rowAssetsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AssetsDataTable = CType(MyBase.Clone,AssetsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AssetsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAssets_Id = Me.Columns("Assets_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAssets_Id = New DataColumn("Assets_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAssets_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAssets_Id}, true))
            Me.columnAssets_Id.AutoIncrement = true
            Me.columnAssets_Id.AllowDBNull = false
            Me.columnAssets_Id.Unique = true
        End Sub
        
        Public Function NewAssetsRow() As AssetsRow
            Return CType(Me.NewRow,AssetsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AssetsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssetsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetsRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetsRowChanged(Me, New AssetsRowChangeEvent(CType(e.Row,AssetsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetsRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetsRowChanging(Me, New AssetsRowChangeEvent(CType(e.Row,AssetsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetsRowDeleted(Me, New AssetsRowChangeEvent(CType(e.Row,AssetsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetsRowDeleting(Me, New AssetsRowChangeEvent(CType(e.Row,AssetsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAssetsRow(ByVal row As AssetsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetsRow
        Inherits DataRow
        
        Private tableAssets As AssetsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssets = CType(Me.Table,AssetsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Assets")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Assets"))
            End Set
        End Property
        
        Public Function GetAssetItemRows() As AssetItemRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Assets_AssetItem")),AssetItemRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AssetsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AssetsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AssetsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetItemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemName As DataColumn
        
        Private columnItemKey As DataColumn
        
        Private columnBaseType As DataColumn
        
        Private columnItemWeight As DataColumn
        
        Private columnContentsWeight As DataColumn
        
        Private columnItemCost As DataColumn
        
        Private columnItemCategory As DataColumn
        
        Private columnQuantity As DataColumn
        
        Private columnCharges As DataColumn
        
        Private columnActive As DataColumn
        
        Private columnNotes As DataColumn
        
        Private columnContainerName As DataColumn
        
        Private columnContainerKey As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnAssets_Id As DataColumn
        
        Public Sub New()
            MyBase.New("AssetItem")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ItemNameColumn As DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        Public ReadOnly Property ItemKeyColumn As DataColumn
            Get
                Return Me.columnItemKey
            End Get
        End Property
        
        Public ReadOnly Property BaseTypeColumn As DataColumn
            Get
                Return Me.columnBaseType
            End Get
        End Property
        
        Public ReadOnly Property ItemWeightColumn As DataColumn
            Get
                Return Me.columnItemWeight
            End Get
        End Property
        
        Public ReadOnly Property ContentsWeightColumn As DataColumn
            Get
                Return Me.columnContentsWeight
            End Get
        End Property
        
        Public ReadOnly Property ItemCostColumn As DataColumn
            Get
                Return Me.columnItemCost
            End Get
        End Property
        
        Public ReadOnly Property ItemCategoryColumn As DataColumn
            Get
                Return Me.columnItemCategory
            End Get
        End Property
        
        Public ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Public ReadOnly Property ChargesColumn As DataColumn
            Get
                Return Me.columnCharges
            End Get
        End Property
        
        Public ReadOnly Property ActiveColumn As DataColumn
            Get
                Return Me.columnActive
            End Get
        End Property
        
        Public ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Public ReadOnly Property ContainerNameColumn As DataColumn
            Get
                Return Me.columnContainerName
            End Get
        End Property
        
        Public ReadOnly Property ContainerKeyColumn As DataColumn
            Get
                Return Me.columnContainerKey
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property Assets_IdColumn As DataColumn
            Get
                Return Me.columnAssets_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetItemRow
            Get
                Return CType(Me.Rows(index),AssetItemRow)
            End Get
        End Property
        
        Public Event AssetItemRowChanged As AssetItemRowChangeEventHandler
        
        Public Event AssetItemRowChanging As AssetItemRowChangeEventHandler
        
        Public Event AssetItemRowDeleted As AssetItemRowChangeEventHandler
        
        Public Event AssetItemRowDeleting As AssetItemRowChangeEventHandler
        
        Public Overloads Sub AddAssetItemRow(ByVal row As AssetItemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAssetItemRow( _
                    ByVal ItemName As String,  _
                    ByVal ItemKey As String,  _
                    ByVal BaseType As String,  _
                    ByVal ItemWeight As String,  _
                    ByVal ContentsWeight As String,  _
                    ByVal ItemCost As String,  _
                    ByVal ItemCategory As String,  _
                    ByVal Quantity As String,  _
                    ByVal Charges As String,  _
                    ByVal Active As String,  _
                    ByVal Notes As String,  _
                    ByVal ContainerName As String,  _
                    ByVal ContainerKey As String,  _
                    ByVal License As String,  _
                    ByVal Sourcebook As String,  _
                    ByVal Tags As String,  _
                    ByVal PageNo As String,  _
                    ByVal HelpPage As String,  _
                    ByVal parentAssetsRowByAssets_AssetItem As AssetsRow) As AssetItemRow
            Dim rowAssetItemRow As AssetItemRow = CType(Me.NewRow,AssetItemRow)
            rowAssetItemRow.ItemArray = New Object() {ItemName, ItemKey, BaseType, ItemWeight, ContentsWeight, ItemCost, ItemCategory, Quantity, Charges, Active, Notes, ContainerName, ContainerKey, License, Sourcebook, Tags, PageNo, HelpPage, parentAssetsRowByAssets_AssetItem(0)}
            Me.Rows.Add(rowAssetItemRow)
            Return rowAssetItemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AssetItemDataTable = CType(MyBase.Clone,AssetItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AssetItemDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnItemName = Me.Columns("ItemName")
            Me.columnItemKey = Me.Columns("ItemKey")
            Me.columnBaseType = Me.Columns("BaseType")
            Me.columnItemWeight = Me.Columns("ItemWeight")
            Me.columnContentsWeight = Me.Columns("ContentsWeight")
            Me.columnItemCost = Me.Columns("ItemCost")
            Me.columnItemCategory = Me.Columns("ItemCategory")
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnCharges = Me.Columns("Charges")
            Me.columnActive = Me.Columns("Active")
            Me.columnNotes = Me.Columns("Notes")
            Me.columnContainerName = Me.Columns("ContainerName")
            Me.columnContainerKey = Me.Columns("ContainerKey")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnAssets_Id = Me.Columns("Assets_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemName = New DataColumn("ItemName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemName)
            Me.columnItemKey = New DataColumn("ItemKey", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemKey)
            Me.columnBaseType = New DataColumn("BaseType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseType)
            Me.columnItemWeight = New DataColumn("ItemWeight", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemWeight)
            Me.columnContentsWeight = New DataColumn("ContentsWeight", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContentsWeight)
            Me.columnItemCost = New DataColumn("ItemCost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCost)
            Me.columnItemCategory = New DataColumn("ItemCategory", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemCategory)
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnCharges = New DataColumn("Charges", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCharges)
            Me.columnActive = New DataColumn("Active", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActive)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnContainerName = New DataColumn("ContainerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContainerName)
            Me.columnContainerKey = New DataColumn("ContainerKey", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContainerKey)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnAssets_Id = New DataColumn("Assets_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAssets_Id)
        End Sub
        
        Public Function NewAssetItemRow() As AssetItemRow
            Return CType(Me.NewRow,AssetItemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AssetItemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssetItemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetItemRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetItemRowChanged(Me, New AssetItemRowChangeEvent(CType(e.Row,AssetItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetItemRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetItemRowChanging(Me, New AssetItemRowChangeEvent(CType(e.Row,AssetItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetItemRowDeleted(Me, New AssetItemRowChangeEvent(CType(e.Row,AssetItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetItemRowDeleting(Me, New AssetItemRowChangeEvent(CType(e.Row,AssetItemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAssetItemRow(ByVal row As AssetItemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetItemRow
        Inherits DataRow
        
        Private tableAssetItem As AssetItemDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetItem = CType(Me.Table,AssetItemDataTable)
        End Sub
        
        Public Property ItemName As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ItemNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ItemNameColumn) = value
            End Set
        End Property
        
        Public Property ItemKey As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ItemKeyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ItemKeyColumn) = value
            End Set
        End Property
        
        Public Property BaseType As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.BaseTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.BaseTypeColumn) = value
            End Set
        End Property
        
        Public Property ItemWeight As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ItemWeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ItemWeightColumn) = value
            End Set
        End Property
        
        Public Property ContentsWeight As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ContentsWeightColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ContentsWeightColumn) = value
            End Set
        End Property
        
        Public Property ItemCost As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ItemCostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ItemCostColumn) = value
            End Set
        End Property
        
        Public Property ItemCategory As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ItemCategoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ItemCategoryColumn) = value
            End Set
        End Property
        
        Public Property Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.QuantityColumn) = value
            End Set
        End Property
        
        Public Property Charges As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ChargesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ChargesColumn) = value
            End Set
        End Property
        
        Public Property Active As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ActiveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ActiveColumn) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.NotesColumn) = value
            End Set
        End Property
        
        Public Property ContainerName As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ContainerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ContainerNameColumn) = value
            End Set
        End Property
        
        Public Property ContainerKey As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.ContainerKeyColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.ContainerKeyColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableAssetItem.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssetItem.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property AssetsRow As AssetsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Assets_AssetItem")),AssetsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Assets_AssetItem"))
            End Set
        End Property
        
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ItemNameColumn)
        End Function
        
        Public Sub SetItemNameNull()
            Me(Me.tableAssetItem.ItemNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemKeyNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ItemKeyColumn)
        End Function
        
        Public Sub SetItemKeyNull()
            Me(Me.tableAssetItem.ItemKeyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseTypeNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.BaseTypeColumn)
        End Function
        
        Public Sub SetBaseTypeNull()
            Me(Me.tableAssetItem.BaseTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemWeightNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ItemWeightColumn)
        End Function
        
        Public Sub SetItemWeightNull()
            Me(Me.tableAssetItem.ItemWeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContentsWeightNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ContentsWeightColumn)
        End Function
        
        Public Sub SetContentsWeightNull()
            Me(Me.tableAssetItem.ContentsWeightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCostNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ItemCostColumn)
        End Function
        
        Public Sub SetItemCostNull()
            Me(Me.tableAssetItem.ItemCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemCategoryNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ItemCategoryColumn)
        End Function
        
        Public Sub SetItemCategoryNull()
            Me(Me.tableAssetItem.ItemCategoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.QuantityColumn)
        End Function
        
        Public Sub SetQuantityNull()
            Me(Me.tableAssetItem.QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsChargesNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ChargesColumn)
        End Function
        
        Public Sub SetChargesNull()
            Me(Me.tableAssetItem.ChargesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsActiveNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ActiveColumn)
        End Function
        
        Public Sub SetActiveNull()
            Me(Me.tableAssetItem.ActiveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableAssetItem.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContainerNameNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ContainerNameColumn)
        End Function
        
        Public Sub SetContainerNameNull()
            Me(Me.tableAssetItem.ContainerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContainerKeyNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.ContainerKeyColumn)
        End Function
        
        Public Sub SetContainerKeyNull()
            Me(Me.tableAssetItem.ContainerKeyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableAssetItem.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableAssetItem.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableAssetItem.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableAssetItem.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableAssetItem.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableAssetItem.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetItemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AssetItemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AssetItemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AssetItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellCasterInfoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpellCasterInfo_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpellCasterInfo")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SpellCasterInfo_IdColumn As DataColumn
            Get
                Return Me.columnSpellCasterInfo_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpellCasterInfoRow
            Get
                Return CType(Me.Rows(index),SpellCasterInfoRow)
            End Get
        End Property
        
        Public Event SpellCasterInfoRowChanged As SpellCasterInfoRowChangeEventHandler
        
        Public Event SpellCasterInfoRowChanging As SpellCasterInfoRowChangeEventHandler
        
        Public Event SpellCasterInfoRowDeleted As SpellCasterInfoRowChangeEventHandler
        
        Public Event SpellCasterInfoRowDeleting As SpellCasterInfoRowChangeEventHandler
        
        Public Overloads Sub AddSpellCasterInfoRow(ByVal row As SpellCasterInfoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpellCasterInfoRow(ByVal parentCharacterRowByCharacter_SpellCasterInfo As CharacterRow) As SpellCasterInfoRow
            Dim rowSpellCasterInfoRow As SpellCasterInfoRow = CType(Me.NewRow,SpellCasterInfoRow)
            rowSpellCasterInfoRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_SpellCasterInfo(86)}
            Me.Rows.Add(rowSpellCasterInfoRow)
            Return rowSpellCasterInfoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpellCasterInfoDataTable = CType(MyBase.Clone,SpellCasterInfoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpellCasterInfoDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpellCasterInfo_Id = Me.Columns("SpellCasterInfo_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpellCasterInfo_Id = New DataColumn("SpellCasterInfo_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellCasterInfo_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSpellCasterInfo_Id}, true))
            Me.columnSpellCasterInfo_Id.AutoIncrement = true
            Me.columnSpellCasterInfo_Id.AllowDBNull = false
            Me.columnSpellCasterInfo_Id.Unique = true
        End Sub
        
        Public Function NewSpellCasterInfoRow() As SpellCasterInfoRow
            Return CType(Me.NewRow,SpellCasterInfoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpellCasterInfoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellCasterInfoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellCasterInfoRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellCasterInfoRowChanged(Me, New SpellCasterInfoRowChangeEvent(CType(e.Row,SpellCasterInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellCasterInfoRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellCasterInfoRowChanging(Me, New SpellCasterInfoRowChangeEvent(CType(e.Row,SpellCasterInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellCasterInfoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellCasterInfoRowDeleted(Me, New SpellCasterInfoRowChangeEvent(CType(e.Row,SpellCasterInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellCasterInfoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellCasterInfoRowDeleting(Me, New SpellCasterInfoRowChangeEvent(CType(e.Row,SpellCasterInfoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpellCasterInfoRow(ByVal row As SpellCasterInfoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellCasterInfoRow
        Inherits DataRow
        
        Private tableSpellCasterInfo As SpellCasterInfoDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpellCasterInfo = CType(Me.Table,SpellCasterInfoDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_SpellCasterInfo")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_SpellCasterInfo"))
            End Set
        End Property
        
        Public Function GetCasterClassRows() As CasterClassRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SpellCasterInfo_CasterClass")),CasterClassRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellCasterInfoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpellCasterInfoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpellCasterInfoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpellCasterInfoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CasterClassDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnClassName As DataColumn
        
        Private columnCasterLevel As DataColumn
        
        Private columnSpellPoints As DataColumn
        
        Private columnSpellCasterNotes As DataColumn
        
        Private columnCasterType As DataColumn
        
        Private columnCasterClass_Id As DataColumn
        
        Private columnSpellCasterInfo_Id As DataColumn
        
        Public Sub New()
            MyBase.New("CasterClass")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property CasterLevelColumn As DataColumn
            Get
                Return Me.columnCasterLevel
            End Get
        End Property
        
        Public ReadOnly Property SpellPointsColumn As DataColumn
            Get
                Return Me.columnSpellPoints
            End Get
        End Property
        
        Public ReadOnly Property SpellCasterNotesColumn As DataColumn
            Get
                Return Me.columnSpellCasterNotes
            End Get
        End Property
        
        Public ReadOnly Property CasterTypeColumn As DataColumn
            Get
                Return Me.columnCasterType
            End Get
        End Property
        
        Public ReadOnly Property CasterClass_IdColumn As DataColumn
            Get
                Return Me.columnCasterClass_Id
            End Get
        End Property
        
        Public ReadOnly Property SpellCasterInfo_IdColumn As DataColumn
            Get
                Return Me.columnSpellCasterInfo_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CasterClassRow
            Get
                Return CType(Me.Rows(index),CasterClassRow)
            End Get
        End Property
        
        Public Event CasterClassRowChanged As CasterClassRowChangeEventHandler
        
        Public Event CasterClassRowChanging As CasterClassRowChangeEventHandler
        
        Public Event CasterClassRowDeleted As CasterClassRowChangeEventHandler
        
        Public Event CasterClassRowDeleting As CasterClassRowChangeEventHandler
        
        Public Overloads Sub AddCasterClassRow(ByVal row As CasterClassRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCasterClassRow(ByVal ClassName As String, ByVal CasterLevel As String, ByVal SpellPoints As String, ByVal SpellCasterNotes As String, ByVal CasterType As String, ByVal parentSpellCasterInfoRowBySpellCasterInfo_CasterClass As SpellCasterInfoRow) As CasterClassRow
            Dim rowCasterClassRow As CasterClassRow = CType(Me.NewRow,CasterClassRow)
            rowCasterClassRow.ItemArray = New Object() {ClassName, CasterLevel, SpellPoints, SpellCasterNotes, CasterType, Nothing, parentSpellCasterInfoRowBySpellCasterInfo_CasterClass(0)}
            Me.Rows.Add(rowCasterClassRow)
            Return rowCasterClassRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CasterClassDataTable = CType(MyBase.Clone,CasterClassDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CasterClassDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnCasterLevel = Me.Columns("CasterLevel")
            Me.columnSpellPoints = Me.Columns("SpellPoints")
            Me.columnSpellCasterNotes = Me.Columns("SpellCasterNotes")
            Me.columnCasterType = Me.Columns("CasterType")
            Me.columnCasterClass_Id = Me.Columns("CasterClass_Id")
            Me.columnSpellCasterInfo_Id = Me.Columns("SpellCasterInfo_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnCasterLevel = New DataColumn("CasterLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCasterLevel)
            Me.columnSpellPoints = New DataColumn("SpellPoints", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellPoints)
            Me.columnSpellCasterNotes = New DataColumn("SpellCasterNotes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellCasterNotes)
            Me.columnCasterType = New DataColumn("CasterType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCasterType)
            Me.columnCasterClass_Id = New DataColumn("CasterClass_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCasterClass_Id)
            Me.columnSpellCasterInfo_Id = New DataColumn("SpellCasterInfo_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellCasterInfo_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCasterClass_Id}, true))
            Me.columnCasterClass_Id.AutoIncrement = true
            Me.columnCasterClass_Id.AllowDBNull = false
            Me.columnCasterClass_Id.Unique = true
        End Sub
        
        Public Function NewCasterClassRow() As CasterClassRow
            Return CType(Me.NewRow,CasterClassRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CasterClassRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CasterClassRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CasterClassRowChangedEvent) Is Nothing) Then
                RaiseEvent CasterClassRowChanged(Me, New CasterClassRowChangeEvent(CType(e.Row,CasterClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CasterClassRowChangingEvent) Is Nothing) Then
                RaiseEvent CasterClassRowChanging(Me, New CasterClassRowChangeEvent(CType(e.Row,CasterClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CasterClassRowDeletedEvent) Is Nothing) Then
                RaiseEvent CasterClassRowDeleted(Me, New CasterClassRowChangeEvent(CType(e.Row,CasterClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CasterClassRowDeletingEvent) Is Nothing) Then
                RaiseEvent CasterClassRowDeleting(Me, New CasterClassRowChangeEvent(CType(e.Row,CasterClassRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCasterClassRow(ByVal row As CasterClassRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CasterClassRow
        Inherits DataRow
        
        Private tableCasterClass As CasterClassDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCasterClass = CType(Me.Table,CasterClassDataTable)
        End Sub
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tableCasterClass.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCasterClass.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property CasterLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableCasterClass.CasterLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCasterClass.CasterLevelColumn) = value
            End Set
        End Property
        
        Public Property SpellPoints As String
            Get
                Try 
                    Return CType(Me(Me.tableCasterClass.SpellPointsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCasterClass.SpellPointsColumn) = value
            End Set
        End Property
        
        Public Property SpellCasterNotes As String
            Get
                Try 
                    Return CType(Me(Me.tableCasterClass.SpellCasterNotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCasterClass.SpellCasterNotesColumn) = value
            End Set
        End Property
        
        Public Property CasterType As String
            Get
                Try 
                    Return CType(Me(Me.tableCasterClass.CasterTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCasterClass.CasterTypeColumn) = value
            End Set
        End Property
        
        Public Property SpellCasterInfoRow As SpellCasterInfoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SpellCasterInfo_CasterClass")),SpellCasterInfoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SpellCasterInfo_CasterClass"))
            End Set
        End Property
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableCasterClass.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableCasterClass.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCasterLevelNull() As Boolean
            Return Me.IsNull(Me.tableCasterClass.CasterLevelColumn)
        End Function
        
        Public Sub SetCasterLevelNull()
            Me(Me.tableCasterClass.CasterLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellPointsNull() As Boolean
            Return Me.IsNull(Me.tableCasterClass.SpellPointsColumn)
        End Function
        
        Public Sub SetSpellPointsNull()
            Me(Me.tableCasterClass.SpellPointsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellCasterNotesNull() As Boolean
            Return Me.IsNull(Me.tableCasterClass.SpellCasterNotesColumn)
        End Function
        
        Public Sub SetSpellCasterNotesNull()
            Me(Me.tableCasterClass.SpellCasterNotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCasterTypeNull() As Boolean
            Return Me.IsNull(Me.tableCasterClass.CasterTypeColumn)
        End Function
        
        Public Sub SetCasterTypeNull()
            Me(Me.tableCasterClass.CasterTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSpellsPerDayRows() As SpellsPerDayRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CasterClass_SpellsPerDay")),SpellsPerDayRow())
        End Function
        
        Public Function GetSpellSavesRows() As SpellSavesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CasterClass_SpellSaves")),SpellSavesRow())
        End Function
        
        Public Function GetSpellsKnownRows() As SpellsKnownRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CasterClass_SpellsKnown")),SpellsKnownRow())
        End Function
        
        Public Function GetMemorizedSpellsRows() As MemorizedSpellsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CasterClass_MemorizedSpells")),MemorizedSpellsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CasterClassRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CasterClassRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CasterClassRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CasterClassRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsPerDayDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpellsPerDay_Id As DataColumn
        
        Private columnCasterClass_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpellsPerDay")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SpellsPerDay_IdColumn As DataColumn
            Get
                Return Me.columnSpellsPerDay_Id
            End Get
        End Property
        
        Public ReadOnly Property CasterClass_IdColumn As DataColumn
            Get
                Return Me.columnCasterClass_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpellsPerDayRow
            Get
                Return CType(Me.Rows(index),SpellsPerDayRow)
            End Get
        End Property
        
        Public Event SpellsPerDayRowChanged As SpellsPerDayRowChangeEventHandler
        
        Public Event SpellsPerDayRowChanging As SpellsPerDayRowChangeEventHandler
        
        Public Event SpellsPerDayRowDeleted As SpellsPerDayRowChangeEventHandler
        
        Public Event SpellsPerDayRowDeleting As SpellsPerDayRowChangeEventHandler
        
        Public Overloads Sub AddSpellsPerDayRow(ByVal row As SpellsPerDayRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpellsPerDayRow(ByVal parentCasterClassRowByCasterClass_SpellsPerDay As CasterClassRow) As SpellsPerDayRow
            Dim rowSpellsPerDayRow As SpellsPerDayRow = CType(Me.NewRow,SpellsPerDayRow)
            rowSpellsPerDayRow.ItemArray = New Object() {Nothing, parentCasterClassRowByCasterClass_SpellsPerDay(5)}
            Me.Rows.Add(rowSpellsPerDayRow)
            Return rowSpellsPerDayRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpellsPerDayDataTable = CType(MyBase.Clone,SpellsPerDayDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpellsPerDayDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpellsPerDay_Id = Me.Columns("SpellsPerDay_Id")
            Me.columnCasterClass_Id = Me.Columns("CasterClass_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpellsPerDay_Id = New DataColumn("SpellsPerDay_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellsPerDay_Id)
            Me.columnCasterClass_Id = New DataColumn("CasterClass_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCasterClass_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSpellsPerDay_Id}, true))
            Me.columnSpellsPerDay_Id.AutoIncrement = true
            Me.columnSpellsPerDay_Id.AllowDBNull = false
            Me.columnSpellsPerDay_Id.Unique = true
        End Sub
        
        Public Function NewSpellsPerDayRow() As SpellsPerDayRow
            Return CType(Me.NewRow,SpellsPerDayRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpellsPerDayRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellsPerDayRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellsPerDayRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellsPerDayRowChanged(Me, New SpellsPerDayRowChangeEvent(CType(e.Row,SpellsPerDayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellsPerDayRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellsPerDayRowChanging(Me, New SpellsPerDayRowChangeEvent(CType(e.Row,SpellsPerDayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellsPerDayRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellsPerDayRowDeleted(Me, New SpellsPerDayRowChangeEvent(CType(e.Row,SpellsPerDayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellsPerDayRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellsPerDayRowDeleting(Me, New SpellsPerDayRowChangeEvent(CType(e.Row,SpellsPerDayRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpellsPerDayRow(ByVal row As SpellsPerDayRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsPerDayRow
        Inherits DataRow
        
        Private tableSpellsPerDay As SpellsPerDayDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpellsPerDay = CType(Me.Table,SpellsPerDayDataTable)
        End Sub
        
        Public Property CasterClassRow As CasterClassRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CasterClass_SpellsPerDay")),CasterClassRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CasterClass_SpellsPerDay"))
            End Set
        End Property
        
        Public Function GetClassSPDRows() As ClassSPDRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SpellsPerDay_ClassSPD")),ClassSPDRow())
        End Function
        
        Public Function GetSpecialistSPDRows() As SpecialistSPDRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SpellsPerDay_SpecialistSPD")),SpecialistSPDRow())
        End Function
        
        Public Function GetDomainSPDRows() As DomainSPDRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SpellsPerDay_DomainSPD")),DomainSPDRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsPerDayRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpellsPerDayRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpellsPerDayRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpellsPerDayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassSPDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPD0 As DataColumn
        
        Private columnSPD1 As DataColumn
        
        Private columnSPD2 As DataColumn
        
        Private columnSPD3 As DataColumn
        
        Private columnSPD4 As DataColumn
        
        Private columnSPD5 As DataColumn
        
        Private columnSPD6 As DataColumn
        
        Private columnSPD7 As DataColumn
        
        Private columnSPD8 As DataColumn
        
        Private columnSPD9 As DataColumn
        
        Private columnSpellsPerDay_Id As DataColumn
        
        Public Sub New()
            MyBase.New("ClassSPD")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SPD0Column As DataColumn
            Get
                Return Me.columnSPD0
            End Get
        End Property
        
        Public ReadOnly Property SPD1Column As DataColumn
            Get
                Return Me.columnSPD1
            End Get
        End Property
        
        Public ReadOnly Property SPD2Column As DataColumn
            Get
                Return Me.columnSPD2
            End Get
        End Property
        
        Public ReadOnly Property SPD3Column As DataColumn
            Get
                Return Me.columnSPD3
            End Get
        End Property
        
        Public ReadOnly Property SPD4Column As DataColumn
            Get
                Return Me.columnSPD4
            End Get
        End Property
        
        Public ReadOnly Property SPD5Column As DataColumn
            Get
                Return Me.columnSPD5
            End Get
        End Property
        
        Public ReadOnly Property SPD6Column As DataColumn
            Get
                Return Me.columnSPD6
            End Get
        End Property
        
        Public ReadOnly Property SPD7Column As DataColumn
            Get
                Return Me.columnSPD7
            End Get
        End Property
        
        Public ReadOnly Property SPD8Column As DataColumn
            Get
                Return Me.columnSPD8
            End Get
        End Property
        
        Public ReadOnly Property SPD9Column As DataColumn
            Get
                Return Me.columnSPD9
            End Get
        End Property
        
        Public ReadOnly Property SpellsPerDay_IdColumn As DataColumn
            Get
                Return Me.columnSpellsPerDay_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClassSPDRow
            Get
                Return CType(Me.Rows(index),ClassSPDRow)
            End Get
        End Property
        
        Public Event ClassSPDRowChanged As ClassSPDRowChangeEventHandler
        
        Public Event ClassSPDRowChanging As ClassSPDRowChangeEventHandler
        
        Public Event ClassSPDRowDeleted As ClassSPDRowChangeEventHandler
        
        Public Event ClassSPDRowDeleting As ClassSPDRowChangeEventHandler
        
        Public Overloads Sub AddClassSPDRow(ByVal row As ClassSPDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClassSPDRow(ByVal SPD0 As String, ByVal SPD1 As String, ByVal SPD2 As String, ByVal SPD3 As String, ByVal SPD4 As String, ByVal SPD5 As String, ByVal SPD6 As String, ByVal SPD7 As String, ByVal SPD8 As String, ByVal SPD9 As String, ByVal parentSpellsPerDayRowBySpellsPerDay_ClassSPD As SpellsPerDayRow) As ClassSPDRow
            Dim rowClassSPDRow As ClassSPDRow = CType(Me.NewRow,ClassSPDRow)
            rowClassSPDRow.ItemArray = New Object() {SPD0, SPD1, SPD2, SPD3, SPD4, SPD5, SPD6, SPD7, SPD8, SPD9, parentSpellsPerDayRowBySpellsPerDay_ClassSPD(0)}
            Me.Rows.Add(rowClassSPDRow)
            Return rowClassSPDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClassSPDDataTable = CType(MyBase.Clone,ClassSPDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClassSPDDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSPD0 = Me.Columns("SPD0")
            Me.columnSPD1 = Me.Columns("SPD1")
            Me.columnSPD2 = Me.Columns("SPD2")
            Me.columnSPD3 = Me.Columns("SPD3")
            Me.columnSPD4 = Me.Columns("SPD4")
            Me.columnSPD5 = Me.Columns("SPD5")
            Me.columnSPD6 = Me.Columns("SPD6")
            Me.columnSPD7 = Me.Columns("SPD7")
            Me.columnSPD8 = Me.Columns("SPD8")
            Me.columnSPD9 = Me.Columns("SPD9")
            Me.columnSpellsPerDay_Id = Me.Columns("SpellsPerDay_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSPD0 = New DataColumn("SPD0", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD0)
            Me.columnSPD1 = New DataColumn("SPD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD1)
            Me.columnSPD2 = New DataColumn("SPD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD2)
            Me.columnSPD3 = New DataColumn("SPD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD3)
            Me.columnSPD4 = New DataColumn("SPD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD4)
            Me.columnSPD5 = New DataColumn("SPD5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD5)
            Me.columnSPD6 = New DataColumn("SPD6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD6)
            Me.columnSPD7 = New DataColumn("SPD7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD7)
            Me.columnSPD8 = New DataColumn("SPD8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD8)
            Me.columnSPD9 = New DataColumn("SPD9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD9)
            Me.columnSpellsPerDay_Id = New DataColumn("SpellsPerDay_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellsPerDay_Id)
        End Sub
        
        Public Function NewClassSPDRow() As ClassSPDRow
            Return CType(Me.NewRow,ClassSPDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClassSPDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClassSPDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClassSPDRowChangedEvent) Is Nothing) Then
                RaiseEvent ClassSPDRowChanged(Me, New ClassSPDRowChangeEvent(CType(e.Row,ClassSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClassSPDRowChangingEvent) Is Nothing) Then
                RaiseEvent ClassSPDRowChanging(Me, New ClassSPDRowChangeEvent(CType(e.Row,ClassSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClassSPDRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClassSPDRowDeleted(Me, New ClassSPDRowChangeEvent(CType(e.Row,ClassSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClassSPDRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClassSPDRowDeleting(Me, New ClassSPDRowChangeEvent(CType(e.Row,ClassSPDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClassSPDRow(ByVal row As ClassSPDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassSPDRow
        Inherits DataRow
        
        Private tableClassSPD As ClassSPDDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClassSPD = CType(Me.Table,ClassSPDDataTable)
        End Sub
        
        Public Property SPD0 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD0Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD0Column) = value
            End Set
        End Property
        
        Public Property SPD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD1Column) = value
            End Set
        End Property
        
        Public Property SPD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD2Column) = value
            End Set
        End Property
        
        Public Property SPD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD3Column) = value
            End Set
        End Property
        
        Public Property SPD4 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD4Column) = value
            End Set
        End Property
        
        Public Property SPD5 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD5Column) = value
            End Set
        End Property
        
        Public Property SPD6 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD6Column) = value
            End Set
        End Property
        
        Public Property SPD7 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD7Column) = value
            End Set
        End Property
        
        Public Property SPD8 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD8Column) = value
            End Set
        End Property
        
        Public Property SPD9 As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSPD.SPD9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSPD.SPD9Column) = value
            End Set
        End Property
        
        Public Property SpellsPerDayRow As SpellsPerDayRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SpellsPerDay_ClassSPD")),SpellsPerDayRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SpellsPerDay_ClassSPD"))
            End Set
        End Property
        
        Public Function IsSPD0Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD0Column)
        End Function
        
        Public Sub SetSPD0Null()
            Me(Me.tableClassSPD.SPD0Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD1Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD1Column)
        End Function
        
        Public Sub SetSPD1Null()
            Me(Me.tableClassSPD.SPD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD2Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD2Column)
        End Function
        
        Public Sub SetSPD2Null()
            Me(Me.tableClassSPD.SPD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD3Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD3Column)
        End Function
        
        Public Sub SetSPD3Null()
            Me(Me.tableClassSPD.SPD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD4Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD4Column)
        End Function
        
        Public Sub SetSPD4Null()
            Me(Me.tableClassSPD.SPD4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD5Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD5Column)
        End Function
        
        Public Sub SetSPD5Null()
            Me(Me.tableClassSPD.SPD5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD6Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD6Column)
        End Function
        
        Public Sub SetSPD6Null()
            Me(Me.tableClassSPD.SPD6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD7Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD7Column)
        End Function
        
        Public Sub SetSPD7Null()
            Me(Me.tableClassSPD.SPD7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD8Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD8Column)
        End Function
        
        Public Sub SetSPD8Null()
            Me(Me.tableClassSPD.SPD8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD9Null() As Boolean
            Return Me.IsNull(Me.tableClassSPD.SPD9Column)
        End Function
        
        Public Sub SetSPD9Null()
            Me(Me.tableClassSPD.SPD9Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassSPDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClassSPDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClassSPDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClassSPDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSPDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPD0 As DataColumn
        
        Private columnSPD1 As DataColumn
        
        Private columnSPD2 As DataColumn
        
        Private columnSPD3 As DataColumn
        
        Private columnSPD4 As DataColumn
        
        Private columnSPD5 As DataColumn
        
        Private columnSPD6 As DataColumn
        
        Private columnSPD7 As DataColumn
        
        Private columnSPD8 As DataColumn
        
        Private columnSPD9 As DataColumn
        
        Private columnSpellsPerDay_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpecialistSPD")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SPD0Column As DataColumn
            Get
                Return Me.columnSPD0
            End Get
        End Property
        
        Public ReadOnly Property SPD1Column As DataColumn
            Get
                Return Me.columnSPD1
            End Get
        End Property
        
        Public ReadOnly Property SPD2Column As DataColumn
            Get
                Return Me.columnSPD2
            End Get
        End Property
        
        Public ReadOnly Property SPD3Column As DataColumn
            Get
                Return Me.columnSPD3
            End Get
        End Property
        
        Public ReadOnly Property SPD4Column As DataColumn
            Get
                Return Me.columnSPD4
            End Get
        End Property
        
        Public ReadOnly Property SPD5Column As DataColumn
            Get
                Return Me.columnSPD5
            End Get
        End Property
        
        Public ReadOnly Property SPD6Column As DataColumn
            Get
                Return Me.columnSPD6
            End Get
        End Property
        
        Public ReadOnly Property SPD7Column As DataColumn
            Get
                Return Me.columnSPD7
            End Get
        End Property
        
        Public ReadOnly Property SPD8Column As DataColumn
            Get
                Return Me.columnSPD8
            End Get
        End Property
        
        Public ReadOnly Property SPD9Column As DataColumn
            Get
                Return Me.columnSPD9
            End Get
        End Property
        
        Public ReadOnly Property SpellsPerDay_IdColumn As DataColumn
            Get
                Return Me.columnSpellsPerDay_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpecialistSPDRow
            Get
                Return CType(Me.Rows(index),SpecialistSPDRow)
            End Get
        End Property
        
        Public Event SpecialistSPDRowChanged As SpecialistSPDRowChangeEventHandler
        
        Public Event SpecialistSPDRowChanging As SpecialistSPDRowChangeEventHandler
        
        Public Event SpecialistSPDRowDeleted As SpecialistSPDRowChangeEventHandler
        
        Public Event SpecialistSPDRowDeleting As SpecialistSPDRowChangeEventHandler
        
        Public Overloads Sub AddSpecialistSPDRow(ByVal row As SpecialistSPDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpecialistSPDRow(ByVal SPD0 As String, ByVal SPD1 As String, ByVal SPD2 As String, ByVal SPD3 As String, ByVal SPD4 As String, ByVal SPD5 As String, ByVal SPD6 As String, ByVal SPD7 As String, ByVal SPD8 As String, ByVal SPD9 As String, ByVal parentSpellsPerDayRowBySpellsPerDay_SpecialistSPD As SpellsPerDayRow) As SpecialistSPDRow
            Dim rowSpecialistSPDRow As SpecialistSPDRow = CType(Me.NewRow,SpecialistSPDRow)
            rowSpecialistSPDRow.ItemArray = New Object() {SPD0, SPD1, SPD2, SPD3, SPD4, SPD5, SPD6, SPD7, SPD8, SPD9, parentSpellsPerDayRowBySpellsPerDay_SpecialistSPD(0)}
            Me.Rows.Add(rowSpecialistSPDRow)
            Return rowSpecialistSPDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpecialistSPDDataTable = CType(MyBase.Clone,SpecialistSPDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpecialistSPDDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSPD0 = Me.Columns("SPD0")
            Me.columnSPD1 = Me.Columns("SPD1")
            Me.columnSPD2 = Me.Columns("SPD2")
            Me.columnSPD3 = Me.Columns("SPD3")
            Me.columnSPD4 = Me.Columns("SPD4")
            Me.columnSPD5 = Me.Columns("SPD5")
            Me.columnSPD6 = Me.Columns("SPD6")
            Me.columnSPD7 = Me.Columns("SPD7")
            Me.columnSPD8 = Me.Columns("SPD8")
            Me.columnSPD9 = Me.Columns("SPD9")
            Me.columnSpellsPerDay_Id = Me.Columns("SpellsPerDay_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSPD0 = New DataColumn("SPD0", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD0)
            Me.columnSPD1 = New DataColumn("SPD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD1)
            Me.columnSPD2 = New DataColumn("SPD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD2)
            Me.columnSPD3 = New DataColumn("SPD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD3)
            Me.columnSPD4 = New DataColumn("SPD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD4)
            Me.columnSPD5 = New DataColumn("SPD5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD5)
            Me.columnSPD6 = New DataColumn("SPD6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD6)
            Me.columnSPD7 = New DataColumn("SPD7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD7)
            Me.columnSPD8 = New DataColumn("SPD8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD8)
            Me.columnSPD9 = New DataColumn("SPD9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD9)
            Me.columnSpellsPerDay_Id = New DataColumn("SpellsPerDay_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellsPerDay_Id)
        End Sub
        
        Public Function NewSpecialistSPDRow() As SpecialistSPDRow
            Return CType(Me.NewRow,SpecialistSPDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpecialistSPDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpecialistSPDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpecialistSPDRowChangedEvent) Is Nothing) Then
                RaiseEvent SpecialistSPDRowChanged(Me, New SpecialistSPDRowChangeEvent(CType(e.Row,SpecialistSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpecialistSPDRowChangingEvent) Is Nothing) Then
                RaiseEvent SpecialistSPDRowChanging(Me, New SpecialistSPDRowChangeEvent(CType(e.Row,SpecialistSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpecialistSPDRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpecialistSPDRowDeleted(Me, New SpecialistSPDRowChangeEvent(CType(e.Row,SpecialistSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpecialistSPDRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpecialistSPDRowDeleting(Me, New SpecialistSPDRowChangeEvent(CType(e.Row,SpecialistSPDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpecialistSPDRow(ByVal row As SpecialistSPDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSPDRow
        Inherits DataRow
        
        Private tableSpecialistSPD As SpecialistSPDDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpecialistSPD = CType(Me.Table,SpecialistSPDDataTable)
        End Sub
        
        Public Property SPD0 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD0Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD0Column) = value
            End Set
        End Property
        
        Public Property SPD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD1Column) = value
            End Set
        End Property
        
        Public Property SPD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD2Column) = value
            End Set
        End Property
        
        Public Property SPD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD3Column) = value
            End Set
        End Property
        
        Public Property SPD4 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD4Column) = value
            End Set
        End Property
        
        Public Property SPD5 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD5Column) = value
            End Set
        End Property
        
        Public Property SPD6 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD6Column) = value
            End Set
        End Property
        
        Public Property SPD7 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD7Column) = value
            End Set
        End Property
        
        Public Property SPD8 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD8Column) = value
            End Set
        End Property
        
        Public Property SPD9 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSPD.SPD9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSPD.SPD9Column) = value
            End Set
        End Property
        
        Public Property SpellsPerDayRow As SpellsPerDayRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SpellsPerDay_SpecialistSPD")),SpellsPerDayRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SpellsPerDay_SpecialistSPD"))
            End Set
        End Property
        
        Public Function IsSPD0Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD0Column)
        End Function
        
        Public Sub SetSPD0Null()
            Me(Me.tableSpecialistSPD.SPD0Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD1Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD1Column)
        End Function
        
        Public Sub SetSPD1Null()
            Me(Me.tableSpecialistSPD.SPD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD2Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD2Column)
        End Function
        
        Public Sub SetSPD2Null()
            Me(Me.tableSpecialistSPD.SPD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD3Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD3Column)
        End Function
        
        Public Sub SetSPD3Null()
            Me(Me.tableSpecialistSPD.SPD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD4Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD4Column)
        End Function
        
        Public Sub SetSPD4Null()
            Me(Me.tableSpecialistSPD.SPD4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD5Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD5Column)
        End Function
        
        Public Sub SetSPD5Null()
            Me(Me.tableSpecialistSPD.SPD5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD6Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD6Column)
        End Function
        
        Public Sub SetSPD6Null()
            Me(Me.tableSpecialistSPD.SPD6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD7Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD7Column)
        End Function
        
        Public Sub SetSPD7Null()
            Me(Me.tableSpecialistSPD.SPD7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD8Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD8Column)
        End Function
        
        Public Sub SetSPD8Null()
            Me(Me.tableSpecialistSPD.SPD8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD9Null() As Boolean
            Return Me.IsNull(Me.tableSpecialistSPD.SPD9Column)
        End Function
        
        Public Sub SetSPD9Null()
            Me(Me.tableSpecialistSPD.SPD9Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSPDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpecialistSPDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpecialistSPDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpecialistSPDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainSPDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPD0 As DataColumn
        
        Private columnSPD1 As DataColumn
        
        Private columnSPD2 As DataColumn
        
        Private columnSPD3 As DataColumn
        
        Private columnSPD4 As DataColumn
        
        Private columnSPD5 As DataColumn
        
        Private columnSPD6 As DataColumn
        
        Private columnSPD7 As DataColumn
        
        Private columnSPD8 As DataColumn
        
        Private columnSPD9 As DataColumn
        
        Private columnSpellsPerDay_Id As DataColumn
        
        Public Sub New()
            MyBase.New("DomainSPD")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SPD0Column As DataColumn
            Get
                Return Me.columnSPD0
            End Get
        End Property
        
        Public ReadOnly Property SPD1Column As DataColumn
            Get
                Return Me.columnSPD1
            End Get
        End Property
        
        Public ReadOnly Property SPD2Column As DataColumn
            Get
                Return Me.columnSPD2
            End Get
        End Property
        
        Public ReadOnly Property SPD3Column As DataColumn
            Get
                Return Me.columnSPD3
            End Get
        End Property
        
        Public ReadOnly Property SPD4Column As DataColumn
            Get
                Return Me.columnSPD4
            End Get
        End Property
        
        Public ReadOnly Property SPD5Column As DataColumn
            Get
                Return Me.columnSPD5
            End Get
        End Property
        
        Public ReadOnly Property SPD6Column As DataColumn
            Get
                Return Me.columnSPD6
            End Get
        End Property
        
        Public ReadOnly Property SPD7Column As DataColumn
            Get
                Return Me.columnSPD7
            End Get
        End Property
        
        Public ReadOnly Property SPD8Column As DataColumn
            Get
                Return Me.columnSPD8
            End Get
        End Property
        
        Public ReadOnly Property SPD9Column As DataColumn
            Get
                Return Me.columnSPD9
            End Get
        End Property
        
        Public ReadOnly Property SpellsPerDay_IdColumn As DataColumn
            Get
                Return Me.columnSpellsPerDay_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DomainSPDRow
            Get
                Return CType(Me.Rows(index),DomainSPDRow)
            End Get
        End Property
        
        Public Event DomainSPDRowChanged As DomainSPDRowChangeEventHandler
        
        Public Event DomainSPDRowChanging As DomainSPDRowChangeEventHandler
        
        Public Event DomainSPDRowDeleted As DomainSPDRowChangeEventHandler
        
        Public Event DomainSPDRowDeleting As DomainSPDRowChangeEventHandler
        
        Public Overloads Sub AddDomainSPDRow(ByVal row As DomainSPDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDomainSPDRow(ByVal SPD0 As String, ByVal SPD1 As String, ByVal SPD2 As String, ByVal SPD3 As String, ByVal SPD4 As String, ByVal SPD5 As String, ByVal SPD6 As String, ByVal SPD7 As String, ByVal SPD8 As String, ByVal SPD9 As String, ByVal parentSpellsPerDayRowBySpellsPerDay_DomainSPD As SpellsPerDayRow) As DomainSPDRow
            Dim rowDomainSPDRow As DomainSPDRow = CType(Me.NewRow,DomainSPDRow)
            rowDomainSPDRow.ItemArray = New Object() {SPD0, SPD1, SPD2, SPD3, SPD4, SPD5, SPD6, SPD7, SPD8, SPD9, parentSpellsPerDayRowBySpellsPerDay_DomainSPD(0)}
            Me.Rows.Add(rowDomainSPDRow)
            Return rowDomainSPDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DomainSPDDataTable = CType(MyBase.Clone,DomainSPDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DomainSPDDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSPD0 = Me.Columns("SPD0")
            Me.columnSPD1 = Me.Columns("SPD1")
            Me.columnSPD2 = Me.Columns("SPD2")
            Me.columnSPD3 = Me.Columns("SPD3")
            Me.columnSPD4 = Me.Columns("SPD4")
            Me.columnSPD5 = Me.Columns("SPD5")
            Me.columnSPD6 = Me.Columns("SPD6")
            Me.columnSPD7 = Me.Columns("SPD7")
            Me.columnSPD8 = Me.Columns("SPD8")
            Me.columnSPD9 = Me.Columns("SPD9")
            Me.columnSpellsPerDay_Id = Me.Columns("SpellsPerDay_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSPD0 = New DataColumn("SPD0", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD0)
            Me.columnSPD1 = New DataColumn("SPD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD1)
            Me.columnSPD2 = New DataColumn("SPD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD2)
            Me.columnSPD3 = New DataColumn("SPD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD3)
            Me.columnSPD4 = New DataColumn("SPD4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD4)
            Me.columnSPD5 = New DataColumn("SPD5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD5)
            Me.columnSPD6 = New DataColumn("SPD6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD6)
            Me.columnSPD7 = New DataColumn("SPD7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD7)
            Me.columnSPD8 = New DataColumn("SPD8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD8)
            Me.columnSPD9 = New DataColumn("SPD9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPD9)
            Me.columnSpellsPerDay_Id = New DataColumn("SpellsPerDay_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellsPerDay_Id)
        End Sub
        
        Public Function NewDomainSPDRow() As DomainSPDRow
            Return CType(Me.NewRow,DomainSPDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DomainSPDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DomainSPDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DomainSPDRowChangedEvent) Is Nothing) Then
                RaiseEvent DomainSPDRowChanged(Me, New DomainSPDRowChangeEvent(CType(e.Row,DomainSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DomainSPDRowChangingEvent) Is Nothing) Then
                RaiseEvent DomainSPDRowChanging(Me, New DomainSPDRowChangeEvent(CType(e.Row,DomainSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DomainSPDRowDeletedEvent) Is Nothing) Then
                RaiseEvent DomainSPDRowDeleted(Me, New DomainSPDRowChangeEvent(CType(e.Row,DomainSPDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DomainSPDRowDeletingEvent) Is Nothing) Then
                RaiseEvent DomainSPDRowDeleting(Me, New DomainSPDRowChangeEvent(CType(e.Row,DomainSPDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDomainSPDRow(ByVal row As DomainSPDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainSPDRow
        Inherits DataRow
        
        Private tableDomainSPD As DomainSPDDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDomainSPD = CType(Me.Table,DomainSPDDataTable)
        End Sub
        
        Public Property SPD0 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD0Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD0Column) = value
            End Set
        End Property
        
        Public Property SPD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD1Column) = value
            End Set
        End Property
        
        Public Property SPD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD2Column) = value
            End Set
        End Property
        
        Public Property SPD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD3Column) = value
            End Set
        End Property
        
        Public Property SPD4 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD4Column) = value
            End Set
        End Property
        
        Public Property SPD5 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD5Column) = value
            End Set
        End Property
        
        Public Property SPD6 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD6Column) = value
            End Set
        End Property
        
        Public Property SPD7 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD7Column) = value
            End Set
        End Property
        
        Public Property SPD8 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD8Column) = value
            End Set
        End Property
        
        Public Property SPD9 As String
            Get
                Try 
                    Return CType(Me(Me.tableDomainSPD.SPD9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomainSPD.SPD9Column) = value
            End Set
        End Property
        
        Public Property SpellsPerDayRow As SpellsPerDayRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SpellsPerDay_DomainSPD")),SpellsPerDayRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SpellsPerDay_DomainSPD"))
            End Set
        End Property
        
        Public Function IsSPD0Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD0Column)
        End Function
        
        Public Sub SetSPD0Null()
            Me(Me.tableDomainSPD.SPD0Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD1Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD1Column)
        End Function
        
        Public Sub SetSPD1Null()
            Me(Me.tableDomainSPD.SPD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD2Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD2Column)
        End Function
        
        Public Sub SetSPD2Null()
            Me(Me.tableDomainSPD.SPD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD3Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD3Column)
        End Function
        
        Public Sub SetSPD3Null()
            Me(Me.tableDomainSPD.SPD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD4Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD4Column)
        End Function
        
        Public Sub SetSPD4Null()
            Me(Me.tableDomainSPD.SPD4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD5Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD5Column)
        End Function
        
        Public Sub SetSPD5Null()
            Me(Me.tableDomainSPD.SPD5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD6Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD6Column)
        End Function
        
        Public Sub SetSPD6Null()
            Me(Me.tableDomainSPD.SPD6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD7Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD7Column)
        End Function
        
        Public Sub SetSPD7Null()
            Me(Me.tableDomainSPD.SPD7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD8Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD8Column)
        End Function
        
        Public Sub SetSPD8Null()
            Me(Me.tableDomainSPD.SPD8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPD9Null() As Boolean
            Return Me.IsNull(Me.tableDomainSPD.SPD9Column)
        End Function
        
        Public Sub SetSPD9Null()
            Me(Me.tableDomainSPD.SPD9Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainSPDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DomainSPDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DomainSPDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DomainSPDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellSavesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSS0 As DataColumn
        
        Private columnSS1 As DataColumn
        
        Private columnSS2 As DataColumn
        
        Private columnSS3 As DataColumn
        
        Private columnSS4 As DataColumn
        
        Private columnSS5 As DataColumn
        
        Private columnSS6 As DataColumn
        
        Private columnSS7 As DataColumn
        
        Private columnSS8 As DataColumn
        
        Private columnSS9 As DataColumn
        
        Private columnCasterClass_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpellSaves")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SS0Column As DataColumn
            Get
                Return Me.columnSS0
            End Get
        End Property
        
        Public ReadOnly Property SS1Column As DataColumn
            Get
                Return Me.columnSS1
            End Get
        End Property
        
        Public ReadOnly Property SS2Column As DataColumn
            Get
                Return Me.columnSS2
            End Get
        End Property
        
        Public ReadOnly Property SS3Column As DataColumn
            Get
                Return Me.columnSS3
            End Get
        End Property
        
        Public ReadOnly Property SS4Column As DataColumn
            Get
                Return Me.columnSS4
            End Get
        End Property
        
        Public ReadOnly Property SS5Column As DataColumn
            Get
                Return Me.columnSS5
            End Get
        End Property
        
        Public ReadOnly Property SS6Column As DataColumn
            Get
                Return Me.columnSS6
            End Get
        End Property
        
        Public ReadOnly Property SS7Column As DataColumn
            Get
                Return Me.columnSS7
            End Get
        End Property
        
        Public ReadOnly Property SS8Column As DataColumn
            Get
                Return Me.columnSS8
            End Get
        End Property
        
        Public ReadOnly Property SS9Column As DataColumn
            Get
                Return Me.columnSS9
            End Get
        End Property
        
        Public ReadOnly Property CasterClass_IdColumn As DataColumn
            Get
                Return Me.columnCasterClass_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpellSavesRow
            Get
                Return CType(Me.Rows(index),SpellSavesRow)
            End Get
        End Property
        
        Public Event SpellSavesRowChanged As SpellSavesRowChangeEventHandler
        
        Public Event SpellSavesRowChanging As SpellSavesRowChangeEventHandler
        
        Public Event SpellSavesRowDeleted As SpellSavesRowChangeEventHandler
        
        Public Event SpellSavesRowDeleting As SpellSavesRowChangeEventHandler
        
        Public Overloads Sub AddSpellSavesRow(ByVal row As SpellSavesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpellSavesRow(ByVal SS0 As String, ByVal SS1 As String, ByVal SS2 As String, ByVal SS3 As String, ByVal SS4 As String, ByVal SS5 As String, ByVal SS6 As String, ByVal SS7 As String, ByVal SS8 As String, ByVal SS9 As String, ByVal parentCasterClassRowByCasterClass_SpellSaves As CasterClassRow) As SpellSavesRow
            Dim rowSpellSavesRow As SpellSavesRow = CType(Me.NewRow,SpellSavesRow)
            rowSpellSavesRow.ItemArray = New Object() {SS0, SS1, SS2, SS3, SS4, SS5, SS6, SS7, SS8, SS9, parentCasterClassRowByCasterClass_SpellSaves(5)}
            Me.Rows.Add(rowSpellSavesRow)
            Return rowSpellSavesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpellSavesDataTable = CType(MyBase.Clone,SpellSavesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpellSavesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSS0 = Me.Columns("SS0")
            Me.columnSS1 = Me.Columns("SS1")
            Me.columnSS2 = Me.Columns("SS2")
            Me.columnSS3 = Me.Columns("SS3")
            Me.columnSS4 = Me.Columns("SS4")
            Me.columnSS5 = Me.Columns("SS5")
            Me.columnSS6 = Me.Columns("SS6")
            Me.columnSS7 = Me.Columns("SS7")
            Me.columnSS8 = Me.Columns("SS8")
            Me.columnSS9 = Me.Columns("SS9")
            Me.columnCasterClass_Id = Me.Columns("CasterClass_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSS0 = New DataColumn("SS0", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS0)
            Me.columnSS1 = New DataColumn("SS1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS1)
            Me.columnSS2 = New DataColumn("SS2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS2)
            Me.columnSS3 = New DataColumn("SS3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS3)
            Me.columnSS4 = New DataColumn("SS4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS4)
            Me.columnSS5 = New DataColumn("SS5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS5)
            Me.columnSS6 = New DataColumn("SS6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS6)
            Me.columnSS7 = New DataColumn("SS7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS7)
            Me.columnSS8 = New DataColumn("SS8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS8)
            Me.columnSS9 = New DataColumn("SS9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSS9)
            Me.columnCasterClass_Id = New DataColumn("CasterClass_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCasterClass_Id)
        End Sub
        
        Public Function NewSpellSavesRow() As SpellSavesRow
            Return CType(Me.NewRow,SpellSavesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpellSavesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellSavesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellSavesRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellSavesRowChanged(Me, New SpellSavesRowChangeEvent(CType(e.Row,SpellSavesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellSavesRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellSavesRowChanging(Me, New SpellSavesRowChangeEvent(CType(e.Row,SpellSavesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellSavesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellSavesRowDeleted(Me, New SpellSavesRowChangeEvent(CType(e.Row,SpellSavesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellSavesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellSavesRowDeleting(Me, New SpellSavesRowChangeEvent(CType(e.Row,SpellSavesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpellSavesRow(ByVal row As SpellSavesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellSavesRow
        Inherits DataRow
        
        Private tableSpellSaves As SpellSavesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpellSaves = CType(Me.Table,SpellSavesDataTable)
        End Sub
        
        Public Property SS0 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS0Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS0Column) = value
            End Set
        End Property
        
        Public Property SS1 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS1Column) = value
            End Set
        End Property
        
        Public Property SS2 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS2Column) = value
            End Set
        End Property
        
        Public Property SS3 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS3Column) = value
            End Set
        End Property
        
        Public Property SS4 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS4Column) = value
            End Set
        End Property
        
        Public Property SS5 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS5Column) = value
            End Set
        End Property
        
        Public Property SS6 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS6Column) = value
            End Set
        End Property
        
        Public Property SS7 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS7Column) = value
            End Set
        End Property
        
        Public Property SS8 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS8Column) = value
            End Set
        End Property
        
        Public Property SS9 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellSaves.SS9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellSaves.SS9Column) = value
            End Set
        End Property
        
        Public Property CasterClassRow As CasterClassRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CasterClass_SpellSaves")),CasterClassRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CasterClass_SpellSaves"))
            End Set
        End Property
        
        Public Function IsSS0Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS0Column)
        End Function
        
        Public Sub SetSS0Null()
            Me(Me.tableSpellSaves.SS0Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS1Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS1Column)
        End Function
        
        Public Sub SetSS1Null()
            Me(Me.tableSpellSaves.SS1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS2Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS2Column)
        End Function
        
        Public Sub SetSS2Null()
            Me(Me.tableSpellSaves.SS2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS3Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS3Column)
        End Function
        
        Public Sub SetSS3Null()
            Me(Me.tableSpellSaves.SS3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS4Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS4Column)
        End Function
        
        Public Sub SetSS4Null()
            Me(Me.tableSpellSaves.SS4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS5Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS5Column)
        End Function
        
        Public Sub SetSS5Null()
            Me(Me.tableSpellSaves.SS5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS6Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS6Column)
        End Function
        
        Public Sub SetSS6Null()
            Me(Me.tableSpellSaves.SS6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS7Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS7Column)
        End Function
        
        Public Sub SetSS7Null()
            Me(Me.tableSpellSaves.SS7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS8Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS8Column)
        End Function
        
        Public Sub SetSS8Null()
            Me(Me.tableSpellSaves.SS8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSS9Null() As Boolean
            Return Me.IsNull(Me.tableSpellSaves.SS9Column)
        End Function
        
        Public Sub SetSS9Null()
            Me(Me.tableSpellSaves.SS9Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellSavesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpellSavesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpellSavesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpellSavesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsKnownDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSK0 As DataColumn
        
        Private columnSK1 As DataColumn
        
        Private columnSK2 As DataColumn
        
        Private columnSK3 As DataColumn
        
        Private columnSK4 As DataColumn
        
        Private columnSK5 As DataColumn
        
        Private columnSK6 As DataColumn
        
        Private columnSK7 As DataColumn
        
        Private columnSK8 As DataColumn
        
        Private columnSK9 As DataColumn
        
        Private columnCasterClass_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpellsKnown")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SK0Column As DataColumn
            Get
                Return Me.columnSK0
            End Get
        End Property
        
        Public ReadOnly Property SK1Column As DataColumn
            Get
                Return Me.columnSK1
            End Get
        End Property
        
        Public ReadOnly Property SK2Column As DataColumn
            Get
                Return Me.columnSK2
            End Get
        End Property
        
        Public ReadOnly Property SK3Column As DataColumn
            Get
                Return Me.columnSK3
            End Get
        End Property
        
        Public ReadOnly Property SK4Column As DataColumn
            Get
                Return Me.columnSK4
            End Get
        End Property
        
        Public ReadOnly Property SK5Column As DataColumn
            Get
                Return Me.columnSK5
            End Get
        End Property
        
        Public ReadOnly Property SK6Column As DataColumn
            Get
                Return Me.columnSK6
            End Get
        End Property
        
        Public ReadOnly Property SK7Column As DataColumn
            Get
                Return Me.columnSK7
            End Get
        End Property
        
        Public ReadOnly Property SK8Column As DataColumn
            Get
                Return Me.columnSK8
            End Get
        End Property
        
        Public ReadOnly Property SK9Column As DataColumn
            Get
                Return Me.columnSK9
            End Get
        End Property
        
        Public ReadOnly Property CasterClass_IdColumn As DataColumn
            Get
                Return Me.columnCasterClass_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpellsKnownRow
            Get
                Return CType(Me.Rows(index),SpellsKnownRow)
            End Get
        End Property
        
        Public Event SpellsKnownRowChanged As SpellsKnownRowChangeEventHandler
        
        Public Event SpellsKnownRowChanging As SpellsKnownRowChangeEventHandler
        
        Public Event SpellsKnownRowDeleted As SpellsKnownRowChangeEventHandler
        
        Public Event SpellsKnownRowDeleting As SpellsKnownRowChangeEventHandler
        
        Public Overloads Sub AddSpellsKnownRow(ByVal row As SpellsKnownRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpellsKnownRow(ByVal SK0 As String, ByVal SK1 As String, ByVal SK2 As String, ByVal SK3 As String, ByVal SK4 As String, ByVal SK5 As String, ByVal SK6 As String, ByVal SK7 As String, ByVal SK8 As String, ByVal SK9 As String, ByVal parentCasterClassRowByCasterClass_SpellsKnown As CasterClassRow) As SpellsKnownRow
            Dim rowSpellsKnownRow As SpellsKnownRow = CType(Me.NewRow,SpellsKnownRow)
            rowSpellsKnownRow.ItemArray = New Object() {SK0, SK1, SK2, SK3, SK4, SK5, SK6, SK7, SK8, SK9, parentCasterClassRowByCasterClass_SpellsKnown(5)}
            Me.Rows.Add(rowSpellsKnownRow)
            Return rowSpellsKnownRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpellsKnownDataTable = CType(MyBase.Clone,SpellsKnownDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpellsKnownDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSK0 = Me.Columns("SK0")
            Me.columnSK1 = Me.Columns("SK1")
            Me.columnSK2 = Me.Columns("SK2")
            Me.columnSK3 = Me.Columns("SK3")
            Me.columnSK4 = Me.Columns("SK4")
            Me.columnSK5 = Me.Columns("SK5")
            Me.columnSK6 = Me.Columns("SK6")
            Me.columnSK7 = Me.Columns("SK7")
            Me.columnSK8 = Me.Columns("SK8")
            Me.columnSK9 = Me.Columns("SK9")
            Me.columnCasterClass_Id = Me.Columns("CasterClass_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSK0 = New DataColumn("SK0", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK0)
            Me.columnSK1 = New DataColumn("SK1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK1)
            Me.columnSK2 = New DataColumn("SK2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK2)
            Me.columnSK3 = New DataColumn("SK3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK3)
            Me.columnSK4 = New DataColumn("SK4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK4)
            Me.columnSK5 = New DataColumn("SK5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK5)
            Me.columnSK6 = New DataColumn("SK6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK6)
            Me.columnSK7 = New DataColumn("SK7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK7)
            Me.columnSK8 = New DataColumn("SK8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK8)
            Me.columnSK9 = New DataColumn("SK9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSK9)
            Me.columnCasterClass_Id = New DataColumn("CasterClass_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCasterClass_Id)
        End Sub
        
        Public Function NewSpellsKnownRow() As SpellsKnownRow
            Return CType(Me.NewRow,SpellsKnownRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpellsKnownRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellsKnownRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellsKnownRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellsKnownRowChanged(Me, New SpellsKnownRowChangeEvent(CType(e.Row,SpellsKnownRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellsKnownRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellsKnownRowChanging(Me, New SpellsKnownRowChangeEvent(CType(e.Row,SpellsKnownRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellsKnownRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellsKnownRowDeleted(Me, New SpellsKnownRowChangeEvent(CType(e.Row,SpellsKnownRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellsKnownRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellsKnownRowDeleting(Me, New SpellsKnownRowChangeEvent(CType(e.Row,SpellsKnownRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpellsKnownRow(ByVal row As SpellsKnownRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsKnownRow
        Inherits DataRow
        
        Private tableSpellsKnown As SpellsKnownDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpellsKnown = CType(Me.Table,SpellsKnownDataTable)
        End Sub
        
        Public Property SK0 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK0Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK0Column) = value
            End Set
        End Property
        
        Public Property SK1 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK1Column) = value
            End Set
        End Property
        
        Public Property SK2 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK2Column) = value
            End Set
        End Property
        
        Public Property SK3 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK3Column) = value
            End Set
        End Property
        
        Public Property SK4 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK4Column) = value
            End Set
        End Property
        
        Public Property SK5 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK5Column) = value
            End Set
        End Property
        
        Public Property SK6 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK6Column) = value
            End Set
        End Property
        
        Public Property SK7 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK7Column) = value
            End Set
        End Property
        
        Public Property SK8 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK8Column) = value
            End Set
        End Property
        
        Public Property SK9 As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellsKnown.SK9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellsKnown.SK9Column) = value
            End Set
        End Property
        
        Public Property CasterClassRow As CasterClassRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CasterClass_SpellsKnown")),CasterClassRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CasterClass_SpellsKnown"))
            End Set
        End Property
        
        Public Function IsSK0Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK0Column)
        End Function
        
        Public Sub SetSK0Null()
            Me(Me.tableSpellsKnown.SK0Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK1Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK1Column)
        End Function
        
        Public Sub SetSK1Null()
            Me(Me.tableSpellsKnown.SK1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK2Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK2Column)
        End Function
        
        Public Sub SetSK2Null()
            Me(Me.tableSpellsKnown.SK2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK3Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK3Column)
        End Function
        
        Public Sub SetSK3Null()
            Me(Me.tableSpellsKnown.SK3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK4Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK4Column)
        End Function
        
        Public Sub SetSK4Null()
            Me(Me.tableSpellsKnown.SK4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK5Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK5Column)
        End Function
        
        Public Sub SetSK5Null()
            Me(Me.tableSpellsKnown.SK5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK6Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK6Column)
        End Function
        
        Public Sub SetSK6Null()
            Me(Me.tableSpellsKnown.SK6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK7Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK7Column)
        End Function
        
        Public Sub SetSK7Null()
            Me(Me.tableSpellsKnown.SK7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK8Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK8Column)
        End Function
        
        Public Sub SetSK8Null()
            Me(Me.tableSpellsKnown.SK8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSK9Null() As Boolean
            Return Me.IsNull(Me.tableSpellsKnown.SK9Column)
        End Function
        
        Public Sub SetSK9Null()
            Me(Me.tableSpellsKnown.SK9Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsKnownRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpellsKnownRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpellsKnownRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpellsKnownRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MemorizedSpellsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSlotLevel As DataColumn
        
        Private columnMemorizedSpells_Id As DataColumn
        
        Private columnCasterClass_Id As DataColumn
        
        Public Sub New()
            MyBase.New("MemorizedSpells")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SlotLevelColumn As DataColumn
            Get
                Return Me.columnSlotLevel
            End Get
        End Property
        
        Public ReadOnly Property MemorizedSpells_IdColumn As DataColumn
            Get
                Return Me.columnMemorizedSpells_Id
            End Get
        End Property
        
        Public ReadOnly Property CasterClass_IdColumn As DataColumn
            Get
                Return Me.columnCasterClass_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MemorizedSpellsRow
            Get
                Return CType(Me.Rows(index),MemorizedSpellsRow)
            End Get
        End Property
        
        Public Event MemorizedSpellsRowChanged As MemorizedSpellsRowChangeEventHandler
        
        Public Event MemorizedSpellsRowChanging As MemorizedSpellsRowChangeEventHandler
        
        Public Event MemorizedSpellsRowDeleted As MemorizedSpellsRowChangeEventHandler
        
        Public Event MemorizedSpellsRowDeleting As MemorizedSpellsRowChangeEventHandler
        
        Public Overloads Sub AddMemorizedSpellsRow(ByVal row As MemorizedSpellsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMemorizedSpellsRow(ByVal SlotLevel As String, ByVal parentCasterClassRowByCasterClass_MemorizedSpells As CasterClassRow) As MemorizedSpellsRow
            Dim rowMemorizedSpellsRow As MemorizedSpellsRow = CType(Me.NewRow,MemorizedSpellsRow)
            rowMemorizedSpellsRow.ItemArray = New Object() {SlotLevel, Nothing, parentCasterClassRowByCasterClass_MemorizedSpells(5)}
            Me.Rows.Add(rowMemorizedSpellsRow)
            Return rowMemorizedSpellsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MemorizedSpellsDataTable = CType(MyBase.Clone,MemorizedSpellsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MemorizedSpellsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSlotLevel = Me.Columns("SlotLevel")
            Me.columnMemorizedSpells_Id = Me.Columns("MemorizedSpells_Id")
            Me.columnCasterClass_Id = Me.Columns("CasterClass_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSlotLevel = New DataColumn("SlotLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSlotLevel)
            Me.columnMemorizedSpells_Id = New DataColumn("MemorizedSpells_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnMemorizedSpells_Id)
            Me.columnCasterClass_Id = New DataColumn("CasterClass_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCasterClass_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMemorizedSpells_Id}, true))
            Me.columnMemorizedSpells_Id.AutoIncrement = true
            Me.columnMemorizedSpells_Id.AllowDBNull = false
            Me.columnMemorizedSpells_Id.Unique = true
        End Sub
        
        Public Function NewMemorizedSpellsRow() As MemorizedSpellsRow
            Return CType(Me.NewRow,MemorizedSpellsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MemorizedSpellsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MemorizedSpellsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MemorizedSpellsRowChangedEvent) Is Nothing) Then
                RaiseEvent MemorizedSpellsRowChanged(Me, New MemorizedSpellsRowChangeEvent(CType(e.Row,MemorizedSpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MemorizedSpellsRowChangingEvent) Is Nothing) Then
                RaiseEvent MemorizedSpellsRowChanging(Me, New MemorizedSpellsRowChangeEvent(CType(e.Row,MemorizedSpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MemorizedSpellsRowDeletedEvent) Is Nothing) Then
                RaiseEvent MemorizedSpellsRowDeleted(Me, New MemorizedSpellsRowChangeEvent(CType(e.Row,MemorizedSpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MemorizedSpellsRowDeletingEvent) Is Nothing) Then
                RaiseEvent MemorizedSpellsRowDeleting(Me, New MemorizedSpellsRowChangeEvent(CType(e.Row,MemorizedSpellsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMemorizedSpellsRow(ByVal row As MemorizedSpellsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MemorizedSpellsRow
        Inherits DataRow
        
        Private tableMemorizedSpells As MemorizedSpellsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMemorizedSpells = CType(Me.Table,MemorizedSpellsDataTable)
        End Sub
        
        Public Property SlotLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableMemorizedSpells.SlotLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemorizedSpells.SlotLevelColumn) = value
            End Set
        End Property
        
        Public Property CasterClassRow As CasterClassRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CasterClass_MemorizedSpells")),CasterClassRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CasterClass_MemorizedSpells"))
            End Set
        End Property
        
        Public Function IsSlotLevelNull() As Boolean
            Return Me.IsNull(Me.tableMemorizedSpells.SlotLevelColumn)
        End Function
        
        Public Sub SetSlotLevelNull()
            Me(Me.tableMemorizedSpells.SlotLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetMemorizedSpellRows() As MemorizedSpellRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("MemorizedSpells_MemorizedSpell")),MemorizedSpellRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MemorizedSpellsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MemorizedSpellsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MemorizedSpellsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MemorizedSpellsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MemorizedSpellDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpellName As DataColumn
        
        Private columnSpellLevel As DataColumn
        
        Private columnSlotType As DataColumn
        
        Private columnMetaTags As DataColumn
        
        Private columnMemorizedSpells_Id As DataColumn
        
        Public Sub New()
            MyBase.New("MemorizedSpell")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SpellNameColumn As DataColumn
            Get
                Return Me.columnSpellName
            End Get
        End Property
        
        Public ReadOnly Property SpellLevelColumn As DataColumn
            Get
                Return Me.columnSpellLevel
            End Get
        End Property
        
        Public ReadOnly Property SlotTypeColumn As DataColumn
            Get
                Return Me.columnSlotType
            End Get
        End Property
        
        Public ReadOnly Property MetaTagsColumn As DataColumn
            Get
                Return Me.columnMetaTags
            End Get
        End Property
        
        Public ReadOnly Property MemorizedSpells_IdColumn As DataColumn
            Get
                Return Me.columnMemorizedSpells_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MemorizedSpellRow
            Get
                Return CType(Me.Rows(index),MemorizedSpellRow)
            End Get
        End Property
        
        Public Event MemorizedSpellRowChanged As MemorizedSpellRowChangeEventHandler
        
        Public Event MemorizedSpellRowChanging As MemorizedSpellRowChangeEventHandler
        
        Public Event MemorizedSpellRowDeleted As MemorizedSpellRowChangeEventHandler
        
        Public Event MemorizedSpellRowDeleting As MemorizedSpellRowChangeEventHandler
        
        Public Overloads Sub AddMemorizedSpellRow(ByVal row As MemorizedSpellRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMemorizedSpellRow(ByVal SpellName As String, ByVal SpellLevel As String, ByVal SlotType As String, ByVal MetaTags As String, ByVal parentMemorizedSpellsRowByMemorizedSpells_MemorizedSpell As MemorizedSpellsRow) As MemorizedSpellRow
            Dim rowMemorizedSpellRow As MemorizedSpellRow = CType(Me.NewRow,MemorizedSpellRow)
            rowMemorizedSpellRow.ItemArray = New Object() {SpellName, SpellLevel, SlotType, MetaTags, parentMemorizedSpellsRowByMemorizedSpells_MemorizedSpell(1)}
            Me.Rows.Add(rowMemorizedSpellRow)
            Return rowMemorizedSpellRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MemorizedSpellDataTable = CType(MyBase.Clone,MemorizedSpellDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MemorizedSpellDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpellName = Me.Columns("SpellName")
            Me.columnSpellLevel = Me.Columns("SpellLevel")
            Me.columnSlotType = Me.Columns("SlotType")
            Me.columnMetaTags = Me.Columns("MetaTags")
            Me.columnMemorizedSpells_Id = Me.Columns("MemorizedSpells_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpellName = New DataColumn("SpellName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellName)
            Me.columnSpellLevel = New DataColumn("SpellLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellLevel)
            Me.columnSlotType = New DataColumn("SlotType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSlotType)
            Me.columnMetaTags = New DataColumn("MetaTags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMetaTags)
            Me.columnMemorizedSpells_Id = New DataColumn("MemorizedSpells_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnMemorizedSpells_Id)
        End Sub
        
        Public Function NewMemorizedSpellRow() As MemorizedSpellRow
            Return CType(Me.NewRow,MemorizedSpellRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MemorizedSpellRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MemorizedSpellRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MemorizedSpellRowChangedEvent) Is Nothing) Then
                RaiseEvent MemorizedSpellRowChanged(Me, New MemorizedSpellRowChangeEvent(CType(e.Row,MemorizedSpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MemorizedSpellRowChangingEvent) Is Nothing) Then
                RaiseEvent MemorizedSpellRowChanging(Me, New MemorizedSpellRowChangeEvent(CType(e.Row,MemorizedSpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MemorizedSpellRowDeletedEvent) Is Nothing) Then
                RaiseEvent MemorizedSpellRowDeleted(Me, New MemorizedSpellRowChangeEvent(CType(e.Row,MemorizedSpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MemorizedSpellRowDeletingEvent) Is Nothing) Then
                RaiseEvent MemorizedSpellRowDeleting(Me, New MemorizedSpellRowChangeEvent(CType(e.Row,MemorizedSpellRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMemorizedSpellRow(ByVal row As MemorizedSpellRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MemorizedSpellRow
        Inherits DataRow
        
        Private tableMemorizedSpell As MemorizedSpellDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMemorizedSpell = CType(Me.Table,MemorizedSpellDataTable)
        End Sub
        
        Public Property SpellName As String
            Get
                Try 
                    Return CType(Me(Me.tableMemorizedSpell.SpellNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemorizedSpell.SpellNameColumn) = value
            End Set
        End Property
        
        Public Property SpellLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableMemorizedSpell.SpellLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemorizedSpell.SpellLevelColumn) = value
            End Set
        End Property
        
        Public Property SlotType As String
            Get
                Try 
                    Return CType(Me(Me.tableMemorizedSpell.SlotTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemorizedSpell.SlotTypeColumn) = value
            End Set
        End Property
        
        Public Property MetaTags As String
            Get
                Try 
                    Return CType(Me(Me.tableMemorizedSpell.MetaTagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMemorizedSpell.MetaTagsColumn) = value
            End Set
        End Property
        
        Public Property MemorizedSpellsRow As MemorizedSpellsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MemorizedSpells_MemorizedSpell")),MemorizedSpellsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MemorizedSpells_MemorizedSpell"))
            End Set
        End Property
        
        Public Function IsSpellNameNull() As Boolean
            Return Me.IsNull(Me.tableMemorizedSpell.SpellNameColumn)
        End Function
        
        Public Sub SetSpellNameNull()
            Me(Me.tableMemorizedSpell.SpellNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellLevelNull() As Boolean
            Return Me.IsNull(Me.tableMemorizedSpell.SpellLevelColumn)
        End Function
        
        Public Sub SetSpellLevelNull()
            Me(Me.tableMemorizedSpell.SpellLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSlotTypeNull() As Boolean
            Return Me.IsNull(Me.tableMemorizedSpell.SlotTypeColumn)
        End Function
        
        Public Sub SetSlotTypeNull()
            Me(Me.tableMemorizedSpell.SlotTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMetaTagsNull() As Boolean
            Return Me.IsNull(Me.tableMemorizedSpell.MetaTagsColumn)
        End Function
        
        Public Sub SetMetaTagsNull()
            Me(Me.tableMemorizedSpell.MetaTagsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MemorizedSpellRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MemorizedSpellRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MemorizedSpellRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MemorizedSpellRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDomains_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Domains")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Domains_IdColumn As DataColumn
            Get
                Return Me.columnDomains_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DomainsRow
            Get
                Return CType(Me.Rows(index),DomainsRow)
            End Get
        End Property
        
        Public Event DomainsRowChanged As DomainsRowChangeEventHandler
        
        Public Event DomainsRowChanging As DomainsRowChangeEventHandler
        
        Public Event DomainsRowDeleted As DomainsRowChangeEventHandler
        
        Public Event DomainsRowDeleting As DomainsRowChangeEventHandler
        
        Public Overloads Sub AddDomainsRow(ByVal row As DomainsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDomainsRow(ByVal parentCharacterRowByCharacter_Domains As CharacterRow) As DomainsRow
            Dim rowDomainsRow As DomainsRow = CType(Me.NewRow,DomainsRow)
            rowDomainsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Domains(86)}
            Me.Rows.Add(rowDomainsRow)
            Return rowDomainsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DomainsDataTable = CType(MyBase.Clone,DomainsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DomainsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnDomains_Id = Me.Columns("Domains_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDomains_Id = New DataColumn("Domains_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnDomains_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDomains_Id}, true))
            Me.columnDomains_Id.AutoIncrement = true
            Me.columnDomains_Id.AllowDBNull = false
            Me.columnDomains_Id.Unique = true
        End Sub
        
        Public Function NewDomainsRow() As DomainsRow
            Return CType(Me.NewRow,DomainsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DomainsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DomainsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DomainsRowChangedEvent) Is Nothing) Then
                RaiseEvent DomainsRowChanged(Me, New DomainsRowChangeEvent(CType(e.Row,DomainsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DomainsRowChangingEvent) Is Nothing) Then
                RaiseEvent DomainsRowChanging(Me, New DomainsRowChangeEvent(CType(e.Row,DomainsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DomainsRowDeletedEvent) Is Nothing) Then
                RaiseEvent DomainsRowDeleted(Me, New DomainsRowChangeEvent(CType(e.Row,DomainsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DomainsRowDeletingEvent) Is Nothing) Then
                RaiseEvent DomainsRowDeleting(Me, New DomainsRowChangeEvent(CType(e.Row,DomainsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDomainsRow(ByVal row As DomainsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainsRow
        Inherits DataRow
        
        Private tableDomains As DomainsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDomains = CType(Me.Table,DomainsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Domains")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Domains"))
            End Set
        End Property
        
        Public Function GetDomainRows() As DomainRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Domains_Domain")),DomainRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DomainsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DomainsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DomainsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDomainName As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnClassName As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnDomains_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Domain")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property DomainNameColumn As DataColumn
            Get
                Return Me.columnDomainName
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property Domains_IdColumn As DataColumn
            Get
                Return Me.columnDomains_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DomainRow
            Get
                Return CType(Me.Rows(index),DomainRow)
            End Get
        End Property
        
        Public Event DomainRowChanged As DomainRowChangeEventHandler
        
        Public Event DomainRowChanging As DomainRowChangeEventHandler
        
        Public Event DomainRowDeleted As DomainRowChangeEventHandler
        
        Public Event DomainRowDeleting As DomainRowChangeEventHandler
        
        Public Overloads Sub AddDomainRow(ByVal row As DomainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDomainRow(ByVal DomainName As String, ByVal Description As String, ByVal ClassName As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentDomainsRowByDomains_Domain As DomainsRow) As DomainRow
            Dim rowDomainRow As DomainRow = CType(Me.NewRow,DomainRow)
            rowDomainRow.ItemArray = New Object() {DomainName, Description, ClassName, License, Sourcebook, Tags, PageNo, HelpPage, parentDomainsRowByDomains_Domain(0)}
            Me.Rows.Add(rowDomainRow)
            Return rowDomainRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DomainDataTable = CType(MyBase.Clone,DomainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DomainDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnDomainName = Me.Columns("DomainName")
            Me.columnDescription = Me.Columns("Description")
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnDomains_Id = Me.Columns("Domains_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDomainName = New DataColumn("DomainName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDomainName)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnDomains_Id = New DataColumn("Domains_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnDomains_Id)
        End Sub
        
        Public Function NewDomainRow() As DomainRow
            Return CType(Me.NewRow,DomainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DomainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DomainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DomainRowChangedEvent) Is Nothing) Then
                RaiseEvent DomainRowChanged(Me, New DomainRowChangeEvent(CType(e.Row,DomainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DomainRowChangingEvent) Is Nothing) Then
                RaiseEvent DomainRowChanging(Me, New DomainRowChangeEvent(CType(e.Row,DomainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DomainRowDeletedEvent) Is Nothing) Then
                RaiseEvent DomainRowDeleted(Me, New DomainRowChangeEvent(CType(e.Row,DomainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DomainRowDeletingEvent) Is Nothing) Then
                RaiseEvent DomainRowDeleting(Me, New DomainRowChangeEvent(CType(e.Row,DomainRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDomainRow(ByVal row As DomainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainRow
        Inherits DataRow
        
        Private tableDomain As DomainDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDomain = CType(Me.Table,DomainDataTable)
        End Sub
        
        Public Property DomainName As String
            Get
                Try 
                    Return CType(Me(Me.tableDomain.DomainNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomain.DomainNameColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableDomain.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomain.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tableDomain.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomain.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableDomain.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomain.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableDomain.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomain.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableDomain.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomain.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableDomain.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomain.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableDomain.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDomain.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property DomainsRow As DomainsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Domains_Domain")),DomainsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Domains_Domain"))
            End Set
        End Property
        
        Public Function IsDomainNameNull() As Boolean
            Return Me.IsNull(Me.tableDomain.DomainNameColumn)
        End Function
        
        Public Sub SetDomainNameNull()
            Me(Me.tableDomain.DomainNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableDomain.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableDomain.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableDomain.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableDomain.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableDomain.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableDomain.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableDomain.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableDomain.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableDomain.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableDomain.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableDomain.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableDomain.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableDomain.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableDomain.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DomainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DomainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DomainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DomainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSchoolsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecialistSchools_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpecialistSchools")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SpecialistSchools_IdColumn As DataColumn
            Get
                Return Me.columnSpecialistSchools_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpecialistSchoolsRow
            Get
                Return CType(Me.Rows(index),SpecialistSchoolsRow)
            End Get
        End Property
        
        Public Event SpecialistSchoolsRowChanged As SpecialistSchoolsRowChangeEventHandler
        
        Public Event SpecialistSchoolsRowChanging As SpecialistSchoolsRowChangeEventHandler
        
        Public Event SpecialistSchoolsRowDeleted As SpecialistSchoolsRowChangeEventHandler
        
        Public Event SpecialistSchoolsRowDeleting As SpecialistSchoolsRowChangeEventHandler
        
        Public Overloads Sub AddSpecialistSchoolsRow(ByVal row As SpecialistSchoolsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpecialistSchoolsRow(ByVal parentCharacterRowByCharacter_SpecialistSchools As CharacterRow) As SpecialistSchoolsRow
            Dim rowSpecialistSchoolsRow As SpecialistSchoolsRow = CType(Me.NewRow,SpecialistSchoolsRow)
            rowSpecialistSchoolsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_SpecialistSchools(86)}
            Me.Rows.Add(rowSpecialistSchoolsRow)
            Return rowSpecialistSchoolsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpecialistSchoolsDataTable = CType(MyBase.Clone,SpecialistSchoolsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpecialistSchoolsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpecialistSchools_Id = Me.Columns("SpecialistSchools_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecialistSchools_Id = New DataColumn("SpecialistSchools_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpecialistSchools_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSpecialistSchools_Id}, true))
            Me.columnSpecialistSchools_Id.AutoIncrement = true
            Me.columnSpecialistSchools_Id.AllowDBNull = false
            Me.columnSpecialistSchools_Id.Unique = true
        End Sub
        
        Public Function NewSpecialistSchoolsRow() As SpecialistSchoolsRow
            Return CType(Me.NewRow,SpecialistSchoolsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpecialistSchoolsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpecialistSchoolsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpecialistSchoolsRowChangedEvent) Is Nothing) Then
                RaiseEvent SpecialistSchoolsRowChanged(Me, New SpecialistSchoolsRowChangeEvent(CType(e.Row,SpecialistSchoolsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpecialistSchoolsRowChangingEvent) Is Nothing) Then
                RaiseEvent SpecialistSchoolsRowChanging(Me, New SpecialistSchoolsRowChangeEvent(CType(e.Row,SpecialistSchoolsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpecialistSchoolsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpecialistSchoolsRowDeleted(Me, New SpecialistSchoolsRowChangeEvent(CType(e.Row,SpecialistSchoolsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpecialistSchoolsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpecialistSchoolsRowDeleting(Me, New SpecialistSchoolsRowChangeEvent(CType(e.Row,SpecialistSchoolsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpecialistSchoolsRow(ByVal row As SpecialistSchoolsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSchoolsRow
        Inherits DataRow
        
        Private tableSpecialistSchools As SpecialistSchoolsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpecialistSchools = CType(Me.Table,SpecialistSchoolsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_SpecialistSchools")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_SpecialistSchools"))
            End Set
        End Property
        
        Public Function GetSpecialistSchoolRows() As SpecialistSchoolRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SpecialistSchools_SpecialistSchool")),SpecialistSchoolRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSchoolsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpecialistSchoolsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpecialistSchoolsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpecialistSchoolsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSchoolDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSchoolName As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnClassName As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnSpecialistSchools_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpecialistSchool")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SchoolNameColumn As DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property SpecialistSchools_IdColumn As DataColumn
            Get
                Return Me.columnSpecialistSchools_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpecialistSchoolRow
            Get
                Return CType(Me.Rows(index),SpecialistSchoolRow)
            End Get
        End Property
        
        Public Event SpecialistSchoolRowChanged As SpecialistSchoolRowChangeEventHandler
        
        Public Event SpecialistSchoolRowChanging As SpecialistSchoolRowChangeEventHandler
        
        Public Event SpecialistSchoolRowDeleted As SpecialistSchoolRowChangeEventHandler
        
        Public Event SpecialistSchoolRowDeleting As SpecialistSchoolRowChangeEventHandler
        
        Public Overloads Sub AddSpecialistSchoolRow(ByVal row As SpecialistSchoolRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpecialistSchoolRow(ByVal SchoolName As String, ByVal Description As String, ByVal ClassName As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentSpecialistSchoolsRowBySpecialistSchools_SpecialistSchool As SpecialistSchoolsRow) As SpecialistSchoolRow
            Dim rowSpecialistSchoolRow As SpecialistSchoolRow = CType(Me.NewRow,SpecialistSchoolRow)
            rowSpecialistSchoolRow.ItemArray = New Object() {SchoolName, Description, ClassName, License, Sourcebook, Tags, PageNo, HelpPage, parentSpecialistSchoolsRowBySpecialistSchools_SpecialistSchool(0)}
            Me.Rows.Add(rowSpecialistSchoolRow)
            Return rowSpecialistSchoolRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpecialistSchoolDataTable = CType(MyBase.Clone,SpecialistSchoolDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpecialistSchoolDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSchoolName = Me.Columns("SchoolName")
            Me.columnDescription = Me.Columns("Description")
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnSpecialistSchools_Id = Me.Columns("SpecialistSchools_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSchoolName = New DataColumn("SchoolName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSchoolName)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnSpecialistSchools_Id = New DataColumn("SpecialistSchools_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpecialistSchools_Id)
        End Sub
        
        Public Function NewSpecialistSchoolRow() As SpecialistSchoolRow
            Return CType(Me.NewRow,SpecialistSchoolRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpecialistSchoolRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpecialistSchoolRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpecialistSchoolRowChangedEvent) Is Nothing) Then
                RaiseEvent SpecialistSchoolRowChanged(Me, New SpecialistSchoolRowChangeEvent(CType(e.Row,SpecialistSchoolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpecialistSchoolRowChangingEvent) Is Nothing) Then
                RaiseEvent SpecialistSchoolRowChanging(Me, New SpecialistSchoolRowChangeEvent(CType(e.Row,SpecialistSchoolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpecialistSchoolRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpecialistSchoolRowDeleted(Me, New SpecialistSchoolRowChangeEvent(CType(e.Row,SpecialistSchoolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpecialistSchoolRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpecialistSchoolRowDeleting(Me, New SpecialistSchoolRowChangeEvent(CType(e.Row,SpecialistSchoolRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpecialistSchoolRow(ByVal row As SpecialistSchoolRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSchoolRow
        Inherits DataRow
        
        Private tableSpecialistSchool As SpecialistSchoolDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpecialistSchool = CType(Me.Table,SpecialistSchoolDataTable)
        End Sub
        
        Public Property SchoolName As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSchool.SchoolNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSchool.SchoolNameColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSchool.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSchool.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSchool.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSchool.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSchool.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSchool.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSchool.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSchool.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSchool.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSchool.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSchool.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSchool.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableSpecialistSchool.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecialistSchool.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property SpecialistSchoolsRow As SpecialistSchoolsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SpecialistSchools_SpecialistSchool")),SpecialistSchoolsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SpecialistSchools_SpecialistSchool"))
            End Set
        End Property
        
        Public Function IsSchoolNameNull() As Boolean
            Return Me.IsNull(Me.tableSpecialistSchool.SchoolNameColumn)
        End Function
        
        Public Sub SetSchoolNameNull()
            Me(Me.tableSpecialistSchool.SchoolNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableSpecialistSchool.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableSpecialistSchool.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableSpecialistSchool.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableSpecialistSchool.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableSpecialistSchool.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableSpecialistSchool.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableSpecialistSchool.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableSpecialistSchool.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableSpecialistSchool.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableSpecialistSchool.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableSpecialistSchool.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableSpecialistSchool.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableSpecialistSchool.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableSpecialistSchool.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpecialistSchoolRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpecialistSchoolRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpecialistSchoolRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpecialistSchoolRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProhibitedSchoolsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProhibitedSchools_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("ProhibitedSchools")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ProhibitedSchools_IdColumn As DataColumn
            Get
                Return Me.columnProhibitedSchools_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProhibitedSchoolsRow
            Get
                Return CType(Me.Rows(index),ProhibitedSchoolsRow)
            End Get
        End Property
        
        Public Event ProhibitedSchoolsRowChanged As ProhibitedSchoolsRowChangeEventHandler
        
        Public Event ProhibitedSchoolsRowChanging As ProhibitedSchoolsRowChangeEventHandler
        
        Public Event ProhibitedSchoolsRowDeleted As ProhibitedSchoolsRowChangeEventHandler
        
        Public Event ProhibitedSchoolsRowDeleting As ProhibitedSchoolsRowChangeEventHandler
        
        Public Overloads Sub AddProhibitedSchoolsRow(ByVal row As ProhibitedSchoolsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProhibitedSchoolsRow(ByVal parentCharacterRowByCharacter_ProhibitedSchools As CharacterRow) As ProhibitedSchoolsRow
            Dim rowProhibitedSchoolsRow As ProhibitedSchoolsRow = CType(Me.NewRow,ProhibitedSchoolsRow)
            rowProhibitedSchoolsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_ProhibitedSchools(86)}
            Me.Rows.Add(rowProhibitedSchoolsRow)
            Return rowProhibitedSchoolsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProhibitedSchoolsDataTable = CType(MyBase.Clone,ProhibitedSchoolsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProhibitedSchoolsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnProhibitedSchools_Id = Me.Columns("ProhibitedSchools_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnProhibitedSchools_Id = New DataColumn("ProhibitedSchools_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnProhibitedSchools_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnProhibitedSchools_Id}, true))
            Me.columnProhibitedSchools_Id.AutoIncrement = true
            Me.columnProhibitedSchools_Id.AllowDBNull = false
            Me.columnProhibitedSchools_Id.Unique = true
        End Sub
        
        Public Function NewProhibitedSchoolsRow() As ProhibitedSchoolsRow
            Return CType(Me.NewRow,ProhibitedSchoolsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProhibitedSchoolsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProhibitedSchoolsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProhibitedSchoolsRowChangedEvent) Is Nothing) Then
                RaiseEvent ProhibitedSchoolsRowChanged(Me, New ProhibitedSchoolsRowChangeEvent(CType(e.Row,ProhibitedSchoolsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProhibitedSchoolsRowChangingEvent) Is Nothing) Then
                RaiseEvent ProhibitedSchoolsRowChanging(Me, New ProhibitedSchoolsRowChangeEvent(CType(e.Row,ProhibitedSchoolsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProhibitedSchoolsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProhibitedSchoolsRowDeleted(Me, New ProhibitedSchoolsRowChangeEvent(CType(e.Row,ProhibitedSchoolsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProhibitedSchoolsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProhibitedSchoolsRowDeleting(Me, New ProhibitedSchoolsRowChangeEvent(CType(e.Row,ProhibitedSchoolsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProhibitedSchoolsRow(ByVal row As ProhibitedSchoolsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProhibitedSchoolsRow
        Inherits DataRow
        
        Private tableProhibitedSchools As ProhibitedSchoolsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProhibitedSchools = CType(Me.Table,ProhibitedSchoolsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_ProhibitedSchools")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_ProhibitedSchools"))
            End Set
        End Property
        
        Public Function GetProhibitedSchoolRows() As ProhibitedSchoolRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ProhibitedSchools_ProhibitedSchool")),ProhibitedSchoolRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProhibitedSchoolsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProhibitedSchoolsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProhibitedSchoolsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProhibitedSchoolsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProhibitedSchoolDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSchoolName As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnClassName As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnProhibitedSchools_Id As DataColumn
        
        Public Sub New()
            MyBase.New("ProhibitedSchool")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SchoolNameColumn As DataColumn
            Get
                Return Me.columnSchoolName
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property ProhibitedSchools_IdColumn As DataColumn
            Get
                Return Me.columnProhibitedSchools_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProhibitedSchoolRow
            Get
                Return CType(Me.Rows(index),ProhibitedSchoolRow)
            End Get
        End Property
        
        Public Event ProhibitedSchoolRowChanged As ProhibitedSchoolRowChangeEventHandler
        
        Public Event ProhibitedSchoolRowChanging As ProhibitedSchoolRowChangeEventHandler
        
        Public Event ProhibitedSchoolRowDeleted As ProhibitedSchoolRowChangeEventHandler
        
        Public Event ProhibitedSchoolRowDeleting As ProhibitedSchoolRowChangeEventHandler
        
        Public Overloads Sub AddProhibitedSchoolRow(ByVal row As ProhibitedSchoolRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProhibitedSchoolRow(ByVal SchoolName As String, ByVal Description As String, ByVal ClassName As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentProhibitedSchoolsRowByProhibitedSchools_ProhibitedSchool As ProhibitedSchoolsRow) As ProhibitedSchoolRow
            Dim rowProhibitedSchoolRow As ProhibitedSchoolRow = CType(Me.NewRow,ProhibitedSchoolRow)
            rowProhibitedSchoolRow.ItemArray = New Object() {SchoolName, Description, ClassName, License, Sourcebook, Tags, PageNo, HelpPage, parentProhibitedSchoolsRowByProhibitedSchools_ProhibitedSchool(0)}
            Me.Rows.Add(rowProhibitedSchoolRow)
            Return rowProhibitedSchoolRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProhibitedSchoolDataTable = CType(MyBase.Clone,ProhibitedSchoolDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProhibitedSchoolDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSchoolName = Me.Columns("SchoolName")
            Me.columnDescription = Me.Columns("Description")
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnProhibitedSchools_Id = Me.Columns("ProhibitedSchools_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSchoolName = New DataColumn("SchoolName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSchoolName)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnProhibitedSchools_Id = New DataColumn("ProhibitedSchools_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnProhibitedSchools_Id)
        End Sub
        
        Public Function NewProhibitedSchoolRow() As ProhibitedSchoolRow
            Return CType(Me.NewRow,ProhibitedSchoolRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProhibitedSchoolRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProhibitedSchoolRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProhibitedSchoolRowChangedEvent) Is Nothing) Then
                RaiseEvent ProhibitedSchoolRowChanged(Me, New ProhibitedSchoolRowChangeEvent(CType(e.Row,ProhibitedSchoolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProhibitedSchoolRowChangingEvent) Is Nothing) Then
                RaiseEvent ProhibitedSchoolRowChanging(Me, New ProhibitedSchoolRowChangeEvent(CType(e.Row,ProhibitedSchoolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProhibitedSchoolRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProhibitedSchoolRowDeleted(Me, New ProhibitedSchoolRowChangeEvent(CType(e.Row,ProhibitedSchoolRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProhibitedSchoolRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProhibitedSchoolRowDeleting(Me, New ProhibitedSchoolRowChangeEvent(CType(e.Row,ProhibitedSchoolRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProhibitedSchoolRow(ByVal row As ProhibitedSchoolRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProhibitedSchoolRow
        Inherits DataRow
        
        Private tableProhibitedSchool As ProhibitedSchoolDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProhibitedSchool = CType(Me.Table,ProhibitedSchoolDataTable)
        End Sub
        
        Public Property SchoolName As String
            Get
                Try 
                    Return CType(Me(Me.tableProhibitedSchool.SchoolNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProhibitedSchool.SchoolNameColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableProhibitedSchool.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProhibitedSchool.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tableProhibitedSchool.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProhibitedSchool.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableProhibitedSchool.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProhibitedSchool.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableProhibitedSchool.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProhibitedSchool.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableProhibitedSchool.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProhibitedSchool.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableProhibitedSchool.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProhibitedSchool.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableProhibitedSchool.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProhibitedSchool.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property ProhibitedSchoolsRow As ProhibitedSchoolsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ProhibitedSchools_ProhibitedSchool")),ProhibitedSchoolsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ProhibitedSchools_ProhibitedSchool"))
            End Set
        End Property
        
        Public Function IsSchoolNameNull() As Boolean
            Return Me.IsNull(Me.tableProhibitedSchool.SchoolNameColumn)
        End Function
        
        Public Sub SetSchoolNameNull()
            Me(Me.tableProhibitedSchool.SchoolNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableProhibitedSchool.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableProhibitedSchool.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableProhibitedSchool.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableProhibitedSchool.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableProhibitedSchool.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableProhibitedSchool.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableProhibitedSchool.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableProhibitedSchool.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableProhibitedSchool.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableProhibitedSchool.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableProhibitedSchool.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableProhibitedSchool.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableProhibitedSchool.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableProhibitedSchool.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProhibitedSchoolRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProhibitedSchoolRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProhibitedSchoolRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProhibitedSchoolRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpells_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Spells")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Spells_IdColumn As DataColumn
            Get
                Return Me.columnSpells_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpellsRow
            Get
                Return CType(Me.Rows(index),SpellsRow)
            End Get
        End Property
        
        Public Event SpellsRowChanged As SpellsRowChangeEventHandler
        
        Public Event SpellsRowChanging As SpellsRowChangeEventHandler
        
        Public Event SpellsRowDeleted As SpellsRowChangeEventHandler
        
        Public Event SpellsRowDeleting As SpellsRowChangeEventHandler
        
        Public Overloads Sub AddSpellsRow(ByVal row As SpellsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpellsRow(ByVal parentCharacterRowByCharacter_Spells As CharacterRow) As SpellsRow
            Dim rowSpellsRow As SpellsRow = CType(Me.NewRow,SpellsRow)
            rowSpellsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Spells(86)}
            Me.Rows.Add(rowSpellsRow)
            Return rowSpellsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpellsDataTable = CType(MyBase.Clone,SpellsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpellsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpells_Id = Me.Columns("Spells_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpells_Id = New DataColumn("Spells_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpells_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSpells_Id}, true))
            Me.columnSpells_Id.AutoIncrement = true
            Me.columnSpells_Id.AllowDBNull = false
            Me.columnSpells_Id.Unique = true
        End Sub
        
        Public Function NewSpellsRow() As SpellsRow
            Return CType(Me.NewRow,SpellsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpellsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellsRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellsRowChanged(Me, New SpellsRowChangeEvent(CType(e.Row,SpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellsRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellsRowChanging(Me, New SpellsRowChangeEvent(CType(e.Row,SpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellsRowDeleted(Me, New SpellsRowChangeEvent(CType(e.Row,SpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellsRowDeleting(Me, New SpellsRowChangeEvent(CType(e.Row,SpellsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpellsRow(ByVal row As SpellsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsRow
        Inherits DataRow
        
        Private tableSpells As SpellsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpells = CType(Me.Table,SpellsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Spells")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Spells"))
            End Set
        End Property
        
        Public Function GetClassSpellsRows() As ClassSpellsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Spells_ClassSpells")),ClassSpellsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpellsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpellsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpellsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassSpellsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnClassName As DataColumn
        
        Private columnSpellLevel As DataColumn
        
        Private columnClassSpells_Id As DataColumn
        
        Private columnSpells_Id As DataColumn
        
        Public Sub New()
            MyBase.New("ClassSpells")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property SpellLevelColumn As DataColumn
            Get
                Return Me.columnSpellLevel
            End Get
        End Property
        
        Public ReadOnly Property ClassSpells_IdColumn As DataColumn
            Get
                Return Me.columnClassSpells_Id
            End Get
        End Property
        
        Public ReadOnly Property Spells_IdColumn As DataColumn
            Get
                Return Me.columnSpells_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClassSpellsRow
            Get
                Return CType(Me.Rows(index),ClassSpellsRow)
            End Get
        End Property
        
        Public Event ClassSpellsRowChanged As ClassSpellsRowChangeEventHandler
        
        Public Event ClassSpellsRowChanging As ClassSpellsRowChangeEventHandler
        
        Public Event ClassSpellsRowDeleted As ClassSpellsRowChangeEventHandler
        
        Public Event ClassSpellsRowDeleting As ClassSpellsRowChangeEventHandler
        
        Public Overloads Sub AddClassSpellsRow(ByVal row As ClassSpellsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClassSpellsRow(ByVal ClassName As String, ByVal SpellLevel As String, ByVal parentSpellsRowBySpells_ClassSpells As SpellsRow) As ClassSpellsRow
            Dim rowClassSpellsRow As ClassSpellsRow = CType(Me.NewRow,ClassSpellsRow)
            rowClassSpellsRow.ItemArray = New Object() {ClassName, SpellLevel, Nothing, parentSpellsRowBySpells_ClassSpells(0)}
            Me.Rows.Add(rowClassSpellsRow)
            Return rowClassSpellsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClassSpellsDataTable = CType(MyBase.Clone,ClassSpellsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClassSpellsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnSpellLevel = Me.Columns("SpellLevel")
            Me.columnClassSpells_Id = Me.Columns("ClassSpells_Id")
            Me.columnSpells_Id = Me.Columns("Spells_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnSpellLevel = New DataColumn("SpellLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellLevel)
            Me.columnClassSpells_Id = New DataColumn("ClassSpells_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClassSpells_Id)
            Me.columnSpells_Id = New DataColumn("Spells_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpells_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnClassSpells_Id}, true))
            Me.columnClassSpells_Id.AutoIncrement = true
            Me.columnClassSpells_Id.AllowDBNull = false
            Me.columnClassSpells_Id.Unique = true
        End Sub
        
        Public Function NewClassSpellsRow() As ClassSpellsRow
            Return CType(Me.NewRow,ClassSpellsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClassSpellsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClassSpellsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClassSpellsRowChangedEvent) Is Nothing) Then
                RaiseEvent ClassSpellsRowChanged(Me, New ClassSpellsRowChangeEvent(CType(e.Row,ClassSpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClassSpellsRowChangingEvent) Is Nothing) Then
                RaiseEvent ClassSpellsRowChanging(Me, New ClassSpellsRowChangeEvent(CType(e.Row,ClassSpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClassSpellsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClassSpellsRowDeleted(Me, New ClassSpellsRowChangeEvent(CType(e.Row,ClassSpellsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClassSpellsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClassSpellsRowDeleting(Me, New ClassSpellsRowChangeEvent(CType(e.Row,ClassSpellsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClassSpellsRow(ByVal row As ClassSpellsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassSpellsRow
        Inherits DataRow
        
        Private tableClassSpells As ClassSpellsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClassSpells = CType(Me.Table,ClassSpellsDataTable)
        End Sub
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSpells.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSpells.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property SpellLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableClassSpells.SpellLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassSpells.SpellLevelColumn) = value
            End Set
        End Property
        
        Public Property SpellsRow As SpellsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Spells_ClassSpells")),SpellsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Spells_ClassSpells"))
            End Set
        End Property
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableClassSpells.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableClassSpells.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellLevelNull() As Boolean
            Return Me.IsNull(Me.tableClassSpells.SpellLevelColumn)
        End Function
        
        Public Sub SetSpellLevelNull()
            Me(Me.tableClassSpells.SpellLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSpellRows() As SpellRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ClassSpells_Spell")),SpellRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassSpellsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClassSpellsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClassSpellsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClassSpellsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpellName As DataColumn
        
        Private columnSchool As DataColumn
        
        Private columnSubschool As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnSourceType As DataColumn
        
        Private columnDescriptors As DataColumn
        
        Private columnComponents As DataColumn
        
        Private columnTime As DataColumn
        
        Private columnRange As DataColumn
        
        Private columnTarget As DataColumn
        
        Private columnDuration As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnSavingThrow As DataColumn
        
        Private columnSpellResistance As DataColumn
        
        Private columnMaterialCost As DataColumn
        
        Private columnXPCost As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnClassSpells_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Spell")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SpellNameColumn As DataColumn
            Get
                Return Me.columnSpellName
            End Get
        End Property
        
        Public ReadOnly Property SchoolColumn As DataColumn
            Get
                Return Me.columnSchool
            End Get
        End Property
        
        Public ReadOnly Property SubschoolColumn As DataColumn
            Get
                Return Me.columnSubschool
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property SourceTypeColumn As DataColumn
            Get
                Return Me.columnSourceType
            End Get
        End Property
        
        Public ReadOnly Property DescriptorsColumn As DataColumn
            Get
                Return Me.columnDescriptors
            End Get
        End Property
        
        Public ReadOnly Property ComponentsColumn As DataColumn
            Get
                Return Me.columnComponents
            End Get
        End Property
        
        Public ReadOnly Property TimeColumn As DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        Public ReadOnly Property RangeColumn As DataColumn
            Get
                Return Me.columnRange
            End Get
        End Property
        
        Public ReadOnly Property TargetColumn As DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        Public ReadOnly Property DurationColumn As DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property SavingThrowColumn As DataColumn
            Get
                Return Me.columnSavingThrow
            End Get
        End Property
        
        Public ReadOnly Property SpellResistanceColumn As DataColumn
            Get
                Return Me.columnSpellResistance
            End Get
        End Property
        
        Public ReadOnly Property MaterialCostColumn As DataColumn
            Get
                Return Me.columnMaterialCost
            End Get
        End Property
        
        Public ReadOnly Property XPCostColumn As DataColumn
            Get
                Return Me.columnXPCost
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property ClassSpells_IdColumn As DataColumn
            Get
                Return Me.columnClassSpells_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpellRow
            Get
                Return CType(Me.Rows(index),SpellRow)
            End Get
        End Property
        
        Public Event SpellRowChanged As SpellRowChangeEventHandler
        
        Public Event SpellRowChanging As SpellRowChangeEventHandler
        
        Public Event SpellRowDeleted As SpellRowChangeEventHandler
        
        Public Event SpellRowDeleting As SpellRowChangeEventHandler
        
        Public Overloads Sub AddSpellRow(ByVal row As SpellRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpellRow( _
                    ByVal SpellName As String,  _
                    ByVal School As String,  _
                    ByVal Subschool As String,  _
                    ByVal Source As String,  _
                    ByVal SourceType As String,  _
                    ByVal Descriptors As String,  _
                    ByVal Components As String,  _
                    ByVal Time As String,  _
                    ByVal Range As String,  _
                    ByVal Target As String,  _
                    ByVal Duration As String,  _
                    ByVal Description As String,  _
                    ByVal SavingThrow As String,  _
                    ByVal SpellResistance As String,  _
                    ByVal MaterialCost As String,  _
                    ByVal XPCost As String,  _
                    ByVal License As String,  _
                    ByVal Sourcebook As String,  _
                    ByVal Tags As String,  _
                    ByVal PageNo As String,  _
                    ByVal HelpPage As String,  _
                    ByVal parentClassSpellsRowByClassSpells_Spell As ClassSpellsRow) As SpellRow
            Dim rowSpellRow As SpellRow = CType(Me.NewRow,SpellRow)
            rowSpellRow.ItemArray = New Object() {SpellName, School, Subschool, Source, SourceType, Descriptors, Components, Time, Range, Target, Duration, Description, SavingThrow, SpellResistance, MaterialCost, XPCost, License, Sourcebook, Tags, PageNo, HelpPage, parentClassSpellsRowByClassSpells_Spell(2)}
            Me.Rows.Add(rowSpellRow)
            Return rowSpellRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpellDataTable = CType(MyBase.Clone,SpellDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpellDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpellName = Me.Columns("SpellName")
            Me.columnSchool = Me.Columns("School")
            Me.columnSubschool = Me.Columns("Subschool")
            Me.columnSource = Me.Columns("Source")
            Me.columnSourceType = Me.Columns("SourceType")
            Me.columnDescriptors = Me.Columns("Descriptors")
            Me.columnComponents = Me.Columns("Components")
            Me.columnTime = Me.Columns("Time")
            Me.columnRange = Me.Columns("Range")
            Me.columnTarget = Me.Columns("Target")
            Me.columnDuration = Me.Columns("Duration")
            Me.columnDescription = Me.Columns("Description")
            Me.columnSavingThrow = Me.Columns("SavingThrow")
            Me.columnSpellResistance = Me.Columns("SpellResistance")
            Me.columnMaterialCost = Me.Columns("MaterialCost")
            Me.columnXPCost = Me.Columns("XPCost")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnClassSpells_Id = Me.Columns("ClassSpells_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpellName = New DataColumn("SpellName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellName)
            Me.columnSchool = New DataColumn("School", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSchool)
            Me.columnSubschool = New DataColumn("Subschool", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubschool)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnSourceType = New DataColumn("SourceType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourceType)
            Me.columnDescriptors = New DataColumn("Descriptors", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptors)
            Me.columnComponents = New DataColumn("Components", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComponents)
            Me.columnTime = New DataColumn("Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTime)
            Me.columnRange = New DataColumn("Range", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRange)
            Me.columnTarget = New DataColumn("Target", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarget)
            Me.columnDuration = New DataColumn("Duration", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuration)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnSavingThrow = New DataColumn("SavingThrow", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSavingThrow)
            Me.columnSpellResistance = New DataColumn("SpellResistance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellResistance)
            Me.columnMaterialCost = New DataColumn("MaterialCost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaterialCost)
            Me.columnXPCost = New DataColumn("XPCost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnXPCost)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnClassSpells_Id = New DataColumn("ClassSpells_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClassSpells_Id)
        End Sub
        
        Public Function NewSpellRow() As SpellRow
            Return CType(Me.NewRow,SpellRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpellRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellRowChanged(Me, New SpellRowChangeEvent(CType(e.Row,SpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellRowChanging(Me, New SpellRowChangeEvent(CType(e.Row,SpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellRowDeleted(Me, New SpellRowChangeEvent(CType(e.Row,SpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellRowDeleting(Me, New SpellRowChangeEvent(CType(e.Row,SpellRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpellRow(ByVal row As SpellRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellRow
        Inherits DataRow
        
        Private tableSpell As SpellDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpell = CType(Me.Table,SpellDataTable)
        End Sub
        
        Public Property SpellName As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.SpellNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.SpellNameColumn) = value
            End Set
        End Property
        
        Public Property School As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.SchoolColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.SchoolColumn) = value
            End Set
        End Property
        
        Public Property Subschool As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.SubschoolColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.SubschoolColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.SourceColumn) = value
            End Set
        End Property
        
        Public Property SourceType As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.SourceTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.SourceTypeColumn) = value
            End Set
        End Property
        
        Public Property Descriptors As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.DescriptorsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.DescriptorsColumn) = value
            End Set
        End Property
        
        Public Property Components As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.ComponentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.ComponentsColumn) = value
            End Set
        End Property
        
        Public Property Time As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.TimeColumn) = value
            End Set
        End Property
        
        Public Property Range As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.RangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.RangeColumn) = value
            End Set
        End Property
        
        Public Property Target As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.TargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.TargetColumn) = value
            End Set
        End Property
        
        Public Property Duration As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.DurationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.DurationColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property SavingThrow As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.SavingThrowColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.SavingThrowColumn) = value
            End Set
        End Property
        
        Public Property SpellResistance As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.SpellResistanceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.SpellResistanceColumn) = value
            End Set
        End Property
        
        Public Property MaterialCost As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.MaterialCostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.MaterialCostColumn) = value
            End Set
        End Property
        
        Public Property XPCost As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.XPCostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.XPCostColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableSpell.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpell.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property ClassSpellsRow As ClassSpellsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ClassSpells_Spell")),ClassSpellsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ClassSpells_Spell"))
            End Set
        End Property
        
        Public Function IsSpellNameNull() As Boolean
            Return Me.IsNull(Me.tableSpell.SpellNameColumn)
        End Function
        
        Public Sub SetSpellNameNull()
            Me(Me.tableSpell.SpellNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSchoolNull() As Boolean
            Return Me.IsNull(Me.tableSpell.SchoolColumn)
        End Function
        
        Public Sub SetSchoolNull()
            Me(Me.tableSpell.SchoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubschoolNull() As Boolean
            Return Me.IsNull(Me.tableSpell.SubschoolColumn)
        End Function
        
        Public Sub SetSubschoolNull()
            Me(Me.tableSpell.SubschoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableSpell.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableSpell.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceTypeNull() As Boolean
            Return Me.IsNull(Me.tableSpell.SourceTypeColumn)
        End Function
        
        Public Sub SetSourceTypeNull()
            Me(Me.tableSpell.SourceTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptorsNull() As Boolean
            Return Me.IsNull(Me.tableSpell.DescriptorsColumn)
        End Function
        
        Public Sub SetDescriptorsNull()
            Me(Me.tableSpell.DescriptorsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsComponentsNull() As Boolean
            Return Me.IsNull(Me.tableSpell.ComponentsColumn)
        End Function
        
        Public Sub SetComponentsNull()
            Me(Me.tableSpell.ComponentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeNull() As Boolean
            Return Me.IsNull(Me.tableSpell.TimeColumn)
        End Function
        
        Public Sub SetTimeNull()
            Me(Me.tableSpell.TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRangeNull() As Boolean
            Return Me.IsNull(Me.tableSpell.RangeColumn)
        End Function
        
        Public Sub SetRangeNull()
            Me(Me.tableSpell.RangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableSpell.TargetColumn)
        End Function
        
        Public Sub SetTargetNull()
            Me(Me.tableSpell.TargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDurationNull() As Boolean
            Return Me.IsNull(Me.tableSpell.DurationColumn)
        End Function
        
        Public Sub SetDurationNull()
            Me(Me.tableSpell.DurationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableSpell.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableSpell.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSavingThrowNull() As Boolean
            Return Me.IsNull(Me.tableSpell.SavingThrowColumn)
        End Function
        
        Public Sub SetSavingThrowNull()
            Me(Me.tableSpell.SavingThrowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellResistanceNull() As Boolean
            Return Me.IsNull(Me.tableSpell.SpellResistanceColumn)
        End Function
        
        Public Sub SetSpellResistanceNull()
            Me(Me.tableSpell.SpellResistanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaterialCostNull() As Boolean
            Return Me.IsNull(Me.tableSpell.MaterialCostColumn)
        End Function
        
        Public Sub SetMaterialCostNull()
            Me(Me.tableSpell.MaterialCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXPCostNull() As Boolean
            Return Me.IsNull(Me.tableSpell.XPCostColumn)
        End Function
        
        Public Sub SetXPCostNull()
            Me(Me.tableSpell.XPCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableSpell.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableSpell.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableSpell.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableSpell.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableSpell.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableSpell.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableSpell.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableSpell.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableSpell.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableSpell.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpellRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpellRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpellRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManifesterInfoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPowerPoints As DataColumn
        
        Private columnManifesterInfo_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("ManifesterInfo")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PowerPointsColumn As DataColumn
            Get
                Return Me.columnPowerPoints
            End Get
        End Property
        
        Public ReadOnly Property ManifesterInfo_IdColumn As DataColumn
            Get
                Return Me.columnManifesterInfo_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManifesterInfoRow
            Get
                Return CType(Me.Rows(index),ManifesterInfoRow)
            End Get
        End Property
        
        Public Event ManifesterInfoRowChanged As ManifesterInfoRowChangeEventHandler
        
        Public Event ManifesterInfoRowChanging As ManifesterInfoRowChangeEventHandler
        
        Public Event ManifesterInfoRowDeleted As ManifesterInfoRowChangeEventHandler
        
        Public Event ManifesterInfoRowDeleting As ManifesterInfoRowChangeEventHandler
        
        Public Overloads Sub AddManifesterInfoRow(ByVal row As ManifesterInfoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddManifesterInfoRow(ByVal PowerPoints As String, ByVal parentCharacterRowByCharacter_ManifesterInfo As CharacterRow) As ManifesterInfoRow
            Dim rowManifesterInfoRow As ManifesterInfoRow = CType(Me.NewRow,ManifesterInfoRow)
            rowManifesterInfoRow.ItemArray = New Object() {PowerPoints, Nothing, parentCharacterRowByCharacter_ManifesterInfo(86)}
            Me.Rows.Add(rowManifesterInfoRow)
            Return rowManifesterInfoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ManifesterInfoDataTable = CType(MyBase.Clone,ManifesterInfoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ManifesterInfoDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPowerPoints = Me.Columns("PowerPoints")
            Me.columnManifesterInfo_Id = Me.Columns("ManifesterInfo_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPowerPoints = New DataColumn("PowerPoints", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPowerPoints)
            Me.columnManifesterInfo_Id = New DataColumn("ManifesterInfo_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnManifesterInfo_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnManifesterInfo_Id}, true))
            Me.columnManifesterInfo_Id.AutoIncrement = true
            Me.columnManifesterInfo_Id.AllowDBNull = false
            Me.columnManifesterInfo_Id.Unique = true
        End Sub
        
        Public Function NewManifesterInfoRow() As ManifesterInfoRow
            Return CType(Me.NewRow,ManifesterInfoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ManifesterInfoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManifesterInfoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManifesterInfoRowChangedEvent) Is Nothing) Then
                RaiseEvent ManifesterInfoRowChanged(Me, New ManifesterInfoRowChangeEvent(CType(e.Row,ManifesterInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManifesterInfoRowChangingEvent) Is Nothing) Then
                RaiseEvent ManifesterInfoRowChanging(Me, New ManifesterInfoRowChangeEvent(CType(e.Row,ManifesterInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManifesterInfoRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManifesterInfoRowDeleted(Me, New ManifesterInfoRowChangeEvent(CType(e.Row,ManifesterInfoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManifesterInfoRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManifesterInfoRowDeleting(Me, New ManifesterInfoRowChangeEvent(CType(e.Row,ManifesterInfoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveManifesterInfoRow(ByVal row As ManifesterInfoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManifesterInfoRow
        Inherits DataRow
        
        Private tableManifesterInfo As ManifesterInfoDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableManifesterInfo = CType(Me.Table,ManifesterInfoDataTable)
        End Sub
        
        Public Property PowerPoints As String
            Get
                Try 
                    Return CType(Me(Me.tableManifesterInfo.PowerPointsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManifesterInfo.PowerPointsColumn) = value
            End Set
        End Property
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_ManifesterInfo")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_ManifesterInfo"))
            End Set
        End Property
        
        Public Function IsPowerPointsNull() As Boolean
            Return Me.IsNull(Me.tableManifesterInfo.PowerPointsColumn)
        End Function
        
        Public Sub SetPowerPointsNull()
            Me(Me.tableManifesterInfo.PowerPointsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetManifesterClassRows() As ManifesterClassRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ManifesterInfo_ManifesterClass")),ManifesterClassRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManifesterInfoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ManifesterInfoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ManifesterInfoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ManifesterInfoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManifesterClassDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnClassName As DataColumn
        
        Private columnManifesterLevel As DataColumn
        
        Private columnMaxPowerLevel As DataColumn
        
        Private columnManifesterNotes As DataColumn
        
        Private columnManifesterClass_Id As DataColumn
        
        Private columnManifesterInfo_Id As DataColumn
        
        Public Sub New()
            MyBase.New("ManifesterClass")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property ManifesterLevelColumn As DataColumn
            Get
                Return Me.columnManifesterLevel
            End Get
        End Property
        
        Public ReadOnly Property MaxPowerLevelColumn As DataColumn
            Get
                Return Me.columnMaxPowerLevel
            End Get
        End Property
        
        Public ReadOnly Property ManifesterNotesColumn As DataColumn
            Get
                Return Me.columnManifesterNotes
            End Get
        End Property
        
        Public ReadOnly Property ManifesterClass_IdColumn As DataColumn
            Get
                Return Me.columnManifesterClass_Id
            End Get
        End Property
        
        Public ReadOnly Property ManifesterInfo_IdColumn As DataColumn
            Get
                Return Me.columnManifesterInfo_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManifesterClassRow
            Get
                Return CType(Me.Rows(index),ManifesterClassRow)
            End Get
        End Property
        
        Public Event ManifesterClassRowChanged As ManifesterClassRowChangeEventHandler
        
        Public Event ManifesterClassRowChanging As ManifesterClassRowChangeEventHandler
        
        Public Event ManifesterClassRowDeleted As ManifesterClassRowChangeEventHandler
        
        Public Event ManifesterClassRowDeleting As ManifesterClassRowChangeEventHandler
        
        Public Overloads Sub AddManifesterClassRow(ByVal row As ManifesterClassRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddManifesterClassRow(ByVal ClassName As String, ByVal ManifesterLevel As String, ByVal MaxPowerLevel As String, ByVal ManifesterNotes As String, ByVal parentManifesterInfoRowByManifesterInfo_ManifesterClass As ManifesterInfoRow) As ManifesterClassRow
            Dim rowManifesterClassRow As ManifesterClassRow = CType(Me.NewRow,ManifesterClassRow)
            rowManifesterClassRow.ItemArray = New Object() {ClassName, ManifesterLevel, MaxPowerLevel, ManifesterNotes, Nothing, parentManifesterInfoRowByManifesterInfo_ManifesterClass(1)}
            Me.Rows.Add(rowManifesterClassRow)
            Return rowManifesterClassRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ManifesterClassDataTable = CType(MyBase.Clone,ManifesterClassDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ManifesterClassDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnManifesterLevel = Me.Columns("ManifesterLevel")
            Me.columnMaxPowerLevel = Me.Columns("MaxPowerLevel")
            Me.columnManifesterNotes = Me.Columns("ManifesterNotes")
            Me.columnManifesterClass_Id = Me.Columns("ManifesterClass_Id")
            Me.columnManifesterInfo_Id = Me.Columns("ManifesterInfo_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnManifesterLevel = New DataColumn("ManifesterLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManifesterLevel)
            Me.columnMaxPowerLevel = New DataColumn("MaxPowerLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxPowerLevel)
            Me.columnManifesterNotes = New DataColumn("ManifesterNotes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManifesterNotes)
            Me.columnManifesterClass_Id = New DataColumn("ManifesterClass_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnManifesterClass_Id)
            Me.columnManifesterInfo_Id = New DataColumn("ManifesterInfo_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnManifesterInfo_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnManifesterClass_Id}, true))
            Me.columnManifesterClass_Id.AutoIncrement = true
            Me.columnManifesterClass_Id.AllowDBNull = false
            Me.columnManifesterClass_Id.Unique = true
        End Sub
        
        Public Function NewManifesterClassRow() As ManifesterClassRow
            Return CType(Me.NewRow,ManifesterClassRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ManifesterClassRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManifesterClassRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManifesterClassRowChangedEvent) Is Nothing) Then
                RaiseEvent ManifesterClassRowChanged(Me, New ManifesterClassRowChangeEvent(CType(e.Row,ManifesterClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManifesterClassRowChangingEvent) Is Nothing) Then
                RaiseEvent ManifesterClassRowChanging(Me, New ManifesterClassRowChangeEvent(CType(e.Row,ManifesterClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManifesterClassRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManifesterClassRowDeleted(Me, New ManifesterClassRowChangeEvent(CType(e.Row,ManifesterClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManifesterClassRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManifesterClassRowDeleting(Me, New ManifesterClassRowChangeEvent(CType(e.Row,ManifesterClassRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveManifesterClassRow(ByVal row As ManifesterClassRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManifesterClassRow
        Inherits DataRow
        
        Private tableManifesterClass As ManifesterClassDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableManifesterClass = CType(Me.Table,ManifesterClassDataTable)
        End Sub
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tableManifesterClass.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManifesterClass.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property ManifesterLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableManifesterClass.ManifesterLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManifesterClass.ManifesterLevelColumn) = value
            End Set
        End Property
        
        Public Property MaxPowerLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableManifesterClass.MaxPowerLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManifesterClass.MaxPowerLevelColumn) = value
            End Set
        End Property
        
        Public Property ManifesterNotes As String
            Get
                Try 
                    Return CType(Me(Me.tableManifesterClass.ManifesterNotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManifesterClass.ManifesterNotesColumn) = value
            End Set
        End Property
        
        Public Property ManifesterInfoRow As ManifesterInfoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ManifesterInfo_ManifesterClass")),ManifesterInfoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ManifesterInfo_ManifesterClass"))
            End Set
        End Property
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableManifesterClass.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableManifesterClass.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsManifesterLevelNull() As Boolean
            Return Me.IsNull(Me.tableManifesterClass.ManifesterLevelColumn)
        End Function
        
        Public Sub SetManifesterLevelNull()
            Me(Me.tableManifesterClass.ManifesterLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxPowerLevelNull() As Boolean
            Return Me.IsNull(Me.tableManifesterClass.MaxPowerLevelColumn)
        End Function
        
        Public Sub SetMaxPowerLevelNull()
            Me(Me.tableManifesterClass.MaxPowerLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsManifesterNotesNull() As Boolean
            Return Me.IsNull(Me.tableManifesterClass.ManifesterNotesColumn)
        End Function
        
        Public Sub SetManifesterNotesNull()
            Me(Me.tableManifesterClass.ManifesterNotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPowerSavesRows() As PowerSavesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ManifesterClass_PowerSaves")),PowerSavesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ManifesterClassRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ManifesterClassRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ManifesterClassRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ManifesterClassRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowerSavesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPS1 As DataColumn
        
        Private columnPS2 As DataColumn
        
        Private columnPS3 As DataColumn
        
        Private columnPS4 As DataColumn
        
        Private columnPS5 As DataColumn
        
        Private columnPS6 As DataColumn
        
        Private columnPS7 As DataColumn
        
        Private columnPS8 As DataColumn
        
        Private columnPS9 As DataColumn
        
        Private columnManifesterClass_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PowerSaves")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PS1Column As DataColumn
            Get
                Return Me.columnPS1
            End Get
        End Property
        
        Public ReadOnly Property PS2Column As DataColumn
            Get
                Return Me.columnPS2
            End Get
        End Property
        
        Public ReadOnly Property PS3Column As DataColumn
            Get
                Return Me.columnPS3
            End Get
        End Property
        
        Public ReadOnly Property PS4Column As DataColumn
            Get
                Return Me.columnPS4
            End Get
        End Property
        
        Public ReadOnly Property PS5Column As DataColumn
            Get
                Return Me.columnPS5
            End Get
        End Property
        
        Public ReadOnly Property PS6Column As DataColumn
            Get
                Return Me.columnPS6
            End Get
        End Property
        
        Public ReadOnly Property PS7Column As DataColumn
            Get
                Return Me.columnPS7
            End Get
        End Property
        
        Public ReadOnly Property PS8Column As DataColumn
            Get
                Return Me.columnPS8
            End Get
        End Property
        
        Public ReadOnly Property PS9Column As DataColumn
            Get
                Return Me.columnPS9
            End Get
        End Property
        
        Public ReadOnly Property ManifesterClass_IdColumn As DataColumn
            Get
                Return Me.columnManifesterClass_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PowerSavesRow
            Get
                Return CType(Me.Rows(index),PowerSavesRow)
            End Get
        End Property
        
        Public Event PowerSavesRowChanged As PowerSavesRowChangeEventHandler
        
        Public Event PowerSavesRowChanging As PowerSavesRowChangeEventHandler
        
        Public Event PowerSavesRowDeleted As PowerSavesRowChangeEventHandler
        
        Public Event PowerSavesRowDeleting As PowerSavesRowChangeEventHandler
        
        Public Overloads Sub AddPowerSavesRow(ByVal row As PowerSavesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPowerSavesRow(ByVal PS1 As String, ByVal PS2 As String, ByVal PS3 As String, ByVal PS4 As String, ByVal PS5 As String, ByVal PS6 As String, ByVal PS7 As String, ByVal PS8 As String, ByVal PS9 As String, ByVal parentManifesterClassRowByManifesterClass_PowerSaves As ManifesterClassRow) As PowerSavesRow
            Dim rowPowerSavesRow As PowerSavesRow = CType(Me.NewRow,PowerSavesRow)
            rowPowerSavesRow.ItemArray = New Object() {PS1, PS2, PS3, PS4, PS5, PS6, PS7, PS8, PS9, parentManifesterClassRowByManifesterClass_PowerSaves(4)}
            Me.Rows.Add(rowPowerSavesRow)
            Return rowPowerSavesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PowerSavesDataTable = CType(MyBase.Clone,PowerSavesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PowerSavesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPS1 = Me.Columns("PS1")
            Me.columnPS2 = Me.Columns("PS2")
            Me.columnPS3 = Me.Columns("PS3")
            Me.columnPS4 = Me.Columns("PS4")
            Me.columnPS5 = Me.Columns("PS5")
            Me.columnPS6 = Me.Columns("PS6")
            Me.columnPS7 = Me.Columns("PS7")
            Me.columnPS8 = Me.Columns("PS8")
            Me.columnPS9 = Me.Columns("PS9")
            Me.columnManifesterClass_Id = Me.Columns("ManifesterClass_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPS1 = New DataColumn("PS1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS1)
            Me.columnPS2 = New DataColumn("PS2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS2)
            Me.columnPS3 = New DataColumn("PS3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS3)
            Me.columnPS4 = New DataColumn("PS4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS4)
            Me.columnPS5 = New DataColumn("PS5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS5)
            Me.columnPS6 = New DataColumn("PS6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS6)
            Me.columnPS7 = New DataColumn("PS7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS7)
            Me.columnPS8 = New DataColumn("PS8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS8)
            Me.columnPS9 = New DataColumn("PS9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPS9)
            Me.columnManifesterClass_Id = New DataColumn("ManifesterClass_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnManifesterClass_Id)
        End Sub
        
        Public Function NewPowerSavesRow() As PowerSavesRow
            Return CType(Me.NewRow,PowerSavesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PowerSavesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PowerSavesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PowerSavesRowChangedEvent) Is Nothing) Then
                RaiseEvent PowerSavesRowChanged(Me, New PowerSavesRowChangeEvent(CType(e.Row,PowerSavesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PowerSavesRowChangingEvent) Is Nothing) Then
                RaiseEvent PowerSavesRowChanging(Me, New PowerSavesRowChangeEvent(CType(e.Row,PowerSavesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PowerSavesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PowerSavesRowDeleted(Me, New PowerSavesRowChangeEvent(CType(e.Row,PowerSavesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PowerSavesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PowerSavesRowDeleting(Me, New PowerSavesRowChangeEvent(CType(e.Row,PowerSavesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePowerSavesRow(ByVal row As PowerSavesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowerSavesRow
        Inherits DataRow
        
        Private tablePowerSaves As PowerSavesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePowerSaves = CType(Me.Table,PowerSavesDataTable)
        End Sub
        
        Public Property PS1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS1Column) = value
            End Set
        End Property
        
        Public Property PS2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS2Column) = value
            End Set
        End Property
        
        Public Property PS3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS3Column) = value
            End Set
        End Property
        
        Public Property PS4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS4Column) = value
            End Set
        End Property
        
        Public Property PS5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS5Column) = value
            End Set
        End Property
        
        Public Property PS6 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS6Column) = value
            End Set
        End Property
        
        Public Property PS7 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS7Column) = value
            End Set
        End Property
        
        Public Property PS8 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS8Column) = value
            End Set
        End Property
        
        Public Property PS9 As String
            Get
                Try 
                    Return CType(Me(Me.tablePowerSaves.PS9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePowerSaves.PS9Column) = value
            End Set
        End Property
        
        Public Property ManifesterClassRow As ManifesterClassRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ManifesterClass_PowerSaves")),ManifesterClassRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ManifesterClass_PowerSaves"))
            End Set
        End Property
        
        Public Function IsPS1Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS1Column)
        End Function
        
        Public Sub SetPS1Null()
            Me(Me.tablePowerSaves.PS1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPS2Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS2Column)
        End Function
        
        Public Sub SetPS2Null()
            Me(Me.tablePowerSaves.PS2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPS3Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS3Column)
        End Function
        
        Public Sub SetPS3Null()
            Me(Me.tablePowerSaves.PS3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPS4Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS4Column)
        End Function
        
        Public Sub SetPS4Null()
            Me(Me.tablePowerSaves.PS4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPS5Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS5Column)
        End Function
        
        Public Sub SetPS5Null()
            Me(Me.tablePowerSaves.PS5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPS6Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS6Column)
        End Function
        
        Public Sub SetPS6Null()
            Me(Me.tablePowerSaves.PS6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPS7Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS7Column)
        End Function
        
        Public Sub SetPS7Null()
            Me(Me.tablePowerSaves.PS7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPS8Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS8Column)
        End Function
        
        Public Sub SetPS8Null()
            Me(Me.tablePowerSaves.PS8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPS9Null() As Boolean
            Return Me.IsNull(Me.tablePowerSaves.PS9Column)
        End Function
        
        Public Sub SetPS9Null()
            Me(Me.tablePowerSaves.PS9Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowerSavesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PowerSavesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PowerSavesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PowerSavesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPowers_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Powers")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property Powers_IdColumn As DataColumn
            Get
                Return Me.columnPowers_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PowersRow
            Get
                Return CType(Me.Rows(index),PowersRow)
            End Get
        End Property
        
        Public Event PowersRowChanged As PowersRowChangeEventHandler
        
        Public Event PowersRowChanging As PowersRowChangeEventHandler
        
        Public Event PowersRowDeleted As PowersRowChangeEventHandler
        
        Public Event PowersRowDeleting As PowersRowChangeEventHandler
        
        Public Overloads Sub AddPowersRow(ByVal row As PowersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPowersRow(ByVal parentCharacterRowByCharacter_Powers As CharacterRow) As PowersRow
            Dim rowPowersRow As PowersRow = CType(Me.NewRow,PowersRow)
            rowPowersRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_Powers(86)}
            Me.Rows.Add(rowPowersRow)
            Return rowPowersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PowersDataTable = CType(MyBase.Clone,PowersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PowersDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPowers_Id = Me.Columns("Powers_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPowers_Id = New DataColumn("Powers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPowers_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPowers_Id}, true))
            Me.columnPowers_Id.AutoIncrement = true
            Me.columnPowers_Id.AllowDBNull = false
            Me.columnPowers_Id.Unique = true
        End Sub
        
        Public Function NewPowersRow() As PowersRow
            Return CType(Me.NewRow,PowersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PowersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PowersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PowersRowChangedEvent) Is Nothing) Then
                RaiseEvent PowersRowChanged(Me, New PowersRowChangeEvent(CType(e.Row,PowersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PowersRowChangingEvent) Is Nothing) Then
                RaiseEvent PowersRowChanging(Me, New PowersRowChangeEvent(CType(e.Row,PowersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PowersRowDeletedEvent) Is Nothing) Then
                RaiseEvent PowersRowDeleted(Me, New PowersRowChangeEvent(CType(e.Row,PowersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PowersRowDeletingEvent) Is Nothing) Then
                RaiseEvent PowersRowDeleting(Me, New PowersRowChangeEvent(CType(e.Row,PowersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePowersRow(ByVal row As PowersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowersRow
        Inherits DataRow
        
        Private tablePowers As PowersDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePowers = CType(Me.Table,PowersDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_Powers")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_Powers"))
            End Set
        End Property
        
        Public Function GetClassPowersRows() As ClassPowersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Powers_ClassPowers")),ClassPowersRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PowersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PowersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PowersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassPowersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnClassName As DataColumn
        
        Private columnPowerLevel As DataColumn
        
        Private columnPoints As DataColumn
        
        Private columnClassPowers_Id As DataColumn
        
        Private columnPowers_Id As DataColumn
        
        Public Sub New()
            MyBase.New("ClassPowers")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property PowerLevelColumn As DataColumn
            Get
                Return Me.columnPowerLevel
            End Get
        End Property
        
        Public ReadOnly Property PointsColumn As DataColumn
            Get
                Return Me.columnPoints
            End Get
        End Property
        
        Public ReadOnly Property ClassPowers_IdColumn As DataColumn
            Get
                Return Me.columnClassPowers_Id
            End Get
        End Property
        
        Public ReadOnly Property Powers_IdColumn As DataColumn
            Get
                Return Me.columnPowers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClassPowersRow
            Get
                Return CType(Me.Rows(index),ClassPowersRow)
            End Get
        End Property
        
        Public Event ClassPowersRowChanged As ClassPowersRowChangeEventHandler
        
        Public Event ClassPowersRowChanging As ClassPowersRowChangeEventHandler
        
        Public Event ClassPowersRowDeleted As ClassPowersRowChangeEventHandler
        
        Public Event ClassPowersRowDeleting As ClassPowersRowChangeEventHandler
        
        Public Overloads Sub AddClassPowersRow(ByVal row As ClassPowersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClassPowersRow(ByVal ClassName As String, ByVal PowerLevel As String, ByVal Points As String, ByVal parentPowersRowByPowers_ClassPowers As PowersRow) As ClassPowersRow
            Dim rowClassPowersRow As ClassPowersRow = CType(Me.NewRow,ClassPowersRow)
            rowClassPowersRow.ItemArray = New Object() {ClassName, PowerLevel, Points, Nothing, parentPowersRowByPowers_ClassPowers(0)}
            Me.Rows.Add(rowClassPowersRow)
            Return rowClassPowersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClassPowersDataTable = CType(MyBase.Clone,ClassPowersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClassPowersDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnPowerLevel = Me.Columns("PowerLevel")
            Me.columnPoints = Me.Columns("Points")
            Me.columnClassPowers_Id = Me.Columns("ClassPowers_Id")
            Me.columnPowers_Id = Me.Columns("Powers_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnPowerLevel = New DataColumn("PowerLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPowerLevel)
            Me.columnPoints = New DataColumn("Points", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPoints)
            Me.columnClassPowers_Id = New DataColumn("ClassPowers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClassPowers_Id)
            Me.columnPowers_Id = New DataColumn("Powers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPowers_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnClassPowers_Id}, true))
            Me.columnClassPowers_Id.AutoIncrement = true
            Me.columnClassPowers_Id.AllowDBNull = false
            Me.columnClassPowers_Id.Unique = true
        End Sub
        
        Public Function NewClassPowersRow() As ClassPowersRow
            Return CType(Me.NewRow,ClassPowersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClassPowersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClassPowersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClassPowersRowChangedEvent) Is Nothing) Then
                RaiseEvent ClassPowersRowChanged(Me, New ClassPowersRowChangeEvent(CType(e.Row,ClassPowersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClassPowersRowChangingEvent) Is Nothing) Then
                RaiseEvent ClassPowersRowChanging(Me, New ClassPowersRowChangeEvent(CType(e.Row,ClassPowersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClassPowersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClassPowersRowDeleted(Me, New ClassPowersRowChangeEvent(CType(e.Row,ClassPowersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClassPowersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClassPowersRowDeleting(Me, New ClassPowersRowChangeEvent(CType(e.Row,ClassPowersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClassPowersRow(ByVal row As ClassPowersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassPowersRow
        Inherits DataRow
        
        Private tableClassPowers As ClassPowersDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClassPowers = CType(Me.Table,ClassPowersDataTable)
        End Sub
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tableClassPowers.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassPowers.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property PowerLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableClassPowers.PowerLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassPowers.PowerLevelColumn) = value
            End Set
        End Property
        
        Public Property Points As String
            Get
                Try 
                    Return CType(Me(Me.tableClassPowers.PointsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClassPowers.PointsColumn) = value
            End Set
        End Property
        
        Public Property PowersRow As PowersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Powers_ClassPowers")),PowersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Powers_ClassPowers"))
            End Set
        End Property
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableClassPowers.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableClassPowers.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPowerLevelNull() As Boolean
            Return Me.IsNull(Me.tableClassPowers.PowerLevelColumn)
        End Function
        
        Public Sub SetPowerLevelNull()
            Me(Me.tableClassPowers.PowerLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPointsNull() As Boolean
            Return Me.IsNull(Me.tableClassPowers.PointsColumn)
        End Function
        
        Public Sub SetPointsNull()
            Me(Me.tableClassPowers.PointsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPowerRows() As PowerRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ClassPowers_Power")),PowerRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClassPowersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClassPowersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClassPowersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClassPowersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPowerName As DataColumn
        
        Private columnDiscipline As DataColumn
        
        Private columnSubdiscipline As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnSourceType As DataColumn
        
        Private columnDescriptors As DataColumn
        
        Private columnDisplay As DataColumn
        
        Private columnTime As DataColumn
        
        Private columnRange As DataColumn
        
        Private columnTarget As DataColumn
        
        Private columnDuration As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnSavingThrow As DataColumn
        
        Private columnPowerResistance As DataColumn
        
        Private columnXPCost As DataColumn
        
        Private columnAugmentable As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnClassPowers_Id As DataColumn
        
        Public Sub New()
            MyBase.New("Power")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PowerNameColumn As DataColumn
            Get
                Return Me.columnPowerName
            End Get
        End Property
        
        Public ReadOnly Property DisciplineColumn As DataColumn
            Get
                Return Me.columnDiscipline
            End Get
        End Property
        
        Public ReadOnly Property SubdisciplineColumn As DataColumn
            Get
                Return Me.columnSubdiscipline
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property SourceTypeColumn As DataColumn
            Get
                Return Me.columnSourceType
            End Get
        End Property
        
        Public ReadOnly Property DescriptorsColumn As DataColumn
            Get
                Return Me.columnDescriptors
            End Get
        End Property
        
        Public ReadOnly Property DisplayColumn As DataColumn
            Get
                Return Me.columnDisplay
            End Get
        End Property
        
        Public ReadOnly Property TimeColumn As DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        Public ReadOnly Property RangeColumn As DataColumn
            Get
                Return Me.columnRange
            End Get
        End Property
        
        Public ReadOnly Property TargetColumn As DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        Public ReadOnly Property DurationColumn As DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property SavingThrowColumn As DataColumn
            Get
                Return Me.columnSavingThrow
            End Get
        End Property
        
        Public ReadOnly Property PowerResistanceColumn As DataColumn
            Get
                Return Me.columnPowerResistance
            End Get
        End Property
        
        Public ReadOnly Property XPCostColumn As DataColumn
            Get
                Return Me.columnXPCost
            End Get
        End Property
        
        Public ReadOnly Property AugmentableColumn As DataColumn
            Get
                Return Me.columnAugmentable
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property ClassPowers_IdColumn As DataColumn
            Get
                Return Me.columnClassPowers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PowerRow
            Get
                Return CType(Me.Rows(index),PowerRow)
            End Get
        End Property
        
        Public Event PowerRowChanged As PowerRowChangeEventHandler
        
        Public Event PowerRowChanging As PowerRowChangeEventHandler
        
        Public Event PowerRowDeleted As PowerRowChangeEventHandler
        
        Public Event PowerRowDeleting As PowerRowChangeEventHandler
        
        Public Overloads Sub AddPowerRow(ByVal row As PowerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPowerRow( _
                    ByVal PowerName As String,  _
                    ByVal Discipline As String,  _
                    ByVal Subdiscipline As String,  _
                    ByVal Source As String,  _
                    ByVal SourceType As String,  _
                    ByVal Descriptors As String,  _
                    ByVal Display As String,  _
                    ByVal Time As String,  _
                    ByVal Range As String,  _
                    ByVal Target As String,  _
                    ByVal Duration As String,  _
                    ByVal Description As String,  _
                    ByVal SavingThrow As String,  _
                    ByVal PowerResistance As String,  _
                    ByVal XPCost As String,  _
                    ByVal Augmentable As String,  _
                    ByVal License As String,  _
                    ByVal Sourcebook As String,  _
                    ByVal Tags As String,  _
                    ByVal PageNo As String,  _
                    ByVal HelpPage As String,  _
                    ByVal parentClassPowersRowByClassPowers_Power As ClassPowersRow) As PowerRow
            Dim rowPowerRow As PowerRow = CType(Me.NewRow,PowerRow)
            rowPowerRow.ItemArray = New Object() {PowerName, Discipline, Subdiscipline, Source, SourceType, Descriptors, Display, Time, Range, Target, Duration, Description, SavingThrow, PowerResistance, XPCost, Augmentable, License, Sourcebook, Tags, PageNo, HelpPage, parentClassPowersRowByClassPowers_Power(3)}
            Me.Rows.Add(rowPowerRow)
            Return rowPowerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PowerDataTable = CType(MyBase.Clone,PowerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PowerDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPowerName = Me.Columns("PowerName")
            Me.columnDiscipline = Me.Columns("Discipline")
            Me.columnSubdiscipline = Me.Columns("Subdiscipline")
            Me.columnSource = Me.Columns("Source")
            Me.columnSourceType = Me.Columns("SourceType")
            Me.columnDescriptors = Me.Columns("Descriptors")
            Me.columnDisplay = Me.Columns("Display")
            Me.columnTime = Me.Columns("Time")
            Me.columnRange = Me.Columns("Range")
            Me.columnTarget = Me.Columns("Target")
            Me.columnDuration = Me.Columns("Duration")
            Me.columnDescription = Me.Columns("Description")
            Me.columnSavingThrow = Me.Columns("SavingThrow")
            Me.columnPowerResistance = Me.Columns("PowerResistance")
            Me.columnXPCost = Me.Columns("XPCost")
            Me.columnAugmentable = Me.Columns("Augmentable")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnClassPowers_Id = Me.Columns("ClassPowers_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPowerName = New DataColumn("PowerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPowerName)
            Me.columnDiscipline = New DataColumn("Discipline", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscipline)
            Me.columnSubdiscipline = New DataColumn("Subdiscipline", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubdiscipline)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnSourceType = New DataColumn("SourceType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourceType)
            Me.columnDescriptors = New DataColumn("Descriptors", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptors)
            Me.columnDisplay = New DataColumn("Display", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisplay)
            Me.columnTime = New DataColumn("Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTime)
            Me.columnRange = New DataColumn("Range", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRange)
            Me.columnTarget = New DataColumn("Target", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarget)
            Me.columnDuration = New DataColumn("Duration", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuration)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnSavingThrow = New DataColumn("SavingThrow", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSavingThrow)
            Me.columnPowerResistance = New DataColumn("PowerResistance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPowerResistance)
            Me.columnXPCost = New DataColumn("XPCost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnXPCost)
            Me.columnAugmentable = New DataColumn("Augmentable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAugmentable)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnClassPowers_Id = New DataColumn("ClassPowers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClassPowers_Id)
        End Sub
        
        Public Function NewPowerRow() As PowerRow
            Return CType(Me.NewRow,PowerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PowerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PowerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PowerRowChangedEvent) Is Nothing) Then
                RaiseEvent PowerRowChanged(Me, New PowerRowChangeEvent(CType(e.Row,PowerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PowerRowChangingEvent) Is Nothing) Then
                RaiseEvent PowerRowChanging(Me, New PowerRowChangeEvent(CType(e.Row,PowerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PowerRowDeletedEvent) Is Nothing) Then
                RaiseEvent PowerRowDeleted(Me, New PowerRowChangeEvent(CType(e.Row,PowerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PowerRowDeletingEvent) Is Nothing) Then
                RaiseEvent PowerRowDeleting(Me, New PowerRowChangeEvent(CType(e.Row,PowerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePowerRow(ByVal row As PowerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowerRow
        Inherits DataRow
        
        Private tablePower As PowerDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePower = CType(Me.Table,PowerDataTable)
        End Sub
        
        Public Property PowerName As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.PowerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.PowerNameColumn) = value
            End Set
        End Property
        
        Public Property Discipline As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.DisciplineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.DisciplineColumn) = value
            End Set
        End Property
        
        Public Property Subdiscipline As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.SubdisciplineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.SubdisciplineColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.SourceColumn) = value
            End Set
        End Property
        
        Public Property SourceType As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.SourceTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.SourceTypeColumn) = value
            End Set
        End Property
        
        Public Property Descriptors As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.DescriptorsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.DescriptorsColumn) = value
            End Set
        End Property
        
        Public Property Display As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.DisplayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.DisplayColumn) = value
            End Set
        End Property
        
        Public Property Time As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.TimeColumn) = value
            End Set
        End Property
        
        Public Property Range As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.RangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.RangeColumn) = value
            End Set
        End Property
        
        Public Property Target As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.TargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.TargetColumn) = value
            End Set
        End Property
        
        Public Property Duration As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.DurationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.DurationColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property SavingThrow As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.SavingThrowColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.SavingThrowColumn) = value
            End Set
        End Property
        
        Public Property PowerResistance As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.PowerResistanceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.PowerResistanceColumn) = value
            End Set
        End Property
        
        Public Property XPCost As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.XPCostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.XPCostColumn) = value
            End Set
        End Property
        
        Public Property Augmentable As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.AugmentableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.AugmentableColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tablePower.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePower.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property ClassPowersRow As ClassPowersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ClassPowers_Power")),ClassPowersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ClassPowers_Power"))
            End Set
        End Property
        
        Public Function IsPowerNameNull() As Boolean
            Return Me.IsNull(Me.tablePower.PowerNameColumn)
        End Function
        
        Public Sub SetPowerNameNull()
            Me(Me.tablePower.PowerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisciplineNull() As Boolean
            Return Me.IsNull(Me.tablePower.DisciplineColumn)
        End Function
        
        Public Sub SetDisciplineNull()
            Me(Me.tablePower.DisciplineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubdisciplineNull() As Boolean
            Return Me.IsNull(Me.tablePower.SubdisciplineColumn)
        End Function
        
        Public Sub SetSubdisciplineNull()
            Me(Me.tablePower.SubdisciplineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tablePower.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tablePower.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceTypeNull() As Boolean
            Return Me.IsNull(Me.tablePower.SourceTypeColumn)
        End Function
        
        Public Sub SetSourceTypeNull()
            Me(Me.tablePower.SourceTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptorsNull() As Boolean
            Return Me.IsNull(Me.tablePower.DescriptorsColumn)
        End Function
        
        Public Sub SetDescriptorsNull()
            Me(Me.tablePower.DescriptorsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisplayNull() As Boolean
            Return Me.IsNull(Me.tablePower.DisplayColumn)
        End Function
        
        Public Sub SetDisplayNull()
            Me(Me.tablePower.DisplayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeNull() As Boolean
            Return Me.IsNull(Me.tablePower.TimeColumn)
        End Function
        
        Public Sub SetTimeNull()
            Me(Me.tablePower.TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRangeNull() As Boolean
            Return Me.IsNull(Me.tablePower.RangeColumn)
        End Function
        
        Public Sub SetRangeNull()
            Me(Me.tablePower.RangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tablePower.TargetColumn)
        End Function
        
        Public Sub SetTargetNull()
            Me(Me.tablePower.TargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDurationNull() As Boolean
            Return Me.IsNull(Me.tablePower.DurationColumn)
        End Function
        
        Public Sub SetDurationNull()
            Me(Me.tablePower.DurationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablePower.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tablePower.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSavingThrowNull() As Boolean
            Return Me.IsNull(Me.tablePower.SavingThrowColumn)
        End Function
        
        Public Sub SetSavingThrowNull()
            Me(Me.tablePower.SavingThrowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPowerResistanceNull() As Boolean
            Return Me.IsNull(Me.tablePower.PowerResistanceColumn)
        End Function
        
        Public Sub SetPowerResistanceNull()
            Me(Me.tablePower.PowerResistanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXPCostNull() As Boolean
            Return Me.IsNull(Me.tablePower.XPCostColumn)
        End Function
        
        Public Sub SetXPCostNull()
            Me(Me.tablePower.XPCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAugmentableNull() As Boolean
            Return Me.IsNull(Me.tablePower.AugmentableColumn)
        End Function
        
        Public Sub SetAugmentableNull()
            Me(Me.tablePower.AugmentableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tablePower.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tablePower.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tablePower.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tablePower.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tablePower.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tablePower.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tablePower.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tablePower.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tablePower.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tablePower.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PowerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PowerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PowerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PowerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicSpecializationsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPsionicSpecializations_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PsionicSpecializations")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PsionicSpecializations_IdColumn As DataColumn
            Get
                Return Me.columnPsionicSpecializations_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PsionicSpecializationsRow
            Get
                Return CType(Me.Rows(index),PsionicSpecializationsRow)
            End Get
        End Property
        
        Public Event PsionicSpecializationsRowChanged As PsionicSpecializationsRowChangeEventHandler
        
        Public Event PsionicSpecializationsRowChanging As PsionicSpecializationsRowChangeEventHandler
        
        Public Event PsionicSpecializationsRowDeleted As PsionicSpecializationsRowChangeEventHandler
        
        Public Event PsionicSpecializationsRowDeleting As PsionicSpecializationsRowChangeEventHandler
        
        Public Overloads Sub AddPsionicSpecializationsRow(ByVal row As PsionicSpecializationsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPsionicSpecializationsRow(ByVal parentCharacterRowByCharacter_PsionicSpecializations As CharacterRow) As PsionicSpecializationsRow
            Dim rowPsionicSpecializationsRow As PsionicSpecializationsRow = CType(Me.NewRow,PsionicSpecializationsRow)
            rowPsionicSpecializationsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_PsionicSpecializations(86)}
            Me.Rows.Add(rowPsionicSpecializationsRow)
            Return rowPsionicSpecializationsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PsionicSpecializationsDataTable = CType(MyBase.Clone,PsionicSpecializationsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PsionicSpecializationsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPsionicSpecializations_Id = Me.Columns("PsionicSpecializations_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPsionicSpecializations_Id = New DataColumn("PsionicSpecializations_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPsionicSpecializations_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPsionicSpecializations_Id}, true))
            Me.columnPsionicSpecializations_Id.AutoIncrement = true
            Me.columnPsionicSpecializations_Id.AllowDBNull = false
            Me.columnPsionicSpecializations_Id.Unique = true
        End Sub
        
        Public Function NewPsionicSpecializationsRow() As PsionicSpecializationsRow
            Return CType(Me.NewRow,PsionicSpecializationsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PsionicSpecializationsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PsionicSpecializationsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PsionicSpecializationsRowChangedEvent) Is Nothing) Then
                RaiseEvent PsionicSpecializationsRowChanged(Me, New PsionicSpecializationsRowChangeEvent(CType(e.Row,PsionicSpecializationsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PsionicSpecializationsRowChangingEvent) Is Nothing) Then
                RaiseEvent PsionicSpecializationsRowChanging(Me, New PsionicSpecializationsRowChangeEvent(CType(e.Row,PsionicSpecializationsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PsionicSpecializationsRowDeletedEvent) Is Nothing) Then
                RaiseEvent PsionicSpecializationsRowDeleted(Me, New PsionicSpecializationsRowChangeEvent(CType(e.Row,PsionicSpecializationsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PsionicSpecializationsRowDeletingEvent) Is Nothing) Then
                RaiseEvent PsionicSpecializationsRowDeleting(Me, New PsionicSpecializationsRowChangeEvent(CType(e.Row,PsionicSpecializationsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePsionicSpecializationsRow(ByVal row As PsionicSpecializationsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicSpecializationsRow
        Inherits DataRow
        
        Private tablePsionicSpecializations As PsionicSpecializationsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePsionicSpecializations = CType(Me.Table,PsionicSpecializationsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_PsionicSpecializations")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_PsionicSpecializations"))
            End Set
        End Property
        
        Public Function GetPsionicSpecializationRows() As PsionicSpecializationRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PsionicSpecializations_PsionicSpecialization")),PsionicSpecializationRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicSpecializationsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PsionicSpecializationsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PsionicSpecializationsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PsionicSpecializationsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicSpecializationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPsionicSpecializationName As DataColumn
        
        Private columnClassName As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnPsionicSpecializations_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PsionicSpecialization")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PsionicSpecializationNameColumn As DataColumn
            Get
                Return Me.columnPsionicSpecializationName
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property PsionicSpecializations_IdColumn As DataColumn
            Get
                Return Me.columnPsionicSpecializations_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PsionicSpecializationRow
            Get
                Return CType(Me.Rows(index),PsionicSpecializationRow)
            End Get
        End Property
        
        Public Event PsionicSpecializationRowChanged As PsionicSpecializationRowChangeEventHandler
        
        Public Event PsionicSpecializationRowChanging As PsionicSpecializationRowChangeEventHandler
        
        Public Event PsionicSpecializationRowDeleted As PsionicSpecializationRowChangeEventHandler
        
        Public Event PsionicSpecializationRowDeleting As PsionicSpecializationRowChangeEventHandler
        
        Public Overloads Sub AddPsionicSpecializationRow(ByVal row As PsionicSpecializationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPsionicSpecializationRow(ByVal PsionicSpecializationName As String, ByVal ClassName As String, ByVal License As String, ByVal Sourcebook As String, ByVal Tags As String, ByVal PageNo As String, ByVal HelpPage As String, ByVal parentPsionicSpecializationsRowByPsionicSpecializations_PsionicSpecialization As PsionicSpecializationsRow) As PsionicSpecializationRow
            Dim rowPsionicSpecializationRow As PsionicSpecializationRow = CType(Me.NewRow,PsionicSpecializationRow)
            rowPsionicSpecializationRow.ItemArray = New Object() {PsionicSpecializationName, ClassName, License, Sourcebook, Tags, PageNo, HelpPage, parentPsionicSpecializationsRowByPsionicSpecializations_PsionicSpecialization(0)}
            Me.Rows.Add(rowPsionicSpecializationRow)
            Return rowPsionicSpecializationRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PsionicSpecializationDataTable = CType(MyBase.Clone,PsionicSpecializationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PsionicSpecializationDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPsionicSpecializationName = Me.Columns("PsionicSpecializationName")
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnPsionicSpecializations_Id = Me.Columns("PsionicSpecializations_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPsionicSpecializationName = New DataColumn("PsionicSpecializationName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPsionicSpecializationName)
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnPsionicSpecializations_Id = New DataColumn("PsionicSpecializations_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPsionicSpecializations_Id)
        End Sub
        
        Public Function NewPsionicSpecializationRow() As PsionicSpecializationRow
            Return CType(Me.NewRow,PsionicSpecializationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PsionicSpecializationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PsionicSpecializationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PsionicSpecializationRowChangedEvent) Is Nothing) Then
                RaiseEvent PsionicSpecializationRowChanged(Me, New PsionicSpecializationRowChangeEvent(CType(e.Row,PsionicSpecializationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PsionicSpecializationRowChangingEvent) Is Nothing) Then
                RaiseEvent PsionicSpecializationRowChanging(Me, New PsionicSpecializationRowChangeEvent(CType(e.Row,PsionicSpecializationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PsionicSpecializationRowDeletedEvent) Is Nothing) Then
                RaiseEvent PsionicSpecializationRowDeleted(Me, New PsionicSpecializationRowChangeEvent(CType(e.Row,PsionicSpecializationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PsionicSpecializationRowDeletingEvent) Is Nothing) Then
                RaiseEvent PsionicSpecializationRowDeleting(Me, New PsionicSpecializationRowChangeEvent(CType(e.Row,PsionicSpecializationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePsionicSpecializationRow(ByVal row As PsionicSpecializationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicSpecializationRow
        Inherits DataRow
        
        Private tablePsionicSpecialization As PsionicSpecializationDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePsionicSpecialization = CType(Me.Table,PsionicSpecializationDataTable)
        End Sub
        
        Public Property PsionicSpecializationName As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicSpecialization.PsionicSpecializationNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicSpecialization.PsionicSpecializationNameColumn) = value
            End Set
        End Property
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicSpecialization.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicSpecialization.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicSpecialization.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicSpecialization.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicSpecialization.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicSpecialization.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicSpecialization.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicSpecialization.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicSpecialization.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicSpecialization.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicSpecialization.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicSpecialization.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property PsionicSpecializationsRow As PsionicSpecializationsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PsionicSpecializations_PsionicSpecialization")),PsionicSpecializationsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PsionicSpecializations_PsionicSpecialization"))
            End Set
        End Property
        
        Public Function IsPsionicSpecializationNameNull() As Boolean
            Return Me.IsNull(Me.tablePsionicSpecialization.PsionicSpecializationNameColumn)
        End Function
        
        Public Sub SetPsionicSpecializationNameNull()
            Me(Me.tablePsionicSpecialization.PsionicSpecializationNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tablePsionicSpecialization.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tablePsionicSpecialization.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tablePsionicSpecialization.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tablePsionicSpecialization.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tablePsionicSpecialization.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tablePsionicSpecialization.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tablePsionicSpecialization.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tablePsionicSpecialization.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tablePsionicSpecialization.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tablePsionicSpecialization.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tablePsionicSpecialization.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tablePsionicSpecialization.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicSpecializationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PsionicSpecializationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PsionicSpecializationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PsionicSpecializationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicModifiersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPsionicModifiers_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PsionicModifiers")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PsionicModifiers_IdColumn As DataColumn
            Get
                Return Me.columnPsionicModifiers_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PsionicModifiersRow
            Get
                Return CType(Me.Rows(index),PsionicModifiersRow)
            End Get
        End Property
        
        Public Event PsionicModifiersRowChanged As PsionicModifiersRowChangeEventHandler
        
        Public Event PsionicModifiersRowChanging As PsionicModifiersRowChangeEventHandler
        
        Public Event PsionicModifiersRowDeleted As PsionicModifiersRowChangeEventHandler
        
        Public Event PsionicModifiersRowDeleting As PsionicModifiersRowChangeEventHandler
        
        Public Overloads Sub AddPsionicModifiersRow(ByVal row As PsionicModifiersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPsionicModifiersRow(ByVal parentCharacterRowByCharacter_PsionicModifiers As CharacterRow) As PsionicModifiersRow
            Dim rowPsionicModifiersRow As PsionicModifiersRow = CType(Me.NewRow,PsionicModifiersRow)
            rowPsionicModifiersRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_PsionicModifiers(86)}
            Me.Rows.Add(rowPsionicModifiersRow)
            Return rowPsionicModifiersRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PsionicModifiersDataTable = CType(MyBase.Clone,PsionicModifiersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PsionicModifiersDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPsionicModifiers_Id = Me.Columns("PsionicModifiers_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPsionicModifiers_Id = New DataColumn("PsionicModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPsionicModifiers_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPsionicModifiers_Id}, true))
            Me.columnPsionicModifiers_Id.AutoIncrement = true
            Me.columnPsionicModifiers_Id.AllowDBNull = false
            Me.columnPsionicModifiers_Id.Unique = true
        End Sub
        
        Public Function NewPsionicModifiersRow() As PsionicModifiersRow
            Return CType(Me.NewRow,PsionicModifiersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PsionicModifiersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PsionicModifiersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PsionicModifiersRowChangedEvent) Is Nothing) Then
                RaiseEvent PsionicModifiersRowChanged(Me, New PsionicModifiersRowChangeEvent(CType(e.Row,PsionicModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PsionicModifiersRowChangingEvent) Is Nothing) Then
                RaiseEvent PsionicModifiersRowChanging(Me, New PsionicModifiersRowChangeEvent(CType(e.Row,PsionicModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PsionicModifiersRowDeletedEvent) Is Nothing) Then
                RaiseEvent PsionicModifiersRowDeleted(Me, New PsionicModifiersRowChangeEvent(CType(e.Row,PsionicModifiersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PsionicModifiersRowDeletingEvent) Is Nothing) Then
                RaiseEvent PsionicModifiersRowDeleting(Me, New PsionicModifiersRowChangeEvent(CType(e.Row,PsionicModifiersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePsionicModifiersRow(ByVal row As PsionicModifiersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicModifiersRow
        Inherits DataRow
        
        Private tablePsionicModifiers As PsionicModifiersDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePsionicModifiers = CType(Me.Table,PsionicModifiersDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_PsionicModifiers")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_PsionicModifiers"))
            End Set
        End Property
        
        Public Function GetPsionicModifierRows() As PsionicModifierRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PsionicModifiers_PsionicModifier")),PsionicModifierRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicModifiersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PsionicModifiersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PsionicModifiersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PsionicModifiersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicModifierDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModifierName As DataColumn
        
        Private columnModifierType As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnCondition As DataColumn
        
        Private columnValid As DataColumn
        
        Private columnEnabled As DataColumn
        
        Private columnSystemElement As DataColumn
        
        Private columnFocusName As DataColumn
        
        Private columnModifierValue As DataColumn
        
        Private columnPsionicModifiers_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PsionicModifier")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ModifierNameColumn As DataColumn
            Get
                Return Me.columnModifierName
            End Get
        End Property
        
        Public ReadOnly Property ModifierTypeColumn As DataColumn
            Get
                Return Me.columnModifierType
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property ConditionColumn As DataColumn
            Get
                Return Me.columnCondition
            End Get
        End Property
        
        Public ReadOnly Property ValidColumn As DataColumn
            Get
                Return Me.columnValid
            End Get
        End Property
        
        Public ReadOnly Property EnabledColumn As DataColumn
            Get
                Return Me.columnEnabled
            End Get
        End Property
        
        Public ReadOnly Property SystemElementColumn As DataColumn
            Get
                Return Me.columnSystemElement
            End Get
        End Property
        
        Public ReadOnly Property FocusNameColumn As DataColumn
            Get
                Return Me.columnFocusName
            End Get
        End Property
        
        Public ReadOnly Property ModifierValueColumn As DataColumn
            Get
                Return Me.columnModifierValue
            End Get
        End Property
        
        Public ReadOnly Property PsionicModifiers_IdColumn As DataColumn
            Get
                Return Me.columnPsionicModifiers_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PsionicModifierRow
            Get
                Return CType(Me.Rows(index),PsionicModifierRow)
            End Get
        End Property
        
        Public Event PsionicModifierRowChanged As PsionicModifierRowChangeEventHandler
        
        Public Event PsionicModifierRowChanging As PsionicModifierRowChangeEventHandler
        
        Public Event PsionicModifierRowDeleted As PsionicModifierRowChangeEventHandler
        
        Public Event PsionicModifierRowDeleting As PsionicModifierRowChangeEventHandler
        
        Public Overloads Sub AddPsionicModifierRow(ByVal row As PsionicModifierRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPsionicModifierRow(ByVal ModifierName As String, ByVal ModifierType As String, ByVal Source As String, ByVal Condition As String, ByVal Valid As String, ByVal Enabled As String, ByVal SystemElement As String, ByVal FocusName As String, ByVal ModifierValue As String, ByVal parentPsionicModifiersRowByPsionicModifiers_PsionicModifier As PsionicModifiersRow) As PsionicModifierRow
            Dim rowPsionicModifierRow As PsionicModifierRow = CType(Me.NewRow,PsionicModifierRow)
            rowPsionicModifierRow.ItemArray = New Object() {ModifierName, ModifierType, Source, Condition, Valid, Enabled, SystemElement, FocusName, ModifierValue, parentPsionicModifiersRowByPsionicModifiers_PsionicModifier(0)}
            Me.Rows.Add(rowPsionicModifierRow)
            Return rowPsionicModifierRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PsionicModifierDataTable = CType(MyBase.Clone,PsionicModifierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PsionicModifierDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnModifierName = Me.Columns("ModifierName")
            Me.columnModifierType = Me.Columns("ModifierType")
            Me.columnSource = Me.Columns("Source")
            Me.columnCondition = Me.Columns("Condition")
            Me.columnValid = Me.Columns("Valid")
            Me.columnEnabled = Me.Columns("Enabled")
            Me.columnSystemElement = Me.Columns("SystemElement")
            Me.columnFocusName = Me.Columns("FocusName")
            Me.columnModifierValue = Me.Columns("ModifierValue")
            Me.columnPsionicModifiers_Id = Me.Columns("PsionicModifiers_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnModifierName = New DataColumn("ModifierName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierName)
            Me.columnModifierType = New DataColumn("ModifierType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierType)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnCondition = New DataColumn("Condition", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCondition)
            Me.columnValid = New DataColumn("Valid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValid)
            Me.columnEnabled = New DataColumn("Enabled", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnabled)
            Me.columnSystemElement = New DataColumn("SystemElement", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSystemElement)
            Me.columnFocusName = New DataColumn("FocusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFocusName)
            Me.columnModifierValue = New DataColumn("ModifierValue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModifierValue)
            Me.columnPsionicModifiers_Id = New DataColumn("PsionicModifiers_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPsionicModifiers_Id)
        End Sub
        
        Public Function NewPsionicModifierRow() As PsionicModifierRow
            Return CType(Me.NewRow,PsionicModifierRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PsionicModifierRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PsionicModifierRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PsionicModifierRowChangedEvent) Is Nothing) Then
                RaiseEvent PsionicModifierRowChanged(Me, New PsionicModifierRowChangeEvent(CType(e.Row,PsionicModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PsionicModifierRowChangingEvent) Is Nothing) Then
                RaiseEvent PsionicModifierRowChanging(Me, New PsionicModifierRowChangeEvent(CType(e.Row,PsionicModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PsionicModifierRowDeletedEvent) Is Nothing) Then
                RaiseEvent PsionicModifierRowDeleted(Me, New PsionicModifierRowChangeEvent(CType(e.Row,PsionicModifierRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PsionicModifierRowDeletingEvent) Is Nothing) Then
                RaiseEvent PsionicModifierRowDeleting(Me, New PsionicModifierRowChangeEvent(CType(e.Row,PsionicModifierRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePsionicModifierRow(ByVal row As PsionicModifierRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicModifierRow
        Inherits DataRow
        
        Private tablePsionicModifier As PsionicModifierDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePsionicModifier = CType(Me.Table,PsionicModifierDataTable)
        End Sub
        
        Public Property ModifierName As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.ModifierNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.ModifierNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierType As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.ModifierTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.ModifierTypeColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.SourceColumn) = value
            End Set
        End Property
        
        Public Property Condition As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.ConditionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.ConditionColumn) = value
            End Set
        End Property
        
        Public Property Valid As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.ValidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.ValidColumn) = value
            End Set
        End Property
        
        Public Property Enabled As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.EnabledColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.EnabledColumn) = value
            End Set
        End Property
        
        Public Property SystemElement As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.SystemElementColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.SystemElementColumn) = value
            End Set
        End Property
        
        Public Property FocusName As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.FocusNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.FocusNameColumn) = value
            End Set
        End Property
        
        Public Property ModifierValue As String
            Get
                Try 
                    Return CType(Me(Me.tablePsionicModifier.ModifierValueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsionicModifier.ModifierValueColumn) = value
            End Set
        End Property
        
        Public Property PsionicModifiersRow As PsionicModifiersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PsionicModifiers_PsionicModifier")),PsionicModifiersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PsionicModifiers_PsionicModifier"))
            End Set
        End Property
        
        Public Function IsModifierNameNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.ModifierNameColumn)
        End Function
        
        Public Sub SetModifierNameNull()
            Me(Me.tablePsionicModifier.ModifierNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierTypeNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.ModifierTypeColumn)
        End Function
        
        Public Sub SetModifierTypeNull()
            Me(Me.tablePsionicModifier.ModifierTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tablePsionicModifier.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConditionNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.ConditionColumn)
        End Function
        
        Public Sub SetConditionNull()
            Me(Me.tablePsionicModifier.ConditionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.ValidColumn)
        End Function
        
        Public Sub SetValidNull()
            Me(Me.tablePsionicModifier.ValidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnabledNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.EnabledColumn)
        End Function
        
        Public Sub SetEnabledNull()
            Me(Me.tablePsionicModifier.EnabledColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSystemElementNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.SystemElementColumn)
        End Function
        
        Public Sub SetSystemElementNull()
            Me(Me.tablePsionicModifier.SystemElementColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFocusNameNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.FocusNameColumn)
        End Function
        
        Public Sub SetFocusNameNull()
            Me(Me.tablePsionicModifier.FocusNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModifierValueNull() As Boolean
            Return Me.IsNull(Me.tablePsionicModifier.ModifierValueColumn)
        End Function
        
        Public Sub SetModifierValueNull()
            Me(Me.tablePsionicModifier.ModifierValueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsionicModifierRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PsionicModifierRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PsionicModifierRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PsionicModifierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ArmorClassDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnArmorBonus As DataColumn
        
        Private columnShieldBonus As DataColumn
        
        Private columnDexBonus As DataColumn
        
        Private columnSizeBonus As DataColumn
        
        Private columnNaturalArmorBonus As DataColumn
        
        Private columnDeflectionBonus As DataColumn
        
        Private columnAlchemicalBonus As DataColumn
        
        Private columnCircumstanceBonus As DataColumn
        
        Private columnCompetenceBonus As DataColumn
        
        Private columnDodgeBonus As DataColumn
        
        Private columnEnhancementBonus As DataColumn
        
        Private columnInherentBonus As DataColumn
        
        Private columnInsightBonus As DataColumn
        
        Private columnLuckBonus As DataColumn
        
        Private columnMoraleBonus As DataColumn
        
        Private columnProfaneBonus As DataColumn
        
        Private columnRacialBonus As DataColumn
        
        Private columnResistanceBonus As DataColumn
        
        Private columnSacredBonus As DataColumn
        
        Private columnUndefinedBonus As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("ArmorClass")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property ArmorBonusColumn As DataColumn
            Get
                Return Me.columnArmorBonus
            End Get
        End Property
        
        Public ReadOnly Property ShieldBonusColumn As DataColumn
            Get
                Return Me.columnShieldBonus
            End Get
        End Property
        
        Public ReadOnly Property DexBonusColumn As DataColumn
            Get
                Return Me.columnDexBonus
            End Get
        End Property
        
        Public ReadOnly Property SizeBonusColumn As DataColumn
            Get
                Return Me.columnSizeBonus
            End Get
        End Property
        
        Public ReadOnly Property NaturalArmorBonusColumn As DataColumn
            Get
                Return Me.columnNaturalArmorBonus
            End Get
        End Property
        
        Public ReadOnly Property DeflectionBonusColumn As DataColumn
            Get
                Return Me.columnDeflectionBonus
            End Get
        End Property
        
        Public ReadOnly Property AlchemicalBonusColumn As DataColumn
            Get
                Return Me.columnAlchemicalBonus
            End Get
        End Property
        
        Public ReadOnly Property CircumstanceBonusColumn As DataColumn
            Get
                Return Me.columnCircumstanceBonus
            End Get
        End Property
        
        Public ReadOnly Property CompetenceBonusColumn As DataColumn
            Get
                Return Me.columnCompetenceBonus
            End Get
        End Property
        
        Public ReadOnly Property DodgeBonusColumn As DataColumn
            Get
                Return Me.columnDodgeBonus
            End Get
        End Property
        
        Public ReadOnly Property EnhancementBonusColumn As DataColumn
            Get
                Return Me.columnEnhancementBonus
            End Get
        End Property
        
        Public ReadOnly Property InherentBonusColumn As DataColumn
            Get
                Return Me.columnInherentBonus
            End Get
        End Property
        
        Public ReadOnly Property InsightBonusColumn As DataColumn
            Get
                Return Me.columnInsightBonus
            End Get
        End Property
        
        Public ReadOnly Property LuckBonusColumn As DataColumn
            Get
                Return Me.columnLuckBonus
            End Get
        End Property
        
        Public ReadOnly Property MoraleBonusColumn As DataColumn
            Get
                Return Me.columnMoraleBonus
            End Get
        End Property
        
        Public ReadOnly Property ProfaneBonusColumn As DataColumn
            Get
                Return Me.columnProfaneBonus
            End Get
        End Property
        
        Public ReadOnly Property RacialBonusColumn As DataColumn
            Get
                Return Me.columnRacialBonus
            End Get
        End Property
        
        Public ReadOnly Property ResistanceBonusColumn As DataColumn
            Get
                Return Me.columnResistanceBonus
            End Get
        End Property
        
        Public ReadOnly Property SacredBonusColumn As DataColumn
            Get
                Return Me.columnSacredBonus
            End Get
        End Property
        
        Public ReadOnly Property UndefinedBonusColumn As DataColumn
            Get
                Return Me.columnUndefinedBonus
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ArmorClassRow
            Get
                Return CType(Me.Rows(index),ArmorClassRow)
            End Get
        End Property
        
        Public Event ArmorClassRowChanged As ArmorClassRowChangeEventHandler
        
        Public Event ArmorClassRowChanging As ArmorClassRowChangeEventHandler
        
        Public Event ArmorClassRowDeleted As ArmorClassRowChangeEventHandler
        
        Public Event ArmorClassRowDeleting As ArmorClassRowChangeEventHandler
        
        Public Overloads Sub AddArmorClassRow(ByVal row As ArmorClassRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddArmorClassRow( _
                    ByVal ArmorBonus As String,  _
                    ByVal ShieldBonus As String,  _
                    ByVal DexBonus As String,  _
                    ByVal SizeBonus As String,  _
                    ByVal NaturalArmorBonus As String,  _
                    ByVal DeflectionBonus As String,  _
                    ByVal AlchemicalBonus As String,  _
                    ByVal CircumstanceBonus As String,  _
                    ByVal CompetenceBonus As String,  _
                    ByVal DodgeBonus As String,  _
                    ByVal EnhancementBonus As String,  _
                    ByVal InherentBonus As String,  _
                    ByVal InsightBonus As String,  _
                    ByVal LuckBonus As String,  _
                    ByVal MoraleBonus As String,  _
                    ByVal ProfaneBonus As String,  _
                    ByVal RacialBonus As String,  _
                    ByVal ResistanceBonus As String,  _
                    ByVal SacredBonus As String,  _
                    ByVal UndefinedBonus As String,  _
                    ByVal parentCharacterRowByCharacter_ArmorClass As CharacterRow) As ArmorClassRow
            Dim rowArmorClassRow As ArmorClassRow = CType(Me.NewRow,ArmorClassRow)
            rowArmorClassRow.ItemArray = New Object() {ArmorBonus, ShieldBonus, DexBonus, SizeBonus, NaturalArmorBonus, DeflectionBonus, AlchemicalBonus, CircumstanceBonus, CompetenceBonus, DodgeBonus, EnhancementBonus, InherentBonus, InsightBonus, LuckBonus, MoraleBonus, ProfaneBonus, RacialBonus, ResistanceBonus, SacredBonus, UndefinedBonus, parentCharacterRowByCharacter_ArmorClass(86)}
            Me.Rows.Add(rowArmorClassRow)
            Return rowArmorClassRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ArmorClassDataTable = CType(MyBase.Clone,ArmorClassDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ArmorClassDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnArmorBonus = Me.Columns("ArmorBonus")
            Me.columnShieldBonus = Me.Columns("ShieldBonus")
            Me.columnDexBonus = Me.Columns("DexBonus")
            Me.columnSizeBonus = Me.Columns("SizeBonus")
            Me.columnNaturalArmorBonus = Me.Columns("NaturalArmorBonus")
            Me.columnDeflectionBonus = Me.Columns("DeflectionBonus")
            Me.columnAlchemicalBonus = Me.Columns("AlchemicalBonus")
            Me.columnCircumstanceBonus = Me.Columns("CircumstanceBonus")
            Me.columnCompetenceBonus = Me.Columns("CompetenceBonus")
            Me.columnDodgeBonus = Me.Columns("DodgeBonus")
            Me.columnEnhancementBonus = Me.Columns("EnhancementBonus")
            Me.columnInherentBonus = Me.Columns("InherentBonus")
            Me.columnInsightBonus = Me.Columns("InsightBonus")
            Me.columnLuckBonus = Me.Columns("LuckBonus")
            Me.columnMoraleBonus = Me.Columns("MoraleBonus")
            Me.columnProfaneBonus = Me.Columns("ProfaneBonus")
            Me.columnRacialBonus = Me.Columns("RacialBonus")
            Me.columnResistanceBonus = Me.Columns("ResistanceBonus")
            Me.columnSacredBonus = Me.Columns("SacredBonus")
            Me.columnUndefinedBonus = Me.Columns("UndefinedBonus")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnArmorBonus = New DataColumn("ArmorBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmorBonus)
            Me.columnShieldBonus = New DataColumn("ShieldBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShieldBonus)
            Me.columnDexBonus = New DataColumn("DexBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDexBonus)
            Me.columnSizeBonus = New DataColumn("SizeBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSizeBonus)
            Me.columnNaturalArmorBonus = New DataColumn("NaturalArmorBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNaturalArmorBonus)
            Me.columnDeflectionBonus = New DataColumn("DeflectionBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeflectionBonus)
            Me.columnAlchemicalBonus = New DataColumn("AlchemicalBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlchemicalBonus)
            Me.columnCircumstanceBonus = New DataColumn("CircumstanceBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCircumstanceBonus)
            Me.columnCompetenceBonus = New DataColumn("CompetenceBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompetenceBonus)
            Me.columnDodgeBonus = New DataColumn("DodgeBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDodgeBonus)
            Me.columnEnhancementBonus = New DataColumn("EnhancementBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEnhancementBonus)
            Me.columnInherentBonus = New DataColumn("InherentBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInherentBonus)
            Me.columnInsightBonus = New DataColumn("InsightBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInsightBonus)
            Me.columnLuckBonus = New DataColumn("LuckBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLuckBonus)
            Me.columnMoraleBonus = New DataColumn("MoraleBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMoraleBonus)
            Me.columnProfaneBonus = New DataColumn("ProfaneBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProfaneBonus)
            Me.columnRacialBonus = New DataColumn("RacialBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRacialBonus)
            Me.columnResistanceBonus = New DataColumn("ResistanceBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnResistanceBonus)
            Me.columnSacredBonus = New DataColumn("SacredBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSacredBonus)
            Me.columnUndefinedBonus = New DataColumn("UndefinedBonus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUndefinedBonus)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
        End Sub
        
        Public Function NewArmorClassRow() As ArmorClassRow
            Return CType(Me.NewRow,ArmorClassRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ArmorClassRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ArmorClassRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ArmorClassRowChangedEvent) Is Nothing) Then
                RaiseEvent ArmorClassRowChanged(Me, New ArmorClassRowChangeEvent(CType(e.Row,ArmorClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ArmorClassRowChangingEvent) Is Nothing) Then
                RaiseEvent ArmorClassRowChanging(Me, New ArmorClassRowChangeEvent(CType(e.Row,ArmorClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ArmorClassRowDeletedEvent) Is Nothing) Then
                RaiseEvent ArmorClassRowDeleted(Me, New ArmorClassRowChangeEvent(CType(e.Row,ArmorClassRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ArmorClassRowDeletingEvent) Is Nothing) Then
                RaiseEvent ArmorClassRowDeleting(Me, New ArmorClassRowChangeEvent(CType(e.Row,ArmorClassRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveArmorClassRow(ByVal row As ArmorClassRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ArmorClassRow
        Inherits DataRow
        
        Private tableArmorClass As ArmorClassDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableArmorClass = CType(Me.Table,ArmorClassDataTable)
        End Sub
        
        Public Property ArmorBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.ArmorBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.ArmorBonusColumn) = value
            End Set
        End Property
        
        Public Property ShieldBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.ShieldBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.ShieldBonusColumn) = value
            End Set
        End Property
        
        Public Property DexBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.DexBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.DexBonusColumn) = value
            End Set
        End Property
        
        Public Property SizeBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.SizeBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.SizeBonusColumn) = value
            End Set
        End Property
        
        Public Property NaturalArmorBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.NaturalArmorBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.NaturalArmorBonusColumn) = value
            End Set
        End Property
        
        Public Property DeflectionBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.DeflectionBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.DeflectionBonusColumn) = value
            End Set
        End Property
        
        Public Property AlchemicalBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.AlchemicalBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.AlchemicalBonusColumn) = value
            End Set
        End Property
        
        Public Property CircumstanceBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.CircumstanceBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.CircumstanceBonusColumn) = value
            End Set
        End Property
        
        Public Property CompetenceBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.CompetenceBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.CompetenceBonusColumn) = value
            End Set
        End Property
        
        Public Property DodgeBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.DodgeBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.DodgeBonusColumn) = value
            End Set
        End Property
        
        Public Property EnhancementBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.EnhancementBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.EnhancementBonusColumn) = value
            End Set
        End Property
        
        Public Property InherentBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.InherentBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.InherentBonusColumn) = value
            End Set
        End Property
        
        Public Property InsightBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.InsightBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.InsightBonusColumn) = value
            End Set
        End Property
        
        Public Property LuckBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.LuckBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.LuckBonusColumn) = value
            End Set
        End Property
        
        Public Property MoraleBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.MoraleBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.MoraleBonusColumn) = value
            End Set
        End Property
        
        Public Property ProfaneBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.ProfaneBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.ProfaneBonusColumn) = value
            End Set
        End Property
        
        Public Property RacialBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.RacialBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.RacialBonusColumn) = value
            End Set
        End Property
        
        Public Property ResistanceBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.ResistanceBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.ResistanceBonusColumn) = value
            End Set
        End Property
        
        Public Property SacredBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.SacredBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.SacredBonusColumn) = value
            End Set
        End Property
        
        Public Property UndefinedBonus As String
            Get
                Try 
                    Return CType(Me(Me.tableArmorClass.UndefinedBonusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableArmorClass.UndefinedBonusColumn) = value
            End Set
        End Property
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_ArmorClass")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_ArmorClass"))
            End Set
        End Property
        
        Public Function IsArmorBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.ArmorBonusColumn)
        End Function
        
        Public Sub SetArmorBonusNull()
            Me(Me.tableArmorClass.ArmorBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShieldBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.ShieldBonusColumn)
        End Function
        
        Public Sub SetShieldBonusNull()
            Me(Me.tableArmorClass.ShieldBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDexBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.DexBonusColumn)
        End Function
        
        Public Sub SetDexBonusNull()
            Me(Me.tableArmorClass.DexBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSizeBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.SizeBonusColumn)
        End Function
        
        Public Sub SetSizeBonusNull()
            Me(Me.tableArmorClass.SizeBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNaturalArmorBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.NaturalArmorBonusColumn)
        End Function
        
        Public Sub SetNaturalArmorBonusNull()
            Me(Me.tableArmorClass.NaturalArmorBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeflectionBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.DeflectionBonusColumn)
        End Function
        
        Public Sub SetDeflectionBonusNull()
            Me(Me.tableArmorClass.DeflectionBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlchemicalBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.AlchemicalBonusColumn)
        End Function
        
        Public Sub SetAlchemicalBonusNull()
            Me(Me.tableArmorClass.AlchemicalBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCircumstanceBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.CircumstanceBonusColumn)
        End Function
        
        Public Sub SetCircumstanceBonusNull()
            Me(Me.tableArmorClass.CircumstanceBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompetenceBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.CompetenceBonusColumn)
        End Function
        
        Public Sub SetCompetenceBonusNull()
            Me(Me.tableArmorClass.CompetenceBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDodgeBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.DodgeBonusColumn)
        End Function
        
        Public Sub SetDodgeBonusNull()
            Me(Me.tableArmorClass.DodgeBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEnhancementBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.EnhancementBonusColumn)
        End Function
        
        Public Sub SetEnhancementBonusNull()
            Me(Me.tableArmorClass.EnhancementBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInherentBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.InherentBonusColumn)
        End Function
        
        Public Sub SetInherentBonusNull()
            Me(Me.tableArmorClass.InherentBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInsightBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.InsightBonusColumn)
        End Function
        
        Public Sub SetInsightBonusNull()
            Me(Me.tableArmorClass.InsightBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLuckBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.LuckBonusColumn)
        End Function
        
        Public Sub SetLuckBonusNull()
            Me(Me.tableArmorClass.LuckBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMoraleBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.MoraleBonusColumn)
        End Function
        
        Public Sub SetMoraleBonusNull()
            Me(Me.tableArmorClass.MoraleBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsProfaneBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.ProfaneBonusColumn)
        End Function
        
        Public Sub SetProfaneBonusNull()
            Me(Me.tableArmorClass.ProfaneBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRacialBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.RacialBonusColumn)
        End Function
        
        Public Sub SetRacialBonusNull()
            Me(Me.tableArmorClass.RacialBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsResistanceBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.ResistanceBonusColumn)
        End Function
        
        Public Sub SetResistanceBonusNull()
            Me(Me.tableArmorClass.ResistanceBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSacredBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.SacredBonusColumn)
        End Function
        
        Public Sub SetSacredBonusNull()
            Me(Me.tableArmorClass.SacredBonusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUndefinedBonusNull() As Boolean
            Return Me.IsNull(Me.tableArmorClass.UndefinedBonusColumn)
        End Function
        
        Public Sub SetUndefinedBonusNull()
            Me(Me.tableArmorClass.UndefinedBonusColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ArmorClassRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ArmorClassRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ArmorClassRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ArmorClassRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SavingThrowsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSavingThrows_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SavingThrows")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SavingThrows_IdColumn As DataColumn
            Get
                Return Me.columnSavingThrows_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SavingThrowsRow
            Get
                Return CType(Me.Rows(index),SavingThrowsRow)
            End Get
        End Property
        
        Public Event SavingThrowsRowChanged As SavingThrowsRowChangeEventHandler
        
        Public Event SavingThrowsRowChanging As SavingThrowsRowChangeEventHandler
        
        Public Event SavingThrowsRowDeleted As SavingThrowsRowChangeEventHandler
        
        Public Event SavingThrowsRowDeleting As SavingThrowsRowChangeEventHandler
        
        Public Overloads Sub AddSavingThrowsRow(ByVal row As SavingThrowsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSavingThrowsRow(ByVal parentCharacterRowByCharacter_SavingThrows As CharacterRow) As SavingThrowsRow
            Dim rowSavingThrowsRow As SavingThrowsRow = CType(Me.NewRow,SavingThrowsRow)
            rowSavingThrowsRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_SavingThrows(86)}
            Me.Rows.Add(rowSavingThrowsRow)
            Return rowSavingThrowsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SavingThrowsDataTable = CType(MyBase.Clone,SavingThrowsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SavingThrowsDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSavingThrows_Id = Me.Columns("SavingThrows_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSavingThrows_Id = New DataColumn("SavingThrows_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSavingThrows_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSavingThrows_Id}, true))
            Me.columnSavingThrows_Id.AutoIncrement = true
            Me.columnSavingThrows_Id.AllowDBNull = false
            Me.columnSavingThrows_Id.Unique = true
        End Sub
        
        Public Function NewSavingThrowsRow() As SavingThrowsRow
            Return CType(Me.NewRow,SavingThrowsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SavingThrowsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SavingThrowsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SavingThrowsRowChangedEvent) Is Nothing) Then
                RaiseEvent SavingThrowsRowChanged(Me, New SavingThrowsRowChangeEvent(CType(e.Row,SavingThrowsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SavingThrowsRowChangingEvent) Is Nothing) Then
                RaiseEvent SavingThrowsRowChanging(Me, New SavingThrowsRowChangeEvent(CType(e.Row,SavingThrowsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SavingThrowsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SavingThrowsRowDeleted(Me, New SavingThrowsRowChangeEvent(CType(e.Row,SavingThrowsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SavingThrowsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SavingThrowsRowDeleting(Me, New SavingThrowsRowChangeEvent(CType(e.Row,SavingThrowsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSavingThrowsRow(ByVal row As SavingThrowsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SavingThrowsRow
        Inherits DataRow
        
        Private tableSavingThrows As SavingThrowsDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSavingThrows = CType(Me.Table,SavingThrowsDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_SavingThrows")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_SavingThrows"))
            End Set
        End Property
        
        Public Function GetSavingThrowRows() As SavingThrowRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SavingThrows_SavingThrow")),SavingThrowRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SavingThrowsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SavingThrowsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SavingThrowsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SavingThrowsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SavingThrowDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnBaseSave As DataColumn
        
        Private columnAbilityModifier As DataColumn
        
        Private columnMagicSave As DataColumn
        
        Private columnMiscSave As DataColumn
        
        Private columnSavingThrows_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SavingThrow")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Public ReadOnly Property BaseSaveColumn As DataColumn
            Get
                Return Me.columnBaseSave
            End Get
        End Property
        
        Public ReadOnly Property AbilityModifierColumn As DataColumn
            Get
                Return Me.columnAbilityModifier
            End Get
        End Property
        
        Public ReadOnly Property MagicSaveColumn As DataColumn
            Get
                Return Me.columnMagicSave
            End Get
        End Property
        
        Public ReadOnly Property MiscSaveColumn As DataColumn
            Get
                Return Me.columnMiscSave
            End Get
        End Property
        
        Public ReadOnly Property SavingThrows_IdColumn As DataColumn
            Get
                Return Me.columnSavingThrows_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SavingThrowRow
            Get
                Return CType(Me.Rows(index),SavingThrowRow)
            End Get
        End Property
        
        Public Event SavingThrowRowChanged As SavingThrowRowChangeEventHandler
        
        Public Event SavingThrowRowChanging As SavingThrowRowChangeEventHandler
        
        Public Event SavingThrowRowDeleted As SavingThrowRowChangeEventHandler
        
        Public Event SavingThrowRowDeleting As SavingThrowRowChangeEventHandler
        
        Public Overloads Sub AddSavingThrowRow(ByVal row As SavingThrowRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSavingThrowRow(ByVal Name As String, ByVal BaseSave As String, ByVal AbilityModifier As String, ByVal MagicSave As String, ByVal MiscSave As String, ByVal parentSavingThrowsRowBySavingThrows_SavingThrow As SavingThrowsRow) As SavingThrowRow
            Dim rowSavingThrowRow As SavingThrowRow = CType(Me.NewRow,SavingThrowRow)
            rowSavingThrowRow.ItemArray = New Object() {Name, BaseSave, AbilityModifier, MagicSave, MiscSave, parentSavingThrowsRowBySavingThrows_SavingThrow(0)}
            Me.Rows.Add(rowSavingThrowRow)
            Return rowSavingThrowRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SavingThrowDataTable = CType(MyBase.Clone,SavingThrowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SavingThrowDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnBaseSave = Me.Columns("BaseSave")
            Me.columnAbilityModifier = Me.Columns("AbilityModifier")
            Me.columnMagicSave = Me.Columns("MagicSave")
            Me.columnMiscSave = Me.Columns("MiscSave")
            Me.columnSavingThrows_Id = Me.Columns("SavingThrows_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnBaseSave = New DataColumn("BaseSave", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseSave)
            Me.columnAbilityModifier = New DataColumn("AbilityModifier", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAbilityModifier)
            Me.columnMagicSave = New DataColumn("MagicSave", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMagicSave)
            Me.columnMiscSave = New DataColumn("MiscSave", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiscSave)
            Me.columnSavingThrows_Id = New DataColumn("SavingThrows_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSavingThrows_Id)
        End Sub
        
        Public Function NewSavingThrowRow() As SavingThrowRow
            Return CType(Me.NewRow,SavingThrowRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SavingThrowRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SavingThrowRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SavingThrowRowChangedEvent) Is Nothing) Then
                RaiseEvent SavingThrowRowChanged(Me, New SavingThrowRowChangeEvent(CType(e.Row,SavingThrowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SavingThrowRowChangingEvent) Is Nothing) Then
                RaiseEvent SavingThrowRowChanging(Me, New SavingThrowRowChangeEvent(CType(e.Row,SavingThrowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SavingThrowRowDeletedEvent) Is Nothing) Then
                RaiseEvent SavingThrowRowDeleted(Me, New SavingThrowRowChangeEvent(CType(e.Row,SavingThrowRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SavingThrowRowDeletingEvent) Is Nothing) Then
                RaiseEvent SavingThrowRowDeleting(Me, New SavingThrowRowChangeEvent(CType(e.Row,SavingThrowRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSavingThrowRow(ByVal row As SavingThrowRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SavingThrowRow
        Inherits DataRow
        
        Private tableSavingThrow As SavingThrowDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSavingThrow = CType(Me.Table,SavingThrowDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableSavingThrow.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSavingThrow.NameColumn) = value
            End Set
        End Property
        
        Public Property BaseSave As String
            Get
                Try 
                    Return CType(Me(Me.tableSavingThrow.BaseSaveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSavingThrow.BaseSaveColumn) = value
            End Set
        End Property
        
        Public Property AbilityModifier As String
            Get
                Try 
                    Return CType(Me(Me.tableSavingThrow.AbilityModifierColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSavingThrow.AbilityModifierColumn) = value
            End Set
        End Property
        
        Public Property MagicSave As String
            Get
                Try 
                    Return CType(Me(Me.tableSavingThrow.MagicSaveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSavingThrow.MagicSaveColumn) = value
            End Set
        End Property
        
        Public Property MiscSave As String
            Get
                Try 
                    Return CType(Me(Me.tableSavingThrow.MiscSaveColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSavingThrow.MiscSaveColumn) = value
            End Set
        End Property
        
        Public Property SavingThrowsRow As SavingThrowsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SavingThrows_SavingThrow")),SavingThrowsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SavingThrows_SavingThrow"))
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableSavingThrow.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableSavingThrow.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseSaveNull() As Boolean
            Return Me.IsNull(Me.tableSavingThrow.BaseSaveColumn)
        End Function
        
        Public Sub SetBaseSaveNull()
            Me(Me.tableSavingThrow.BaseSaveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAbilityModifierNull() As Boolean
            Return Me.IsNull(Me.tableSavingThrow.AbilityModifierColumn)
        End Function
        
        Public Sub SetAbilityModifierNull()
            Me(Me.tableSavingThrow.AbilityModifierColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMagicSaveNull() As Boolean
            Return Me.IsNull(Me.tableSavingThrow.MagicSaveColumn)
        End Function
        
        Public Sub SetMagicSaveNull()
            Me(Me.tableSavingThrow.MagicSaveColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiscSaveNull() As Boolean
            Return Me.IsNull(Me.tableSavingThrow.MiscSaveColumn)
        End Function
        
        Public Sub SetMiscSaveNull()
            Me(Me.tableSavingThrow.MiscSaveColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SavingThrowRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SavingThrowRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SavingThrowRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SavingThrowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityScoresDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAbilityScores_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("AbilityScores")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property AbilityScores_IdColumn As DataColumn
            Get
                Return Me.columnAbilityScores_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AbilityScoresRow
            Get
                Return CType(Me.Rows(index),AbilityScoresRow)
            End Get
        End Property
        
        Public Event AbilityScoresRowChanged As AbilityScoresRowChangeEventHandler
        
        Public Event AbilityScoresRowChanging As AbilityScoresRowChangeEventHandler
        
        Public Event AbilityScoresRowDeleted As AbilityScoresRowChangeEventHandler
        
        Public Event AbilityScoresRowDeleting As AbilityScoresRowChangeEventHandler
        
        Public Overloads Sub AddAbilityScoresRow(ByVal row As AbilityScoresRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAbilityScoresRow(ByVal parentCharacterRowByCharacter_AbilityScores As CharacterRow) As AbilityScoresRow
            Dim rowAbilityScoresRow As AbilityScoresRow = CType(Me.NewRow,AbilityScoresRow)
            rowAbilityScoresRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_AbilityScores(86)}
            Me.Rows.Add(rowAbilityScoresRow)
            Return rowAbilityScoresRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AbilityScoresDataTable = CType(MyBase.Clone,AbilityScoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AbilityScoresDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnAbilityScores_Id = Me.Columns("AbilityScores_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAbilityScores_Id = New DataColumn("AbilityScores_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAbilityScores_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAbilityScores_Id}, true))
            Me.columnAbilityScores_Id.AutoIncrement = true
            Me.columnAbilityScores_Id.AllowDBNull = false
            Me.columnAbilityScores_Id.Unique = true
        End Sub
        
        Public Function NewAbilityScoresRow() As AbilityScoresRow
            Return CType(Me.NewRow,AbilityScoresRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AbilityScoresRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AbilityScoresRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AbilityScoresRowChangedEvent) Is Nothing) Then
                RaiseEvent AbilityScoresRowChanged(Me, New AbilityScoresRowChangeEvent(CType(e.Row,AbilityScoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AbilityScoresRowChangingEvent) Is Nothing) Then
                RaiseEvent AbilityScoresRowChanging(Me, New AbilityScoresRowChangeEvent(CType(e.Row,AbilityScoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AbilityScoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent AbilityScoresRowDeleted(Me, New AbilityScoresRowChangeEvent(CType(e.Row,AbilityScoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AbilityScoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent AbilityScoresRowDeleting(Me, New AbilityScoresRowChangeEvent(CType(e.Row,AbilityScoresRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAbilityScoresRow(ByVal row As AbilityScoresRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityScoresRow
        Inherits DataRow
        
        Private tableAbilityScores As AbilityScoresDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAbilityScores = CType(Me.Table,AbilityScoresDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_AbilityScores")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_AbilityScores"))
            End Set
        End Property
        
        Public Function GetAbilityScoreRows() As AbilityScoreRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AbilityScores_AbilityScore")),AbilityScoreRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityScoresRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AbilityScoresRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AbilityScoresRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AbilityScoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityScoreDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnBaseScore As DataColumn
        
        Private columnRacialMod As DataColumn
        
        Private columnMagicMod As DataColumn
        
        Private columnMiscMod As DataColumn
        
        Private columnAbilityScores_Id As DataColumn
        
        Public Sub New()
            MyBase.New("AbilityScore")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Public ReadOnly Property BaseScoreColumn As DataColumn
            Get
                Return Me.columnBaseScore
            End Get
        End Property
        
        Public ReadOnly Property RacialModColumn As DataColumn
            Get
                Return Me.columnRacialMod
            End Get
        End Property
        
        Public ReadOnly Property MagicModColumn As DataColumn
            Get
                Return Me.columnMagicMod
            End Get
        End Property
        
        Public ReadOnly Property MiscModColumn As DataColumn
            Get
                Return Me.columnMiscMod
            End Get
        End Property
        
        Public ReadOnly Property AbilityScores_IdColumn As DataColumn
            Get
                Return Me.columnAbilityScores_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AbilityScoreRow
            Get
                Return CType(Me.Rows(index),AbilityScoreRow)
            End Get
        End Property
        
        Public Event AbilityScoreRowChanged As AbilityScoreRowChangeEventHandler
        
        Public Event AbilityScoreRowChanging As AbilityScoreRowChangeEventHandler
        
        Public Event AbilityScoreRowDeleted As AbilityScoreRowChangeEventHandler
        
        Public Event AbilityScoreRowDeleting As AbilityScoreRowChangeEventHandler
        
        Public Overloads Sub AddAbilityScoreRow(ByVal row As AbilityScoreRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAbilityScoreRow(ByVal Name As String, ByVal BaseScore As String, ByVal RacialMod As String, ByVal MagicMod As String, ByVal MiscMod As String, ByVal parentAbilityScoresRowByAbilityScores_AbilityScore As AbilityScoresRow) As AbilityScoreRow
            Dim rowAbilityScoreRow As AbilityScoreRow = CType(Me.NewRow,AbilityScoreRow)
            rowAbilityScoreRow.ItemArray = New Object() {Name, BaseScore, RacialMod, MagicMod, MiscMod, parentAbilityScoresRowByAbilityScores_AbilityScore(0)}
            Me.Rows.Add(rowAbilityScoreRow)
            Return rowAbilityScoreRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AbilityScoreDataTable = CType(MyBase.Clone,AbilityScoreDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AbilityScoreDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnBaseScore = Me.Columns("BaseScore")
            Me.columnRacialMod = Me.Columns("RacialMod")
            Me.columnMagicMod = Me.Columns("MagicMod")
            Me.columnMiscMod = Me.Columns("MiscMod")
            Me.columnAbilityScores_Id = Me.Columns("AbilityScores_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnName)
            Me.columnBaseScore = New DataColumn("BaseScore", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBaseScore)
            Me.columnRacialMod = New DataColumn("RacialMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRacialMod)
            Me.columnMagicMod = New DataColumn("MagicMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMagicMod)
            Me.columnMiscMod = New DataColumn("MiscMod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiscMod)
            Me.columnAbilityScores_Id = New DataColumn("AbilityScores_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAbilityScores_Id)
        End Sub
        
        Public Function NewAbilityScoreRow() As AbilityScoreRow
            Return CType(Me.NewRow,AbilityScoreRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AbilityScoreRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AbilityScoreRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AbilityScoreRowChangedEvent) Is Nothing) Then
                RaiseEvent AbilityScoreRowChanged(Me, New AbilityScoreRowChangeEvent(CType(e.Row,AbilityScoreRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AbilityScoreRowChangingEvent) Is Nothing) Then
                RaiseEvent AbilityScoreRowChanging(Me, New AbilityScoreRowChangeEvent(CType(e.Row,AbilityScoreRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AbilityScoreRowDeletedEvent) Is Nothing) Then
                RaiseEvent AbilityScoreRowDeleted(Me, New AbilityScoreRowChangeEvent(CType(e.Row,AbilityScoreRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AbilityScoreRowDeletingEvent) Is Nothing) Then
                RaiseEvent AbilityScoreRowDeleting(Me, New AbilityScoreRowChangeEvent(CType(e.Row,AbilityScoreRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAbilityScoreRow(ByVal row As AbilityScoreRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityScoreRow
        Inherits DataRow
        
        Private tableAbilityScore As AbilityScoreDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAbilityScore = CType(Me.Table,AbilityScoreDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityScore.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityScore.NameColumn) = value
            End Set
        End Property
        
        Public Property BaseScore As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityScore.BaseScoreColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityScore.BaseScoreColumn) = value
            End Set
        End Property
        
        Public Property RacialMod As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityScore.RacialModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityScore.RacialModColumn) = value
            End Set
        End Property
        
        Public Property MagicMod As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityScore.MagicModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityScore.MagicModColumn) = value
            End Set
        End Property
        
        Public Property MiscMod As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityScore.MiscModColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityScore.MiscModColumn) = value
            End Set
        End Property
        
        Public Property AbilityScoresRow As AbilityScoresRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AbilityScores_AbilityScore")),AbilityScoresRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AbilityScores_AbilityScore"))
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableAbilityScore.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableAbilityScore.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBaseScoreNull() As Boolean
            Return Me.IsNull(Me.tableAbilityScore.BaseScoreColumn)
        End Function
        
        Public Sub SetBaseScoreNull()
            Me(Me.tableAbilityScore.BaseScoreColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRacialModNull() As Boolean
            Return Me.IsNull(Me.tableAbilityScore.RacialModColumn)
        End Function
        
        Public Sub SetRacialModNull()
            Me(Me.tableAbilityScore.RacialModColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMagicModNull() As Boolean
            Return Me.IsNull(Me.tableAbilityScore.MagicModColumn)
        End Function
        
        Public Sub SetMagicModNull()
            Me(Me.tableAbilityScore.MagicModColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiscModNull() As Boolean
            Return Me.IsNull(Me.tableAbilityScore.MiscModColumn)
        End Function
        
        Public Sub SetMiscModNull()
            Me(Me.tableAbilityScore.MiscModColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityScoreRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AbilityScoreRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AbilityScoreRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AbilityScoreRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsiLikeAbilitiesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPsiLikeAbilities_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PsiLikeAbilities")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PsiLikeAbilities_IdColumn As DataColumn
            Get
                Return Me.columnPsiLikeAbilities_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PsiLikeAbilitiesRow
            Get
                Return CType(Me.Rows(index),PsiLikeAbilitiesRow)
            End Get
        End Property
        
        Public Event PsiLikeAbilitiesRowChanged As PsiLikeAbilitiesRowChangeEventHandler
        
        Public Event PsiLikeAbilitiesRowChanging As PsiLikeAbilitiesRowChangeEventHandler
        
        Public Event PsiLikeAbilitiesRowDeleted As PsiLikeAbilitiesRowChangeEventHandler
        
        Public Event PsiLikeAbilitiesRowDeleting As PsiLikeAbilitiesRowChangeEventHandler
        
        Public Overloads Sub AddPsiLikeAbilitiesRow(ByVal row As PsiLikeAbilitiesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPsiLikeAbilitiesRow(ByVal parentCharacterRowByCharacter_PsiLikeAbilities As CharacterRow) As PsiLikeAbilitiesRow
            Dim rowPsiLikeAbilitiesRow As PsiLikeAbilitiesRow = CType(Me.NewRow,PsiLikeAbilitiesRow)
            rowPsiLikeAbilitiesRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_PsiLikeAbilities(86)}
            Me.Rows.Add(rowPsiLikeAbilitiesRow)
            Return rowPsiLikeAbilitiesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PsiLikeAbilitiesDataTable = CType(MyBase.Clone,PsiLikeAbilitiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PsiLikeAbilitiesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPsiLikeAbilities_Id = Me.Columns("PsiLikeAbilities_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPsiLikeAbilities_Id = New DataColumn("PsiLikeAbilities_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPsiLikeAbilities_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPsiLikeAbilities_Id}, true))
            Me.columnPsiLikeAbilities_Id.AutoIncrement = true
            Me.columnPsiLikeAbilities_Id.AllowDBNull = false
            Me.columnPsiLikeAbilities_Id.Unique = true
        End Sub
        
        Public Function NewPsiLikeAbilitiesRow() As PsiLikeAbilitiesRow
            Return CType(Me.NewRow,PsiLikeAbilitiesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PsiLikeAbilitiesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PsiLikeAbilitiesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PsiLikeAbilitiesRowChangedEvent) Is Nothing) Then
                RaiseEvent PsiLikeAbilitiesRowChanged(Me, New PsiLikeAbilitiesRowChangeEvent(CType(e.Row,PsiLikeAbilitiesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PsiLikeAbilitiesRowChangingEvent) Is Nothing) Then
                RaiseEvent PsiLikeAbilitiesRowChanging(Me, New PsiLikeAbilitiesRowChangeEvent(CType(e.Row,PsiLikeAbilitiesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PsiLikeAbilitiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PsiLikeAbilitiesRowDeleted(Me, New PsiLikeAbilitiesRowChangeEvent(CType(e.Row,PsiLikeAbilitiesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PsiLikeAbilitiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PsiLikeAbilitiesRowDeleting(Me, New PsiLikeAbilitiesRowChangeEvent(CType(e.Row,PsiLikeAbilitiesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePsiLikeAbilitiesRow(ByVal row As PsiLikeAbilitiesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsiLikeAbilitiesRow
        Inherits DataRow
        
        Private tablePsiLikeAbilities As PsiLikeAbilitiesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePsiLikeAbilities = CType(Me.Table,PsiLikeAbilitiesDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_PsiLikeAbilities")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_PsiLikeAbilities"))
            End Set
        End Property
        
        Public Function GetPsiLikeAbilityRows() As PsiLikeAbilityRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PsiLikeAbilities_PsiLikeAbility")),PsiLikeAbilityRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsiLikeAbilitiesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PsiLikeAbilitiesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PsiLikeAbilitiesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PsiLikeAbilitiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsiLikeAbilityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPowerName As DataColumn
        
        Private columnUsage As DataColumn
        
        Private columnManifesterLevel As DataColumn
        
        Private columnClassName As DataColumn
        
        Private columnPowerLevel As DataColumn
        
        Private columnDCAbility As DataColumn
        
        Private columnDC As DataColumn
        
        Private columnNotes As DataColumn
        
        Private columnPsiLikeAbility_Id As DataColumn
        
        Private columnPsiLikeAbilities_Id As DataColumn
        
        Public Sub New()
            MyBase.New("PsiLikeAbility")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PowerNameColumn As DataColumn
            Get
                Return Me.columnPowerName
            End Get
        End Property
        
        Public ReadOnly Property UsageColumn As DataColumn
            Get
                Return Me.columnUsage
            End Get
        End Property
        
        Public ReadOnly Property ManifesterLevelColumn As DataColumn
            Get
                Return Me.columnManifesterLevel
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property PowerLevelColumn As DataColumn
            Get
                Return Me.columnPowerLevel
            End Get
        End Property
        
        Public ReadOnly Property DCAbilityColumn As DataColumn
            Get
                Return Me.columnDCAbility
            End Get
        End Property
        
        Public ReadOnly Property DCColumn As DataColumn
            Get
                Return Me.columnDC
            End Get
        End Property
        
        Public ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Public ReadOnly Property PsiLikeAbility_IdColumn As DataColumn
            Get
                Return Me.columnPsiLikeAbility_Id
            End Get
        End Property
        
        Public ReadOnly Property PsiLikeAbilities_IdColumn As DataColumn
            Get
                Return Me.columnPsiLikeAbilities_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PsiLikeAbilityRow
            Get
                Return CType(Me.Rows(index),PsiLikeAbilityRow)
            End Get
        End Property
        
        Public Event PsiLikeAbilityRowChanged As PsiLikeAbilityRowChangeEventHandler
        
        Public Event PsiLikeAbilityRowChanging As PsiLikeAbilityRowChangeEventHandler
        
        Public Event PsiLikeAbilityRowDeleted As PsiLikeAbilityRowChangeEventHandler
        
        Public Event PsiLikeAbilityRowDeleting As PsiLikeAbilityRowChangeEventHandler
        
        Public Overloads Sub AddPsiLikeAbilityRow(ByVal row As PsiLikeAbilityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPsiLikeAbilityRow(ByVal PowerName As String, ByVal Usage As String, ByVal ManifesterLevel As String, ByVal ClassName As String, ByVal PowerLevel As String, ByVal DCAbility As String, ByVal DC As String, ByVal Notes As String, ByVal parentPsiLikeAbilitiesRowByPsiLikeAbilities_PsiLikeAbility As PsiLikeAbilitiesRow) As PsiLikeAbilityRow
            Dim rowPsiLikeAbilityRow As PsiLikeAbilityRow = CType(Me.NewRow,PsiLikeAbilityRow)
            rowPsiLikeAbilityRow.ItemArray = New Object() {PowerName, Usage, ManifesterLevel, ClassName, PowerLevel, DCAbility, DC, Notes, Nothing, parentPsiLikeAbilitiesRowByPsiLikeAbilities_PsiLikeAbility(0)}
            Me.Rows.Add(rowPsiLikeAbilityRow)
            Return rowPsiLikeAbilityRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PsiLikeAbilityDataTable = CType(MyBase.Clone,PsiLikeAbilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PsiLikeAbilityDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPowerName = Me.Columns("PowerName")
            Me.columnUsage = Me.Columns("Usage")
            Me.columnManifesterLevel = Me.Columns("ManifesterLevel")
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnPowerLevel = Me.Columns("PowerLevel")
            Me.columnDCAbility = Me.Columns("DCAbility")
            Me.columnDC = Me.Columns("DC")
            Me.columnNotes = Me.Columns("Notes")
            Me.columnPsiLikeAbility_Id = Me.Columns("PsiLikeAbility_Id")
            Me.columnPsiLikeAbilities_Id = Me.Columns("PsiLikeAbilities_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPowerName = New DataColumn("PowerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPowerName)
            Me.columnUsage = New DataColumn("Usage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsage)
            Me.columnManifesterLevel = New DataColumn("ManifesterLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnManifesterLevel)
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnPowerLevel = New DataColumn("PowerLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPowerLevel)
            Me.columnDCAbility = New DataColumn("DCAbility", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCAbility)
            Me.columnDC = New DataColumn("DC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDC)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnPsiLikeAbility_Id = New DataColumn("PsiLikeAbility_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPsiLikeAbility_Id)
            Me.columnPsiLikeAbilities_Id = New DataColumn("PsiLikeAbilities_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPsiLikeAbilities_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPsiLikeAbility_Id}, true))
            Me.columnPsiLikeAbility_Id.AutoIncrement = true
            Me.columnPsiLikeAbility_Id.AllowDBNull = false
            Me.columnPsiLikeAbility_Id.Unique = true
        End Sub
        
        Public Function NewPsiLikeAbilityRow() As PsiLikeAbilityRow
            Return CType(Me.NewRow,PsiLikeAbilityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PsiLikeAbilityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PsiLikeAbilityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PsiLikeAbilityRowChangedEvent) Is Nothing) Then
                RaiseEvent PsiLikeAbilityRowChanged(Me, New PsiLikeAbilityRowChangeEvent(CType(e.Row,PsiLikeAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PsiLikeAbilityRowChangingEvent) Is Nothing) Then
                RaiseEvent PsiLikeAbilityRowChanging(Me, New PsiLikeAbilityRowChangeEvent(CType(e.Row,PsiLikeAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PsiLikeAbilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent PsiLikeAbilityRowDeleted(Me, New PsiLikeAbilityRowChangeEvent(CType(e.Row,PsiLikeAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PsiLikeAbilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent PsiLikeAbilityRowDeleting(Me, New PsiLikeAbilityRowChangeEvent(CType(e.Row,PsiLikeAbilityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePsiLikeAbilityRow(ByVal row As PsiLikeAbilityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsiLikeAbilityRow
        Inherits DataRow
        
        Private tablePsiLikeAbility As PsiLikeAbilityDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePsiLikeAbility = CType(Me.Table,PsiLikeAbilityDataTable)
        End Sub
        
        Public Property PowerName As String
            Get
                Try 
                    Return CType(Me(Me.tablePsiLikeAbility.PowerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsiLikeAbility.PowerNameColumn) = value
            End Set
        End Property
        
        Public Property Usage As String
            Get
                Try 
                    Return CType(Me(Me.tablePsiLikeAbility.UsageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsiLikeAbility.UsageColumn) = value
            End Set
        End Property
        
        Public Property ManifesterLevel As String
            Get
                Try 
                    Return CType(Me(Me.tablePsiLikeAbility.ManifesterLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsiLikeAbility.ManifesterLevelColumn) = value
            End Set
        End Property
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tablePsiLikeAbility.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsiLikeAbility.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property PowerLevel As String
            Get
                Try 
                    Return CType(Me(Me.tablePsiLikeAbility.PowerLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsiLikeAbility.PowerLevelColumn) = value
            End Set
        End Property
        
        Public Property DCAbility As String
            Get
                Try 
                    Return CType(Me(Me.tablePsiLikeAbility.DCAbilityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsiLikeAbility.DCAbilityColumn) = value
            End Set
        End Property
        
        Public Property DC As String
            Get
                Try 
                    Return CType(Me(Me.tablePsiLikeAbility.DCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsiLikeAbility.DCColumn) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tablePsiLikeAbility.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePsiLikeAbility.NotesColumn) = value
            End Set
        End Property
        
        Public Property PsiLikeAbilitiesRow As PsiLikeAbilitiesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PsiLikeAbilities_PsiLikeAbility")),PsiLikeAbilitiesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PsiLikeAbilities_PsiLikeAbility"))
            End Set
        End Property
        
        Public Function IsPowerNameNull() As Boolean
            Return Me.IsNull(Me.tablePsiLikeAbility.PowerNameColumn)
        End Function
        
        Public Sub SetPowerNameNull()
            Me(Me.tablePsiLikeAbility.PowerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUsageNull() As Boolean
            Return Me.IsNull(Me.tablePsiLikeAbility.UsageColumn)
        End Function
        
        Public Sub SetUsageNull()
            Me(Me.tablePsiLikeAbility.UsageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsManifesterLevelNull() As Boolean
            Return Me.IsNull(Me.tablePsiLikeAbility.ManifesterLevelColumn)
        End Function
        
        Public Sub SetManifesterLevelNull()
            Me(Me.tablePsiLikeAbility.ManifesterLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tablePsiLikeAbility.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tablePsiLikeAbility.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPowerLevelNull() As Boolean
            Return Me.IsNull(Me.tablePsiLikeAbility.PowerLevelColumn)
        End Function
        
        Public Sub SetPowerLevelNull()
            Me(Me.tablePsiLikeAbility.PowerLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDCAbilityNull() As Boolean
            Return Me.IsNull(Me.tablePsiLikeAbility.DCAbilityColumn)
        End Function
        
        Public Sub SetDCAbilityNull()
            Me(Me.tablePsiLikeAbility.DCAbilityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDCNull() As Boolean
            Return Me.IsNull(Me.tablePsiLikeAbility.DCColumn)
        End Function
        
        Public Sub SetDCNull()
            Me(Me.tablePsiLikeAbility.DCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tablePsiLikeAbility.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tablePsiLikeAbility.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAbilityPowerRows() As AbilityPowerRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PsiLikeAbility_AbilityPower")),AbilityPowerRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PsiLikeAbilityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PsiLikeAbilityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PsiLikeAbilityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PsiLikeAbilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityPowerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPowerName As DataColumn
        
        Private columnDiscipline As DataColumn
        
        Private columnSubdiscipline As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnSourceType As DataColumn
        
        Private columnDescriptors As DataColumn
        
        Private columnDisplay As DataColumn
        
        Private columnTime As DataColumn
        
        Private columnRange As DataColumn
        
        Private columnTarget As DataColumn
        
        Private columnDuration As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnSavingThrow As DataColumn
        
        Private columnPowerResistance As DataColumn
        
        Private columnXPCost As DataColumn
        
        Private columnAugmentable As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnPsiLikeAbility_Id As DataColumn
        
        Public Sub New()
            MyBase.New("AbilityPower")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property PowerNameColumn As DataColumn
            Get
                Return Me.columnPowerName
            End Get
        End Property
        
        Public ReadOnly Property DisciplineColumn As DataColumn
            Get
                Return Me.columnDiscipline
            End Get
        End Property
        
        Public ReadOnly Property SubdisciplineColumn As DataColumn
            Get
                Return Me.columnSubdiscipline
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property SourceTypeColumn As DataColumn
            Get
                Return Me.columnSourceType
            End Get
        End Property
        
        Public ReadOnly Property DescriptorsColumn As DataColumn
            Get
                Return Me.columnDescriptors
            End Get
        End Property
        
        Public ReadOnly Property DisplayColumn As DataColumn
            Get
                Return Me.columnDisplay
            End Get
        End Property
        
        Public ReadOnly Property TimeColumn As DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        Public ReadOnly Property RangeColumn As DataColumn
            Get
                Return Me.columnRange
            End Get
        End Property
        
        Public ReadOnly Property TargetColumn As DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        Public ReadOnly Property DurationColumn As DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property SavingThrowColumn As DataColumn
            Get
                Return Me.columnSavingThrow
            End Get
        End Property
        
        Public ReadOnly Property PowerResistanceColumn As DataColumn
            Get
                Return Me.columnPowerResistance
            End Get
        End Property
        
        Public ReadOnly Property XPCostColumn As DataColumn
            Get
                Return Me.columnXPCost
            End Get
        End Property
        
        Public ReadOnly Property AugmentableColumn As DataColumn
            Get
                Return Me.columnAugmentable
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property PsiLikeAbility_IdColumn As DataColumn
            Get
                Return Me.columnPsiLikeAbility_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AbilityPowerRow
            Get
                Return CType(Me.Rows(index),AbilityPowerRow)
            End Get
        End Property
        
        Public Event AbilityPowerRowChanged As AbilityPowerRowChangeEventHandler
        
        Public Event AbilityPowerRowChanging As AbilityPowerRowChangeEventHandler
        
        Public Event AbilityPowerRowDeleted As AbilityPowerRowChangeEventHandler
        
        Public Event AbilityPowerRowDeleting As AbilityPowerRowChangeEventHandler
        
        Public Overloads Sub AddAbilityPowerRow(ByVal row As AbilityPowerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAbilityPowerRow( _
                    ByVal PowerName As String,  _
                    ByVal Discipline As String,  _
                    ByVal Subdiscipline As String,  _
                    ByVal Source As String,  _
                    ByVal SourceType As String,  _
                    ByVal Descriptors As String,  _
                    ByVal Display As String,  _
                    ByVal Time As String,  _
                    ByVal Range As String,  _
                    ByVal Target As String,  _
                    ByVal Duration As String,  _
                    ByVal Description As String,  _
                    ByVal SavingThrow As String,  _
                    ByVal PowerResistance As String,  _
                    ByVal XPCost As String,  _
                    ByVal Augmentable As String,  _
                    ByVal License As String,  _
                    ByVal Sourcebook As String,  _
                    ByVal Tags As String,  _
                    ByVal PageNo As String,  _
                    ByVal HelpPage As String,  _
                    ByVal parentPsiLikeAbilityRowByPsiLikeAbility_AbilityPower As PsiLikeAbilityRow) As AbilityPowerRow
            Dim rowAbilityPowerRow As AbilityPowerRow = CType(Me.NewRow,AbilityPowerRow)
            rowAbilityPowerRow.ItemArray = New Object() {PowerName, Discipline, Subdiscipline, Source, SourceType, Descriptors, Display, Time, Range, Target, Duration, Description, SavingThrow, PowerResistance, XPCost, Augmentable, License, Sourcebook, Tags, PageNo, HelpPage, parentPsiLikeAbilityRowByPsiLikeAbility_AbilityPower(8)}
            Me.Rows.Add(rowAbilityPowerRow)
            Return rowAbilityPowerRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AbilityPowerDataTable = CType(MyBase.Clone,AbilityPowerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AbilityPowerDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnPowerName = Me.Columns("PowerName")
            Me.columnDiscipline = Me.Columns("Discipline")
            Me.columnSubdiscipline = Me.Columns("Subdiscipline")
            Me.columnSource = Me.Columns("Source")
            Me.columnSourceType = Me.Columns("SourceType")
            Me.columnDescriptors = Me.Columns("Descriptors")
            Me.columnDisplay = Me.Columns("Display")
            Me.columnTime = Me.Columns("Time")
            Me.columnRange = Me.Columns("Range")
            Me.columnTarget = Me.Columns("Target")
            Me.columnDuration = Me.Columns("Duration")
            Me.columnDescription = Me.Columns("Description")
            Me.columnSavingThrow = Me.Columns("SavingThrow")
            Me.columnPowerResistance = Me.Columns("PowerResistance")
            Me.columnXPCost = Me.Columns("XPCost")
            Me.columnAugmentable = Me.Columns("Augmentable")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnPsiLikeAbility_Id = Me.Columns("PsiLikeAbility_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPowerName = New DataColumn("PowerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPowerName)
            Me.columnDiscipline = New DataColumn("Discipline", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiscipline)
            Me.columnSubdiscipline = New DataColumn("Subdiscipline", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubdiscipline)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnSourceType = New DataColumn("SourceType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourceType)
            Me.columnDescriptors = New DataColumn("Descriptors", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptors)
            Me.columnDisplay = New DataColumn("Display", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisplay)
            Me.columnTime = New DataColumn("Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTime)
            Me.columnRange = New DataColumn("Range", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRange)
            Me.columnTarget = New DataColumn("Target", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarget)
            Me.columnDuration = New DataColumn("Duration", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuration)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnSavingThrow = New DataColumn("SavingThrow", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSavingThrow)
            Me.columnPowerResistance = New DataColumn("PowerResistance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPowerResistance)
            Me.columnXPCost = New DataColumn("XPCost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnXPCost)
            Me.columnAugmentable = New DataColumn("Augmentable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAugmentable)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnPsiLikeAbility_Id = New DataColumn("PsiLikeAbility_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnPsiLikeAbility_Id)
        End Sub
        
        Public Function NewAbilityPowerRow() As AbilityPowerRow
            Return CType(Me.NewRow,AbilityPowerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AbilityPowerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AbilityPowerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AbilityPowerRowChangedEvent) Is Nothing) Then
                RaiseEvent AbilityPowerRowChanged(Me, New AbilityPowerRowChangeEvent(CType(e.Row,AbilityPowerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AbilityPowerRowChangingEvent) Is Nothing) Then
                RaiseEvent AbilityPowerRowChanging(Me, New AbilityPowerRowChangeEvent(CType(e.Row,AbilityPowerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AbilityPowerRowDeletedEvent) Is Nothing) Then
                RaiseEvent AbilityPowerRowDeleted(Me, New AbilityPowerRowChangeEvent(CType(e.Row,AbilityPowerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AbilityPowerRowDeletingEvent) Is Nothing) Then
                RaiseEvent AbilityPowerRowDeleting(Me, New AbilityPowerRowChangeEvent(CType(e.Row,AbilityPowerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAbilityPowerRow(ByVal row As AbilityPowerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityPowerRow
        Inherits DataRow
        
        Private tableAbilityPower As AbilityPowerDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAbilityPower = CType(Me.Table,AbilityPowerDataTable)
        End Sub
        
        Public Property PowerName As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.PowerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.PowerNameColumn) = value
            End Set
        End Property
        
        Public Property Discipline As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.DisciplineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.DisciplineColumn) = value
            End Set
        End Property
        
        Public Property Subdiscipline As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.SubdisciplineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.SubdisciplineColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.SourceColumn) = value
            End Set
        End Property
        
        Public Property SourceType As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.SourceTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.SourceTypeColumn) = value
            End Set
        End Property
        
        Public Property Descriptors As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.DescriptorsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.DescriptorsColumn) = value
            End Set
        End Property
        
        Public Property Display As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.DisplayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.DisplayColumn) = value
            End Set
        End Property
        
        Public Property Time As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.TimeColumn) = value
            End Set
        End Property
        
        Public Property Range As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.RangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.RangeColumn) = value
            End Set
        End Property
        
        Public Property Target As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.TargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.TargetColumn) = value
            End Set
        End Property
        
        Public Property Duration As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.DurationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.DurationColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property SavingThrow As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.SavingThrowColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.SavingThrowColumn) = value
            End Set
        End Property
        
        Public Property PowerResistance As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.PowerResistanceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.PowerResistanceColumn) = value
            End Set
        End Property
        
        Public Property XPCost As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.XPCostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.XPCostColumn) = value
            End Set
        End Property
        
        Public Property Augmentable As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.AugmentableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.AugmentableColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilityPower.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilityPower.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property PsiLikeAbilityRow As PsiLikeAbilityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PsiLikeAbility_AbilityPower")),PsiLikeAbilityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PsiLikeAbility_AbilityPower"))
            End Set
        End Property
        
        Public Function IsPowerNameNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.PowerNameColumn)
        End Function
        
        Public Sub SetPowerNameNull()
            Me(Me.tableAbilityPower.PowerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisciplineNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.DisciplineColumn)
        End Function
        
        Public Sub SetDisciplineNull()
            Me(Me.tableAbilityPower.DisciplineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubdisciplineNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.SubdisciplineColumn)
        End Function
        
        Public Sub SetSubdisciplineNull()
            Me(Me.tableAbilityPower.SubdisciplineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableAbilityPower.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceTypeNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.SourceTypeColumn)
        End Function
        
        Public Sub SetSourceTypeNull()
            Me(Me.tableAbilityPower.SourceTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptorsNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.DescriptorsColumn)
        End Function
        
        Public Sub SetDescriptorsNull()
            Me(Me.tableAbilityPower.DescriptorsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDisplayNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.DisplayColumn)
        End Function
        
        Public Sub SetDisplayNull()
            Me(Me.tableAbilityPower.DisplayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.TimeColumn)
        End Function
        
        Public Sub SetTimeNull()
            Me(Me.tableAbilityPower.TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRangeNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.RangeColumn)
        End Function
        
        Public Sub SetRangeNull()
            Me(Me.tableAbilityPower.RangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.TargetColumn)
        End Function
        
        Public Sub SetTargetNull()
            Me(Me.tableAbilityPower.TargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDurationNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.DurationColumn)
        End Function
        
        Public Sub SetDurationNull()
            Me(Me.tableAbilityPower.DurationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableAbilityPower.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSavingThrowNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.SavingThrowColumn)
        End Function
        
        Public Sub SetSavingThrowNull()
            Me(Me.tableAbilityPower.SavingThrowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPowerResistanceNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.PowerResistanceColumn)
        End Function
        
        Public Sub SetPowerResistanceNull()
            Me(Me.tableAbilityPower.PowerResistanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXPCostNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.XPCostColumn)
        End Function
        
        Public Sub SetXPCostNull()
            Me(Me.tableAbilityPower.XPCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAugmentableNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.AugmentableColumn)
        End Function
        
        Public Sub SetAugmentableNull()
            Me(Me.tableAbilityPower.AugmentableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableAbilityPower.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableAbilityPower.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableAbilityPower.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableAbilityPower.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableAbilityPower.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableAbilityPower.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilityPowerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AbilityPowerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AbilityPowerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AbilityPowerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellLikeAbilitiesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpellLikeAbilities_Id As DataColumn
        
        Private columnCharacter_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpellLikeAbilities")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SpellLikeAbilities_IdColumn As DataColumn
            Get
                Return Me.columnSpellLikeAbilities_Id
            End Get
        End Property
        
        Public ReadOnly Property Character_IdColumn As DataColumn
            Get
                Return Me.columnCharacter_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpellLikeAbilitiesRow
            Get
                Return CType(Me.Rows(index),SpellLikeAbilitiesRow)
            End Get
        End Property
        
        Public Event SpellLikeAbilitiesRowChanged As SpellLikeAbilitiesRowChangeEventHandler
        
        Public Event SpellLikeAbilitiesRowChanging As SpellLikeAbilitiesRowChangeEventHandler
        
        Public Event SpellLikeAbilitiesRowDeleted As SpellLikeAbilitiesRowChangeEventHandler
        
        Public Event SpellLikeAbilitiesRowDeleting As SpellLikeAbilitiesRowChangeEventHandler
        
        Public Overloads Sub AddSpellLikeAbilitiesRow(ByVal row As SpellLikeAbilitiesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpellLikeAbilitiesRow(ByVal parentCharacterRowByCharacter_SpellLikeAbilities As CharacterRow) As SpellLikeAbilitiesRow
            Dim rowSpellLikeAbilitiesRow As SpellLikeAbilitiesRow = CType(Me.NewRow,SpellLikeAbilitiesRow)
            rowSpellLikeAbilitiesRow.ItemArray = New Object() {Nothing, parentCharacterRowByCharacter_SpellLikeAbilities(86)}
            Me.Rows.Add(rowSpellLikeAbilitiesRow)
            Return rowSpellLikeAbilitiesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpellLikeAbilitiesDataTable = CType(MyBase.Clone,SpellLikeAbilitiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpellLikeAbilitiesDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpellLikeAbilities_Id = Me.Columns("SpellLikeAbilities_Id")
            Me.columnCharacter_Id = Me.Columns("Character_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpellLikeAbilities_Id = New DataColumn("SpellLikeAbilities_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellLikeAbilities_Id)
            Me.columnCharacter_Id = New DataColumn("Character_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnCharacter_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSpellLikeAbilities_Id}, true))
            Me.columnSpellLikeAbilities_Id.AutoIncrement = true
            Me.columnSpellLikeAbilities_Id.AllowDBNull = false
            Me.columnSpellLikeAbilities_Id.Unique = true
        End Sub
        
        Public Function NewSpellLikeAbilitiesRow() As SpellLikeAbilitiesRow
            Return CType(Me.NewRow,SpellLikeAbilitiesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpellLikeAbilitiesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellLikeAbilitiesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellLikeAbilitiesRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellLikeAbilitiesRowChanged(Me, New SpellLikeAbilitiesRowChangeEvent(CType(e.Row,SpellLikeAbilitiesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellLikeAbilitiesRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellLikeAbilitiesRowChanging(Me, New SpellLikeAbilitiesRowChangeEvent(CType(e.Row,SpellLikeAbilitiesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellLikeAbilitiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellLikeAbilitiesRowDeleted(Me, New SpellLikeAbilitiesRowChangeEvent(CType(e.Row,SpellLikeAbilitiesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellLikeAbilitiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellLikeAbilitiesRowDeleting(Me, New SpellLikeAbilitiesRowChangeEvent(CType(e.Row,SpellLikeAbilitiesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpellLikeAbilitiesRow(ByVal row As SpellLikeAbilitiesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellLikeAbilitiesRow
        Inherits DataRow
        
        Private tableSpellLikeAbilities As SpellLikeAbilitiesDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpellLikeAbilities = CType(Me.Table,SpellLikeAbilitiesDataTable)
        End Sub
        
        Public Property CharacterRow As CharacterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Character_SpellLikeAbilities")),CharacterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Character_SpellLikeAbilities"))
            End Set
        End Property
        
        Public Function GetSpellLikeAbilityRows() As SpellLikeAbilityRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SpellLikeAbilities_SpellLikeAbility")),SpellLikeAbilityRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellLikeAbilitiesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpellLikeAbilitiesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpellLikeAbilitiesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpellLikeAbilitiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellLikeAbilityDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpellName As DataColumn
        
        Private columnUsage As DataColumn
        
        Private columnCasterLevel As DataColumn
        
        Private columnClassName As DataColumn
        
        Private columnSpellLevel As DataColumn
        
        Private columnDCAbility As DataColumn
        
        Private columnDC As DataColumn
        
        Private columnNotes As DataColumn
        
        Private columnSpellLikeAbility_Id As DataColumn
        
        Private columnSpellLikeAbilities_Id As DataColumn
        
        Public Sub New()
            MyBase.New("SpellLikeAbility")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SpellNameColumn As DataColumn
            Get
                Return Me.columnSpellName
            End Get
        End Property
        
        Public ReadOnly Property UsageColumn As DataColumn
            Get
                Return Me.columnUsage
            End Get
        End Property
        
        Public ReadOnly Property CasterLevelColumn As DataColumn
            Get
                Return Me.columnCasterLevel
            End Get
        End Property
        
        Public ReadOnly Property ClassNameColumn As DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        Public ReadOnly Property SpellLevelColumn As DataColumn
            Get
                Return Me.columnSpellLevel
            End Get
        End Property
        
        Public ReadOnly Property DCAbilityColumn As DataColumn
            Get
                Return Me.columnDCAbility
            End Get
        End Property
        
        Public ReadOnly Property DCColumn As DataColumn
            Get
                Return Me.columnDC
            End Get
        End Property
        
        Public ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Public ReadOnly Property SpellLikeAbility_IdColumn As DataColumn
            Get
                Return Me.columnSpellLikeAbility_Id
            End Get
        End Property
        
        Public ReadOnly Property SpellLikeAbilities_IdColumn As DataColumn
            Get
                Return Me.columnSpellLikeAbilities_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SpellLikeAbilityRow
            Get
                Return CType(Me.Rows(index),SpellLikeAbilityRow)
            End Get
        End Property
        
        Public Event SpellLikeAbilityRowChanged As SpellLikeAbilityRowChangeEventHandler
        
        Public Event SpellLikeAbilityRowChanging As SpellLikeAbilityRowChangeEventHandler
        
        Public Event SpellLikeAbilityRowDeleted As SpellLikeAbilityRowChangeEventHandler
        
        Public Event SpellLikeAbilityRowDeleting As SpellLikeAbilityRowChangeEventHandler
        
        Public Overloads Sub AddSpellLikeAbilityRow(ByVal row As SpellLikeAbilityRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSpellLikeAbilityRow(ByVal SpellName As String, ByVal Usage As String, ByVal CasterLevel As String, ByVal ClassName As String, ByVal SpellLevel As String, ByVal DCAbility As String, ByVal DC As String, ByVal Notes As String, ByVal parentSpellLikeAbilitiesRowBySpellLikeAbilities_SpellLikeAbility As SpellLikeAbilitiesRow) As SpellLikeAbilityRow
            Dim rowSpellLikeAbilityRow As SpellLikeAbilityRow = CType(Me.NewRow,SpellLikeAbilityRow)
            rowSpellLikeAbilityRow.ItemArray = New Object() {SpellName, Usage, CasterLevel, ClassName, SpellLevel, DCAbility, DC, Notes, Nothing, parentSpellLikeAbilitiesRowBySpellLikeAbilities_SpellLikeAbility(0)}
            Me.Rows.Add(rowSpellLikeAbilityRow)
            Return rowSpellLikeAbilityRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SpellLikeAbilityDataTable = CType(MyBase.Clone,SpellLikeAbilityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SpellLikeAbilityDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpellName = Me.Columns("SpellName")
            Me.columnUsage = Me.Columns("Usage")
            Me.columnCasterLevel = Me.Columns("CasterLevel")
            Me.columnClassName = Me.Columns("ClassName")
            Me.columnSpellLevel = Me.Columns("SpellLevel")
            Me.columnDCAbility = Me.Columns("DCAbility")
            Me.columnDC = Me.Columns("DC")
            Me.columnNotes = Me.Columns("Notes")
            Me.columnSpellLikeAbility_Id = Me.Columns("SpellLikeAbility_Id")
            Me.columnSpellLikeAbilities_Id = Me.Columns("SpellLikeAbilities_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpellName = New DataColumn("SpellName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellName)
            Me.columnUsage = New DataColumn("Usage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsage)
            Me.columnCasterLevel = New DataColumn("CasterLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCasterLevel)
            Me.columnClassName = New DataColumn("ClassName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClassName)
            Me.columnSpellLevel = New DataColumn("SpellLevel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellLevel)
            Me.columnDCAbility = New DataColumn("DCAbility", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCAbility)
            Me.columnDC = New DataColumn("DC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDC)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
            Me.columnSpellLikeAbility_Id = New DataColumn("SpellLikeAbility_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellLikeAbility_Id)
            Me.columnSpellLikeAbilities_Id = New DataColumn("SpellLikeAbilities_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellLikeAbilities_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSpellLikeAbility_Id}, true))
            Me.columnSpellLikeAbility_Id.AutoIncrement = true
            Me.columnSpellLikeAbility_Id.AllowDBNull = false
            Me.columnSpellLikeAbility_Id.Unique = true
        End Sub
        
        Public Function NewSpellLikeAbilityRow() As SpellLikeAbilityRow
            Return CType(Me.NewRow,SpellLikeAbilityRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SpellLikeAbilityRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellLikeAbilityRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellLikeAbilityRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellLikeAbilityRowChanged(Me, New SpellLikeAbilityRowChangeEvent(CType(e.Row,SpellLikeAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellLikeAbilityRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellLikeAbilityRowChanging(Me, New SpellLikeAbilityRowChangeEvent(CType(e.Row,SpellLikeAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellLikeAbilityRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellLikeAbilityRowDeleted(Me, New SpellLikeAbilityRowChangeEvent(CType(e.Row,SpellLikeAbilityRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellLikeAbilityRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellLikeAbilityRowDeleting(Me, New SpellLikeAbilityRowChangeEvent(CType(e.Row,SpellLikeAbilityRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSpellLikeAbilityRow(ByVal row As SpellLikeAbilityRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellLikeAbilityRow
        Inherits DataRow
        
        Private tableSpellLikeAbility As SpellLikeAbilityDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpellLikeAbility = CType(Me.Table,SpellLikeAbilityDataTable)
        End Sub
        
        Public Property SpellName As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellLikeAbility.SpellNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellLikeAbility.SpellNameColumn) = value
            End Set
        End Property
        
        Public Property Usage As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellLikeAbility.UsageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellLikeAbility.UsageColumn) = value
            End Set
        End Property
        
        Public Property CasterLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellLikeAbility.CasterLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellLikeAbility.CasterLevelColumn) = value
            End Set
        End Property
        
        Public Property ClassName As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellLikeAbility.ClassNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellLikeAbility.ClassNameColumn) = value
            End Set
        End Property
        
        Public Property SpellLevel As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellLikeAbility.SpellLevelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellLikeAbility.SpellLevelColumn) = value
            End Set
        End Property
        
        Public Property DCAbility As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellLikeAbility.DCAbilityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellLikeAbility.DCAbilityColumn) = value
            End Set
        End Property
        
        Public Property DC As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellLikeAbility.DCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellLikeAbility.DCColumn) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tableSpellLikeAbility.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpellLikeAbility.NotesColumn) = value
            End Set
        End Property
        
        Public Property SpellLikeAbilitiesRow As SpellLikeAbilitiesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SpellLikeAbilities_SpellLikeAbility")),SpellLikeAbilitiesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SpellLikeAbilities_SpellLikeAbility"))
            End Set
        End Property
        
        Public Function IsSpellNameNull() As Boolean
            Return Me.IsNull(Me.tableSpellLikeAbility.SpellNameColumn)
        End Function
        
        Public Sub SetSpellNameNull()
            Me(Me.tableSpellLikeAbility.SpellNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUsageNull() As Boolean
            Return Me.IsNull(Me.tableSpellLikeAbility.UsageColumn)
        End Function
        
        Public Sub SetUsageNull()
            Me(Me.tableSpellLikeAbility.UsageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCasterLevelNull() As Boolean
            Return Me.IsNull(Me.tableSpellLikeAbility.CasterLevelColumn)
        End Function
        
        Public Sub SetCasterLevelNull()
            Me(Me.tableSpellLikeAbility.CasterLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableSpellLikeAbility.ClassNameColumn)
        End Function
        
        Public Sub SetClassNameNull()
            Me(Me.tableSpellLikeAbility.ClassNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellLevelNull() As Boolean
            Return Me.IsNull(Me.tableSpellLikeAbility.SpellLevelColumn)
        End Function
        
        Public Sub SetSpellLevelNull()
            Me(Me.tableSpellLikeAbility.SpellLevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDCAbilityNull() As Boolean
            Return Me.IsNull(Me.tableSpellLikeAbility.DCAbilityColumn)
        End Function
        
        Public Sub SetDCAbilityNull()
            Me(Me.tableSpellLikeAbility.DCAbilityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDCNull() As Boolean
            Return Me.IsNull(Me.tableSpellLikeAbility.DCColumn)
        End Function
        
        Public Sub SetDCNull()
            Me(Me.tableSpellLikeAbility.DCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableSpellLikeAbility.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableSpellLikeAbility.NotesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAbilitySpellRows() As AbilitySpellRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SpellLikeAbility_AbilitySpell")),AbilitySpellRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SpellLikeAbilityRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SpellLikeAbilityRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SpellLikeAbilityRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SpellLikeAbilityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilitySpellDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpellName As DataColumn
        
        Private columnSchool As DataColumn
        
        Private columnSubschool As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnSourceType As DataColumn
        
        Private columnDescriptors As DataColumn
        
        Private columnComponents As DataColumn
        
        Private columnTime As DataColumn
        
        Private columnRange As DataColumn
        
        Private columnTarget As DataColumn
        
        Private columnDuration As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnSavingThrow As DataColumn
        
        Private columnSpellResistance As DataColumn
        
        Private columnMaterialCost As DataColumn
        
        Private columnXPCost As DataColumn
        
        Private columnLicense As DataColumn
        
        Private columnSourcebook As DataColumn
        
        Private columnTags As DataColumn
        
        Private columnPageNo As DataColumn
        
        Private columnHelpPage As DataColumn
        
        Private columnSpellLikeAbility_Id As DataColumn
        
        Public Sub New()
            MyBase.New("AbilitySpell")
            Me.InitClass
        End Sub
        
        Public Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public ReadOnly Property SpellNameColumn As DataColumn
            Get
                Return Me.columnSpellName
            End Get
        End Property
        
        Public ReadOnly Property SchoolColumn As DataColumn
            Get
                Return Me.columnSchool
            End Get
        End Property
        
        Public ReadOnly Property SubschoolColumn As DataColumn
            Get
                Return Me.columnSubschool
            End Get
        End Property
        
        Public ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Public ReadOnly Property SourceTypeColumn As DataColumn
            Get
                Return Me.columnSourceType
            End Get
        End Property
        
        Public ReadOnly Property DescriptorsColumn As DataColumn
            Get
                Return Me.columnDescriptors
            End Get
        End Property
        
        Public ReadOnly Property ComponentsColumn As DataColumn
            Get
                Return Me.columnComponents
            End Get
        End Property
        
        Public ReadOnly Property TimeColumn As DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        Public ReadOnly Property RangeColumn As DataColumn
            Get
                Return Me.columnRange
            End Get
        End Property
        
        Public ReadOnly Property TargetColumn As DataColumn
            Get
                Return Me.columnTarget
            End Get
        End Property
        
        Public ReadOnly Property DurationColumn As DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        Public ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public ReadOnly Property SavingThrowColumn As DataColumn
            Get
                Return Me.columnSavingThrow
            End Get
        End Property
        
        Public ReadOnly Property SpellResistanceColumn As DataColumn
            Get
                Return Me.columnSpellResistance
            End Get
        End Property
        
        Public ReadOnly Property MaterialCostColumn As DataColumn
            Get
                Return Me.columnMaterialCost
            End Get
        End Property
        
        Public ReadOnly Property XPCostColumn As DataColumn
            Get
                Return Me.columnXPCost
            End Get
        End Property
        
        Public ReadOnly Property LicenseColumn As DataColumn
            Get
                Return Me.columnLicense
            End Get
        End Property
        
        Public ReadOnly Property SourcebookColumn As DataColumn
            Get
                Return Me.columnSourcebook
            End Get
        End Property
        
        Public ReadOnly Property TagsColumn As DataColumn
            Get
                Return Me.columnTags
            End Get
        End Property
        
        Public ReadOnly Property PageNoColumn As DataColumn
            Get
                Return Me.columnPageNo
            End Get
        End Property
        
        Public ReadOnly Property HelpPageColumn As DataColumn
            Get
                Return Me.columnHelpPage
            End Get
        End Property
        
        Public ReadOnly Property SpellLikeAbility_IdColumn As DataColumn
            Get
                Return Me.columnSpellLikeAbility_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AbilitySpellRow
            Get
                Return CType(Me.Rows(index),AbilitySpellRow)
            End Get
        End Property
        
        Public Event AbilitySpellRowChanged As AbilitySpellRowChangeEventHandler
        
        Public Event AbilitySpellRowChanging As AbilitySpellRowChangeEventHandler
        
        Public Event AbilitySpellRowDeleted As AbilitySpellRowChangeEventHandler
        
        Public Event AbilitySpellRowDeleting As AbilitySpellRowChangeEventHandler
        
        Public Overloads Sub AddAbilitySpellRow(ByVal row As AbilitySpellRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAbilitySpellRow( _
                    ByVal SpellName As String,  _
                    ByVal School As String,  _
                    ByVal Subschool As String,  _
                    ByVal Source As String,  _
                    ByVal SourceType As String,  _
                    ByVal Descriptors As String,  _
                    ByVal Components As String,  _
                    ByVal Time As String,  _
                    ByVal Range As String,  _
                    ByVal Target As String,  _
                    ByVal Duration As String,  _
                    ByVal Description As String,  _
                    ByVal SavingThrow As String,  _
                    ByVal SpellResistance As String,  _
                    ByVal MaterialCost As String,  _
                    ByVal XPCost As String,  _
                    ByVal License As String,  _
                    ByVal Sourcebook As String,  _
                    ByVal Tags As String,  _
                    ByVal PageNo As String,  _
                    ByVal HelpPage As String,  _
                    ByVal parentSpellLikeAbilityRowBySpellLikeAbility_AbilitySpell As SpellLikeAbilityRow) As AbilitySpellRow
            Dim rowAbilitySpellRow As AbilitySpellRow = CType(Me.NewRow,AbilitySpellRow)
            rowAbilitySpellRow.ItemArray = New Object() {SpellName, School, Subschool, Source, SourceType, Descriptors, Components, Time, Range, Target, Duration, Description, SavingThrow, SpellResistance, MaterialCost, XPCost, License, Sourcebook, Tags, PageNo, HelpPage, parentSpellLikeAbilityRowBySpellLikeAbility_AbilitySpell(8)}
            Me.Rows.Add(rowAbilitySpellRow)
            Return rowAbilitySpellRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AbilitySpellDataTable = CType(MyBase.Clone,AbilitySpellDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AbilitySpellDataTable
        End Function
        
        Public Sub InitVars()
            Me.columnSpellName = Me.Columns("SpellName")
            Me.columnSchool = Me.Columns("School")
            Me.columnSubschool = Me.Columns("Subschool")
            Me.columnSource = Me.Columns("Source")
            Me.columnSourceType = Me.Columns("SourceType")
            Me.columnDescriptors = Me.Columns("Descriptors")
            Me.columnComponents = Me.Columns("Components")
            Me.columnTime = Me.Columns("Time")
            Me.columnRange = Me.Columns("Range")
            Me.columnTarget = Me.Columns("Target")
            Me.columnDuration = Me.Columns("Duration")
            Me.columnDescription = Me.Columns("Description")
            Me.columnSavingThrow = Me.Columns("SavingThrow")
            Me.columnSpellResistance = Me.Columns("SpellResistance")
            Me.columnMaterialCost = Me.Columns("MaterialCost")
            Me.columnXPCost = Me.Columns("XPCost")
            Me.columnLicense = Me.Columns("License")
            Me.columnSourcebook = Me.Columns("Sourcebook")
            Me.columnTags = Me.Columns("Tags")
            Me.columnPageNo = Me.Columns("PageNo")
            Me.columnHelpPage = Me.Columns("HelpPage")
            Me.columnSpellLikeAbility_Id = Me.Columns("SpellLikeAbility_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpellName = New DataColumn("SpellName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellName)
            Me.columnSchool = New DataColumn("School", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSchool)
            Me.columnSubschool = New DataColumn("Subschool", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubschool)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnSourceType = New DataColumn("SourceType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourceType)
            Me.columnDescriptors = New DataColumn("Descriptors", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptors)
            Me.columnComponents = New DataColumn("Components", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComponents)
            Me.columnTime = New DataColumn("Time", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTime)
            Me.columnRange = New DataColumn("Range", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRange)
            Me.columnTarget = New DataColumn("Target", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTarget)
            Me.columnDuration = New DataColumn("Duration", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDuration)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnSavingThrow = New DataColumn("SavingThrow", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSavingThrow)
            Me.columnSpellResistance = New DataColumn("SpellResistance", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpellResistance)
            Me.columnMaterialCost = New DataColumn("MaterialCost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaterialCost)
            Me.columnXPCost = New DataColumn("XPCost", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnXPCost)
            Me.columnLicense = New DataColumn("License", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicense)
            Me.columnSourcebook = New DataColumn("Sourcebook", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourcebook)
            Me.columnTags = New DataColumn("Tags", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTags)
            Me.columnPageNo = New DataColumn("PageNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageNo)
            Me.columnHelpPage = New DataColumn("HelpPage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHelpPage)
            Me.columnSpellLikeAbility_Id = New DataColumn("SpellLikeAbility_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSpellLikeAbility_Id)
        End Sub
        
        Public Function NewAbilitySpellRow() As AbilitySpellRow
            Return CType(Me.NewRow,AbilitySpellRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AbilitySpellRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AbilitySpellRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AbilitySpellRowChangedEvent) Is Nothing) Then
                RaiseEvent AbilitySpellRowChanged(Me, New AbilitySpellRowChangeEvent(CType(e.Row,AbilitySpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AbilitySpellRowChangingEvent) Is Nothing) Then
                RaiseEvent AbilitySpellRowChanging(Me, New AbilitySpellRowChangeEvent(CType(e.Row,AbilitySpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AbilitySpellRowDeletedEvent) Is Nothing) Then
                RaiseEvent AbilitySpellRowDeleted(Me, New AbilitySpellRowChangeEvent(CType(e.Row,AbilitySpellRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AbilitySpellRowDeletingEvent) Is Nothing) Then
                RaiseEvent AbilitySpellRowDeleting(Me, New AbilitySpellRowChangeEvent(CType(e.Row,AbilitySpellRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAbilitySpellRow(ByVal row As AbilitySpellRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilitySpellRow
        Inherits DataRow
        
        Private tableAbilitySpell As AbilitySpellDataTable
        
        Public Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAbilitySpell = CType(Me.Table,AbilitySpellDataTable)
        End Sub
        
        Public Property SpellName As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.SpellNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.SpellNameColumn) = value
            End Set
        End Property
        
        Public Property School As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.SchoolColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.SchoolColumn) = value
            End Set
        End Property
        
        Public Property Subschool As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.SubschoolColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.SubschoolColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.SourceColumn) = value
            End Set
        End Property
        
        Public Property SourceType As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.SourceTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.SourceTypeColumn) = value
            End Set
        End Property
        
        Public Property Descriptors As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.DescriptorsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.DescriptorsColumn) = value
            End Set
        End Property
        
        Public Property Components As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.ComponentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.ComponentsColumn) = value
            End Set
        End Property
        
        Public Property Time As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.TimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.TimeColumn) = value
            End Set
        End Property
        
        Public Property Range As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.RangeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.RangeColumn) = value
            End Set
        End Property
        
        Public Property Target As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.TargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.TargetColumn) = value
            End Set
        End Property
        
        Public Property Duration As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.DurationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.DurationColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property SavingThrow As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.SavingThrowColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.SavingThrowColumn) = value
            End Set
        End Property
        
        Public Property SpellResistance As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.SpellResistanceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.SpellResistanceColumn) = value
            End Set
        End Property
        
        Public Property MaterialCost As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.MaterialCostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.MaterialCostColumn) = value
            End Set
        End Property
        
        Public Property XPCost As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.XPCostColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.XPCostColumn) = value
            End Set
        End Property
        
        Public Property License As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.LicenseColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.LicenseColumn) = value
            End Set
        End Property
        
        Public Property Sourcebook As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.SourcebookColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.SourcebookColumn) = value
            End Set
        End Property
        
        Public Property Tags As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.TagsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.TagsColumn) = value
            End Set
        End Property
        
        Public Property PageNo As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.PageNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.PageNoColumn) = value
            End Set
        End Property
        
        Public Property HelpPage As String
            Get
                Try 
                    Return CType(Me(Me.tableAbilitySpell.HelpPageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAbilitySpell.HelpPageColumn) = value
            End Set
        End Property
        
        Public Property SpellLikeAbilityRow As SpellLikeAbilityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SpellLikeAbility_AbilitySpell")),SpellLikeAbilityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SpellLikeAbility_AbilitySpell"))
            End Set
        End Property
        
        Public Function IsSpellNameNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.SpellNameColumn)
        End Function
        
        Public Sub SetSpellNameNull()
            Me(Me.tableAbilitySpell.SpellNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSchoolNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.SchoolColumn)
        End Function
        
        Public Sub SetSchoolNull()
            Me(Me.tableAbilitySpell.SchoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubschoolNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.SubschoolColumn)
        End Function
        
        Public Sub SetSubschoolNull()
            Me(Me.tableAbilitySpell.SubschoolColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableAbilitySpell.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceTypeNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.SourceTypeColumn)
        End Function
        
        Public Sub SetSourceTypeNull()
            Me(Me.tableAbilitySpell.SourceTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptorsNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.DescriptorsColumn)
        End Function
        
        Public Sub SetDescriptorsNull()
            Me(Me.tableAbilitySpell.DescriptorsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsComponentsNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.ComponentsColumn)
        End Function
        
        Public Sub SetComponentsNull()
            Me(Me.tableAbilitySpell.ComponentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTimeNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.TimeColumn)
        End Function
        
        Public Sub SetTimeNull()
            Me(Me.tableAbilitySpell.TimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRangeNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.RangeColumn)
        End Function
        
        Public Sub SetRangeNull()
            Me(Me.tableAbilitySpell.RangeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTargetNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.TargetColumn)
        End Function
        
        Public Sub SetTargetNull()
            Me(Me.tableAbilitySpell.TargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDurationNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.DurationColumn)
        End Function
        
        Public Sub SetDurationNull()
            Me(Me.tableAbilitySpell.DurationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableAbilitySpell.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSavingThrowNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.SavingThrowColumn)
        End Function
        
        Public Sub SetSavingThrowNull()
            Me(Me.tableAbilitySpell.SavingThrowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpellResistanceNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.SpellResistanceColumn)
        End Function
        
        Public Sub SetSpellResistanceNull()
            Me(Me.tableAbilitySpell.SpellResistanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaterialCostNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.MaterialCostColumn)
        End Function
        
        Public Sub SetMaterialCostNull()
            Me(Me.tableAbilitySpell.MaterialCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsXPCostNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.XPCostColumn)
        End Function
        
        Public Sub SetXPCostNull()
            Me(Me.tableAbilitySpell.XPCostColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenseNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.LicenseColumn)
        End Function
        
        Public Sub SetLicenseNull()
            Me(Me.tableAbilitySpell.LicenseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourcebookNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.SourcebookColumn)
        End Function
        
        Public Sub SetSourcebookNull()
            Me(Me.tableAbilitySpell.SourcebookColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTagsNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.TagsColumn)
        End Function
        
        Public Sub SetTagsNull()
            Me(Me.tableAbilitySpell.TagsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageNoNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.PageNoColumn)
        End Function
        
        Public Sub SetPageNoNull()
            Me(Me.tableAbilitySpell.PageNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHelpPageNull() As Boolean
            Return Me.IsNull(Me.tableAbilitySpell.HelpPageColumn)
        End Function
        
        Public Sub SetHelpPageNull()
            Me(Me.tableAbilitySpell.HelpPageColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AbilitySpellRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AbilitySpellRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AbilitySpellRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AbilitySpellRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
