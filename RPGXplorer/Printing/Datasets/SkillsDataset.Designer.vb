'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("SkillsDataset"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SkillsDataset
    Inherits System.Data.DataSet
    
    Private tableSkills As SkillsDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Skills")) Is Nothing) Then
                MyBase.Tables.Add(New SkillsDataTable(ds.Tables("Skills")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Skills() As SkillsDataTable
        Get
            Return Me.tableSkills
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As SkillsDataset = CType(MyBase.Clone,SkillsDataset)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Skills")) Is Nothing) Then
                MyBase.Tables.Add(New SkillsDataTable(ds.Tables("Skills")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSkills = CType(MyBase.Tables("Skills"), SkillsDataTable)
        If (initTable = True) Then
            If (Not (Me.tableSkills) Is Nothing) Then
                Me.tableSkills.InitVars()
            End If
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "SkillsDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SkillsDataset.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSkills = New SkillsDataTable
        MyBase.Tables.Add(Me.tableSkills)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeSkills() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SkillsDataset = New SkillsDataset
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function

    Public Delegate Sub SkillsRowChangeEventHandler(ByVal sender As Object, ByVal e As SkillsRowChangeEvent)

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class SkillsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnSkill1Name As System.Data.DataColumn

        Private columnSkill1 As System.Data.DataColumn

        Private columnSkill2Name As System.Data.DataColumn

        Private columnSkill2 As System.Data.DataColumn

        Private columnSkill3Name As System.Data.DataColumn

        Private columnSkill3 As System.Data.DataColumn

        Private columnSkill4Name As System.Data.DataColumn

        Private columnSkill4 As System.Data.DataColumn

        Private columnSkill1Info As System.Data.DataColumn

        Private columnSkill2Info As System.Data.DataColumn

        Private columnSkill3Info As System.Data.DataColumn

        Private columnSkill4Info As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Skills"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill1NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnSkill1Name
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill1Column() As System.Data.DataColumn
            Get
                Return Me.columnSkill1
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill2NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnSkill2Name
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill2Column() As System.Data.DataColumn
            Get
                Return Me.columnSkill2
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill3NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnSkill3Name
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill3Column() As System.Data.DataColumn
            Get
                Return Me.columnSkill3
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill4NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnSkill4Name
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill4Column() As System.Data.DataColumn
            Get
                Return Me.columnSkill4
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill1InfoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSkill1Info
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill2InfoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSkill2Info
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill3InfoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSkill3Info
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Skill4InfoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSkill4Info
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As SkillsRow
            Get
                Return CType(Me.Rows(index), SkillsRow)
            End Get
        End Property

        Public Event SkillsRowChanging As SkillsRowChangeEventHandler

        Public Event SkillsRowChanged As SkillsRowChangeEventHandler

        Public Event SkillsRowDeleting As SkillsRowChangeEventHandler

        Public Event SkillsRowDeleted As SkillsRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddSkillsRow(ByVal row As SkillsRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSkillsRow(ByVal Skill1Name As String, ByVal Skill1 As String, ByVal Skill2Name As String, ByVal Skill2 As String, ByVal Skill3Name As String, ByVal Skill3 As String, ByVal Skill4Name As String, ByVal Skill4 As String, ByVal Skill1Info As String, ByVal Skill2Info As String, ByVal Skill3Info As String, ByVal Skill4Info As String) As SkillsRow
            Dim rowSkillsRow As SkillsRow = CType(Me.NewRow, SkillsRow)
            rowSkillsRow.ItemArray = New Object() {Skill1Name, Skill1, Skill2Name, Skill2, Skill3Name, Skill3, Skill4Name, Skill4, Skill1Info, Skill2Info, Skill3Info, Skill4Info}
            Me.Rows.Add(rowSkillsRow)
            Return rowSkillsRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SkillsDataTable = CType(MyBase.Clone, SkillsDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SkillsDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub InitVars()
            Me.columnSkill1Name = MyBase.Columns("Skill1Name")
            Me.columnSkill1 = MyBase.Columns("Skill1")
            Me.columnSkill2Name = MyBase.Columns("Skill2Name")
            Me.columnSkill2 = MyBase.Columns("Skill2")
            Me.columnSkill3Name = MyBase.Columns("Skill3Name")
            Me.columnSkill3 = MyBase.Columns("Skill3")
            Me.columnSkill4Name = MyBase.Columns("Skill4Name")
            Me.columnSkill4 = MyBase.Columns("Skill4")
            Me.columnSkill1Info = MyBase.Columns("Skill1Info")
            Me.columnSkill2Info = MyBase.Columns("Skill2Info")
            Me.columnSkill3Info = MyBase.Columns("Skill3Info")
            Me.columnSkill4Info = MyBase.Columns("Skill4Info")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnSkill1Name = New System.Data.DataColumn("Skill1Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill1Name)
            Me.columnSkill1 = New System.Data.DataColumn("Skill1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill1)
            Me.columnSkill2Name = New System.Data.DataColumn("Skill2Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill2Name)
            Me.columnSkill2 = New System.Data.DataColumn("Skill2", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill2)
            Me.columnSkill3Name = New System.Data.DataColumn("Skill3Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill3Name)
            Me.columnSkill3 = New System.Data.DataColumn("Skill3", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill3)
            Me.columnSkill4Name = New System.Data.DataColumn("Skill4Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill4Name)
            Me.columnSkill4 = New System.Data.DataColumn("Skill4", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill4)
            Me.columnSkill1Info = New System.Data.DataColumn("Skill1Info", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill1Info)
            Me.columnSkill2Info = New System.Data.DataColumn("Skill2Info", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill2Info)
            Me.columnSkill3Info = New System.Data.DataColumn("Skill3Info", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill3Info)
            Me.columnSkill4Info = New System.Data.DataColumn("Skill4Info", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSkill4Info)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSkillsRow() As SkillsRow
            Return CType(Me.NewRow, SkillsRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SkillsRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SkillsRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SkillsRowChangedEvent) Is Nothing) Then
                RaiseEvent SkillsRowChanged(Me, New SkillsRowChangeEvent(CType(e.Row, SkillsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SkillsRowChangingEvent) Is Nothing) Then
                RaiseEvent SkillsRowChanging(Me, New SkillsRowChangeEvent(CType(e.Row, SkillsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SkillsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SkillsRowDeleted(Me, New SkillsRowChangeEvent(CType(e.Row, SkillsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SkillsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SkillsRowDeleting(Me, New SkillsRowChangeEvent(CType(e.Row, SkillsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSkillsRow(ByVal row As SkillsRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As SkillsDataset = New SkillsDataset
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SkillsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class SkillsRow
        Inherits System.Data.DataRow

        Private tableSkills As SkillsDataTable

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSkills = CType(Me.Table, SkillsDataTable)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill1Name() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill1NameColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill1Name' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill1NameColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill1() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill1Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill1' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill1Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill2Name() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill2NameColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill2Name' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill2NameColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill2() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill2Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill2' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill2Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill3Name() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill3NameColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill3Name' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill3NameColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill3() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill3Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill3' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill3Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill4Name() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill4NameColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill4Name' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill4NameColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill4() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill4Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill4' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill4Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill1Info() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill1InfoColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill1Info' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill1InfoColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill2Info() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill2InfoColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill2Info' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill2InfoColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill3Info() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill3InfoColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill3Info' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill3InfoColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property Skill4Info() As String
            Get
                Try
                    Return CType(Me(Me.tableSkills.Skill4InfoColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Skill4Info' in table 'Skills' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSkills.Skill4InfoColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill1NameNull() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill1NameColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill1NameNull()
            Me(Me.tableSkills.Skill1NameColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill1Null() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill1Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill1Null()
            Me(Me.tableSkills.Skill1Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill2NameNull() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill2NameColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill2NameNull()
            Me(Me.tableSkills.Skill2NameColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill2Null() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill2Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill2Null()
            Me(Me.tableSkills.Skill2Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill3NameNull() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill3NameColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill3NameNull()
            Me(Me.tableSkills.Skill3NameColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill3Null() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill3Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill3Null()
            Me(Me.tableSkills.Skill3Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill4NameNull() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill4NameColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill4NameNull()
            Me(Me.tableSkills.Skill4NameColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill4Null() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill4Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill4Null()
            Me(Me.tableSkills.Skill4Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill1InfoNull() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill1InfoColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill1InfoNull()
            Me(Me.tableSkills.Skill1InfoColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill2InfoNull() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill2InfoColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill2InfoNull()
            Me(Me.tableSkills.Skill2InfoColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill3InfoNull() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill3InfoColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill3InfoNull()
            Me(Me.tableSkills.Skill3InfoColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSkill4InfoNull() As Boolean
            Return Me.IsNull(Me.tableSkills.Skill4InfoColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSkill4InfoNull()
            Me(Me.tableSkills.Skill4InfoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SkillsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SkillsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SkillsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SkillsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
