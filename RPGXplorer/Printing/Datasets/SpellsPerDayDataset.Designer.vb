'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("SpellsPerDayDataset"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SpellsPerDayDataset
    Inherits System.Data.DataSet
    
    Private tableSpellsPerDay As SpellsPerDayDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SpellsPerDay")) Is Nothing) Then
                MyBase.Tables.Add(New SpellsPerDayDataTable(ds.Tables("SpellsPerDay")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SpellsPerDay() As SpellsPerDayDataTable
        Get
            Return Me.tableSpellsPerDay
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As SpellsPerDayDataset = CType(MyBase.Clone,SpellsPerDayDataset)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SpellsPerDay")) Is Nothing) Then
                MyBase.Tables.Add(New SpellsPerDayDataTable(ds.Tables("SpellsPerDay")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSpellsPerDay = CType(MyBase.Tables("SpellsPerDay"), SpellsPerDayDataTable)
        If (initTable = True) Then
            If (Not (Me.tableSpellsPerDay) Is Nothing) Then
                Me.tableSpellsPerDay.InitVars()
            End If
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub InitClass()
        Me.DataSetName = "SpellsPerDayDataset"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SpellsPerDayDataset.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSpellsPerDay = New SpellsPerDayDataTable
        MyBase.Tables.Add(Me.tableSpellsPerDay)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeSpellsPerDay() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SpellsPerDayDataset = New SpellsPerDayDataset
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function

    Public Delegate Sub SpellsPerDayRowChangeEventHandler(ByVal sender As Object, ByVal e As SpellsPerDayRowChangeEvent)

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class SpellsPerDayDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnClassName As System.Data.DataColumn

        Private columnSPD0 As System.Data.DataColumn

        Private columnSPD1 As System.Data.DataColumn

        Private columnSPD2 As System.Data.DataColumn

        Private columnSPD3 As System.Data.DataColumn

        Private columnSPD4 As System.Data.DataColumn

        Private columnSPD5 As System.Data.DataColumn

        Private columnSPD6 As System.Data.DataColumn

        Private columnSPD7 As System.Data.DataColumn

        Private columnSPD8 As System.Data.DataColumn

        Private columnSPD9 As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "SpellsPerDay"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ClassNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD0Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD0
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD1Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD1
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD2Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD2
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD3Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD3
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD4Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD4
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD5Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD5
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD6Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD6
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD7Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD7
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD8Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD8
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPD9Column() As System.Data.DataColumn
            Get
                Return Me.columnSPD9
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As SpellsPerDayRow
            Get
                Return CType(Me.Rows(index), SpellsPerDayRow)
            End Get
        End Property

        Public Event SpellsPerDayRowChanging As SpellsPerDayRowChangeEventHandler

        Public Event SpellsPerDayRowChanged As SpellsPerDayRowChangeEventHandler

        Public Event SpellsPerDayRowDeleting As SpellsPerDayRowChangeEventHandler

        Public Event SpellsPerDayRowDeleted As SpellsPerDayRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddSpellsPerDayRow(ByVal row As SpellsPerDayRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSpellsPerDayRow(ByVal ClassName As String, ByVal SPD0 As String, ByVal SPD1 As String, ByVal SPD2 As String, ByVal SPD3 As String, ByVal SPD4 As String, ByVal SPD5 As String, ByVal SPD6 As String, ByVal SPD7 As String, ByVal SPD8 As String, ByVal SPD9 As String) As SpellsPerDayRow
            Dim rowSpellsPerDayRow As SpellsPerDayRow = CType(Me.NewRow, SpellsPerDayRow)
            rowSpellsPerDayRow.ItemArray = New Object() {ClassName, SPD0, SPD1, SPD2, SPD3, SPD4, SPD5, SPD6, SPD7, SPD8, SPD9}
            Me.Rows.Add(rowSpellsPerDayRow)
            Return rowSpellsPerDayRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SpellsPerDayDataTable = CType(MyBase.Clone, SpellsPerDayDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SpellsPerDayDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub InitVars()
            Me.columnClassName = MyBase.Columns("ClassName")
            Me.columnSPD0 = MyBase.Columns("SPD0")
            Me.columnSPD1 = MyBase.Columns("SPD1")
            Me.columnSPD2 = MyBase.Columns("SPD2")
            Me.columnSPD3 = MyBase.Columns("SPD3")
            Me.columnSPD4 = MyBase.Columns("SPD4")
            Me.columnSPD5 = MyBase.Columns("SPD5")
            Me.columnSPD6 = MyBase.Columns("SPD6")
            Me.columnSPD7 = MyBase.Columns("SPD7")
            Me.columnSPD8 = MyBase.Columns("SPD8")
            Me.columnSPD9 = MyBase.Columns("SPD9")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnClassName = New System.Data.DataColumn("ClassName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassName)
            Me.columnSPD0 = New System.Data.DataColumn("SPD0", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD0)
            Me.columnSPD1 = New System.Data.DataColumn("SPD1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD1)
            Me.columnSPD2 = New System.Data.DataColumn("SPD2", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD2)
            Me.columnSPD3 = New System.Data.DataColumn("SPD3", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD3)
            Me.columnSPD4 = New System.Data.DataColumn("SPD4", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD4)
            Me.columnSPD5 = New System.Data.DataColumn("SPD5", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD5)
            Me.columnSPD6 = New System.Data.DataColumn("SPD6", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD6)
            Me.columnSPD7 = New System.Data.DataColumn("SPD7", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD7)
            Me.columnSPD8 = New System.Data.DataColumn("SPD8", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD8)
            Me.columnSPD9 = New System.Data.DataColumn("SPD9", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPD9)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSpellsPerDayRow() As SpellsPerDayRow
            Return CType(Me.NewRow, SpellsPerDayRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SpellsPerDayRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SpellsPerDayRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpellsPerDayRowChangedEvent) Is Nothing) Then
                RaiseEvent SpellsPerDayRowChanged(Me, New SpellsPerDayRowChangeEvent(CType(e.Row, SpellsPerDayRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpellsPerDayRowChangingEvent) Is Nothing) Then
                RaiseEvent SpellsPerDayRowChanging(Me, New SpellsPerDayRowChangeEvent(CType(e.Row, SpellsPerDayRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpellsPerDayRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpellsPerDayRowDeleted(Me, New SpellsPerDayRowChangeEvent(CType(e.Row, SpellsPerDayRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpellsPerDayRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpellsPerDayRowDeleting(Me, New SpellsPerDayRowChangeEvent(CType(e.Row, SpellsPerDayRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSpellsPerDayRow(ByVal row As SpellsPerDayRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As SpellsPerDayDataset = New SpellsPerDayDataset
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SpellsPerDayDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")> _
    Partial Public Class SpellsPerDayRow
        Inherits System.Data.DataRow

        Private tableSpellsPerDay As SpellsPerDayDataTable

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpellsPerDay = CType(Me.Table, SpellsPerDayDataTable)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property ClassName() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.ClassNameColumn), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ClassName' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.ClassNameColumn) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD0() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD0Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD0' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD0Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD1() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD1Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD1' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD1Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD2() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD2Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD2' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD2Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD3() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD3Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD3' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD3Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD4() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD4Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD4' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD4Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD5() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD5Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD5' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD5Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD6() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD6Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD6' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD6Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD7() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD7Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD7' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD7Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD8() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD8Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD8' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD8Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Property SPD9() As String
            Get
                Try
                    Return CType(Me(Me.tableSpellsPerDay.SPD9Column), String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SPD9' in table 'SpellsPerDay' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableSpellsPerDay.SPD9Column) = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsClassNameNull() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.ClassNameColumn)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetClassNameNull()
            Me(Me.tableSpellsPerDay.ClassNameColumn) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD0Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD0Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD0Null()
            Me(Me.tableSpellsPerDay.SPD0Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD1Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD1Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD1Null()
            Me(Me.tableSpellsPerDay.SPD1Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD2Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD2Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD2Null()
            Me(Me.tableSpellsPerDay.SPD2Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD3Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD3Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD3Null()
            Me(Me.tableSpellsPerDay.SPD3Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD4Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD4Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD4Null()
            Me(Me.tableSpellsPerDay.SPD4Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD5Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD5Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD5Null()
            Me(Me.tableSpellsPerDay.SPD5Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD6Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD6Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD6Null()
            Me(Me.tableSpellsPerDay.SPD6Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD7Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD7Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD7Null()
            Me(Me.tableSpellsPerDay.SPD7Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD8Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD8Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD8Null()
            Me(Me.tableSpellsPerDay.SPD8Column) = System.Convert.DBNull
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function IsSPD9Null() As Boolean
            Return Me.IsNull(Me.tableSpellsPerDay.SPD9Column)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub SetSPD9Null()
            Me(Me.tableSpellsPerDay.SPD9Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SpellsPerDayRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SpellsPerDayRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SpellsPerDayRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SpellsPerDayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
